{
  "name": "oj-c",
  "version": "14.0.1",
  "components": {
    "oj-c-input-number": {
      "name": "input-number",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CInputNumberElement"
      ],
      "displayName": "InputNumber",
      "description": "An input number displays a field that allows a user to enter a number value.",
      "help": "oj-c.InputNumber.html",
      "main": "oj-c/input-number",
      "extension": {
        "vbdt": {
          "module": "oj-c/input-number",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-input-number",
          "uxSpecs": [
            "input-number"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "number|null",
          "description": "The maximum allowed value",
          "displayName": "Max",
          "help": "#max"
        },
        "min": {
          "type": "number|null",
          "description": "The maximum allowed value",
          "displayName": "Max",
          "help": "#max"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "numberRangeExactMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "step": {
          "type": "number",
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. If 0, no step functionality.",
          "displayName": "Step",
          "help": "#step"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-number uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            }
          },
          "enumValues": [
            "number",
            "text",
            "auto"
          ],
          "value": "auto"
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "transientValue": {
          "type": "number",
          "description": "Specifies the transient value of the component",
          "displayName": "Transient Value",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-password": {
      "name": "input-password",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CInputPasswordElement"
      ],
      "displayName": "InputPassword",
      "description": "An input password displays a field that allows a user to enter a password that will be masked.",
      "help": "oj-c.InputPassword.html",
      "main": "oj-c/input-password",
      "extension": {
        "vbdt": {
          "module": "oj-c/input-password",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-password",
          "uxSpecs": [
            "input-password"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "always",
            "never",
            "conditional"
          ],
          "value": "never"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "maskIcon": {
          "type": "string",
          "description": "Represents the mask icon.",
          "displayName": "Mask Icon",
          "help": "#maskIcon",
          "propertyEditorValues": {
            "hidden": {
              "description": "The mask visibility icon is never visible.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "The mask visibility icon is always visible.",
              "displayName": "Visible"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-text": {
      "name": "input-text",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CInputTextElement"
      ],
      "displayName": "InputText",
      "description": "An input text displays a field that allows a user to enter a text value.",
      "help": "oj-c.InputText.html",
      "main": "oj-c/input-text",
      "extension": {
        "vbdt": {
          "module": "oj-c/input-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input",
          "uxSpecs": [
            "input-text"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "clearIcon",
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "always",
            "never",
            "conditional"
          ],
          "value": "never"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "displayName": "Count By",
              "help": "#length.countBy",
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length (default, if unspecified)",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length.",
                  "displayName": "Code Unit"
                }
              },
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-text uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "text",
            "auto",
            "search",
            "email",
            "tel",
            "url"
          ],
          "value": "auto"
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "end": {
          "description": "The end slot content for the component.",
          "displayName": "End",
          "help": "#end"
        },
        "start": {
          "description": "The start slot content for the component.",
          "displayName": "Start",
          "help": "#start"
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-message-toast": {
      "name": "message-toast",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CMessageToastElement"
      ],
      "displayName": "MessageToast",
      "description": "Toast messages are short, noncritical, auto-dismissible messages that communicate non-disruptive contextual messages.",
      "help": "oj-c.MessageToast.html",
      "main": "oj-c/message-toast",
      "extension": {
        "vbdt": {
          "defaultColumns": 2,
          "minColumns": 1,
          "module": "oj-c/message-toast"
        },
        "oracle": {
          "icon": "oj-ux-ico-messages",
          "uxSpecs": [
            "toast-messages"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "data": {
          "type": "object",
          "description": "Data for the Message Toast component.",
          "displayName": "Data",
          "help": "#data"
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext"
        },
        "iconTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the icon template for the current row.",
          "displayName": "Current Icon Template",
          "help": "#iconTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext"
        },
        "offset": {
          "type": "number|object",
          "description": "Offset for the Message Toast component's position.",
          "displayName": "Offset",
          "help": "#offset",
          "value": 0
        },
        "position": {
          "type": "string",
          "description": "Position for the Message Toast component.",
          "displayName": "Position",
          "help": "#position",
          "enumValues": [
            "bottom",
            "top",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ],
          "value": "bottom"
        }
      },
      "dynamicSlots": {
        "MessageToastTemplateContext": {
          "description": "The dynamic template slots for the Toast message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "number|string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning",
                        "fatal"
                      ]
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "number|string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning",
                        "fatal"
                      ]
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-multiple": {
      "name": "select-multiple",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CSelectMultipleElement"
      ],
      "displayName": "SelectMultiple",
      "description": "A select multiple provides support for multi-select and search filtering",
      "help": "oj-c.SelectMultiple.html",
      "main": "oj-c/select-multiple",
      "extension": {
        "vbdt": {
          "module": "oj-c/select-multiple",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-multiple-items"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItems"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "object|null",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Data",
          "help": "#data",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "value": {
          "type": "object|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItems": {
          "type": "object|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Items",
          "help": "#valueItems",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "text",
            "auto",
            "search",
            "email",
            "tel",
            "url"
          ],
          "value": "auto"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-single": {
      "name": "select-single",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CSelectSingleElement"
      ],
      "displayName": "SelectSingle",
      "description": "A select single provides support for single-select and search filtering",
      "help": "oj-c.SelectSingle.html",
      "main": "oj-c/select-single",
      "extension": {
        "vbdt": {
          "module": "oj-c/select-single",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-single-items"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItem"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "object|null",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Data",
          "help": "#data",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItem": {
          "type": "object|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Item",
          "help": "#valueItem",
          "properties": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "any"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "number|string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning",
                        "fatal"
                      ]
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "any"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          },
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "text",
            "auto",
            "search",
            "email",
            "tel",
            "url"
          ],
          "value": "auto"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "events": {
        "ojValueAction": {
          "description": "Event triggered when a value is submitted by the user, even if the value is the same as the previous value.",
          "displayName": "onOjValueAction",
          "help": "#event:valueAction",
          "detail": {
            "itemContext": {
              "type": "object|null"
            },
            "previousValue": {
              "type": "any"
            },
            "value": {
              "type": "any"
            }
          }
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-text-area": {
      "name": "text-area",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CTextAreaElement"
      ],
      "displayName": "TextArea",
      "description": "A text area displays a field that allows a user to enter a multi-line text value",
      "help": "oj-c.TextArea.html",
      "main": "oj-c/text-area",
      "extension": {
        "vbdt": {
          "module": "oj-c/text-area",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-area"
        }
      },
      "since": "13.0.0",
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "display",
                "none"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "none",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "wrap",
            "truncate"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "counter": {
              "type": "string",
              "enumValues": [
                "none",
                "remaining"
              ]
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "maxRows": {
          "type": "number",
          "description": "The maximum number of visible text lines of the textarea.",
          "displayName": "Max Rows",
          "help": "#maxRows"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          },
          "value": false
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "resizeBehavior": {
          "type": "string",
          "description": "Defines the resizeBehavior of the textarea.",
          "displayName": "Resize Behavior",
          "help": "#resizeBehavior",
          "propertyEditorValues": {
            "horizontal": {
              "description": "The textarea will be resizable in the horizontal direction only.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "The textarea will be resizable in the vertical direction only.",
              "displayName": "Vertical"
            },
            "both": {
              "description": "The textarea will be interactively resizable both horizontally and vertically.",
              "displayName": "Both"
            },
            "none": {
              "description": "The textarea will not be resizable by the user.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "vertical",
            "horizontal",
            "both"
          ],
          "value": "none"
        },
        "rows": {
          "type": "number",
          "description": "The number of visible text lines in the textarea.",
          "displayName": "Rows",
          "help": "#rows"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "start",
            "right",
            "end"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            }
          },
          "enumValues": [
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          },
          "value": "reflow"
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "valid",
            "pending",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "reset": {
          "return": "any"
        },
        "showMessages": {
          "return": "any"
        },
        "validate": {
          "return": "Promise"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-bar": {
      "name": "progress-bar",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CProgressBarElement"
      ],
      "description": "A progress bar allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Bar",
      "help": "oj-c.ProgressBar.html",
      "main": "oj-c/progress-bar",
      "extension": {
        "vbdt": {
          "module": "oj-c/progress-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-progress-linear",
          "uxSpecs": [
            "progress-indicator"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Bar.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the progress bar is on the top edge of a container",
          "displayName": "edge",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Not attached progress bar (default, if unspecified)",
              "displayName": "Not Attached Progress Bar"
            },
            "top": {
              "description": "Progress Bar at Top Edge of container",
              "displayName": "Progress Bar Top Edge Container"
            }
          },
          "enumValues": [
            "none",
            "top"
          ],
          "value": "none"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-circle": {
      "name": "progress-circle",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CProgressCircleElement"
      ],
      "description": "A progress circle allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Circle",
      "help": "oj-c.ProgressCircle.html",
      "main": "oj-c/progress-circle",
      "extension": {
        "vbdt": {
          "module": "oj-c/progress-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "progress-indicator"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Circle.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the progress circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small progress circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium progress circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large progress circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-avatar": {
      "name": "avatar",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CAvatarElement"
      ],
      "description": "An avatar represents a person or entity as initials or an image.",
      "displayName": "Avatar",
      "help": "oj-c.Avatar.html",
      "main": "oj-c/avatar",
      "extension": {
        "vbdt": {
          "module": "oj-c/avatar"
        },
        "oracle": {
          "icon": "oj-ux-ico-avatar",
          "uxSpecs": [
            "avatar"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "size",
            "background"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "background": {
          "type": "string",
          "description": "Specifies the background of the avatar.",
          "displayName": "Background",
          "help": "#background",
          "propertyEditorValues": {
            "neutral": {
              "description": "Neutral background (default, if unspecified)",
              "displayName": "Neutral"
            },
            "orange": {
              "description": "Orange background",
              "displayName": "Orange"
            },
            "green": {
              "description": "Green background",
              "displayName": "Green"
            },
            "teal": {
              "description": "Teal background",
              "displayName": "Teal"
            },
            "blue": {
              "description": "Blue background",
              "displayName": "Blue"
            },
            "slate": {
              "description": "Slate background",
              "displayName": "Slate"
            },
            "pink": {
              "description": "Pink background",
              "displayName": "Pink"
            },
            "purple": {
              "description": "Purple background",
              "displayName": "Purple"
            },
            "lilac": {
              "description": "Lilac background",
              "displayName": "Lilac"
            },
            "gray": {
              "description": "Gray background",
              "displayName": "Gray"
            }
          },
          "enumValues": [
            "neutral",
            "orange",
            "green",
            "teal",
            "blue",
            "slate",
            "pink",
            "purple",
            "lilac",
            "gray"
          ],
          "value": "neutral"
        },
        "initials": {
          "type": "string|null",
          "description": "Specifies the initials of the avatar.",
          "displayName": "Initials",
          "help": "#initials",
          "translatable": true
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the avatar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "2xs": {
              "description": "extra, extra small avatar",
              "displayName": "Extra Extra Small"
            },
            "xs": {
              "description": "extra small avatar",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small avatar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium avatar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large avatar",
              "displayName": "Large"
            },
            "xl": {
              "description": "extra large avatar",
              "displayName": "Extra Large"
            },
            "2xl": {
              "description": "extra, extra large avatar",
              "displayName": "Extra Extra Large"
            }
          },
          "enumValues": [
            "2xs",
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
            "2xl"
          ],
          "value": "md"
        },
        "src": {
          "type": "string|null",
          "description": "Specifies the source for the image of the avatar.",
          "displayName": "Src",
          "help": "#src"
        },
        "iconClass": {
          "type": "string",
          "description": "The icon class to be displayed.",
          "displayName": "Icon Class",
          "help": "#iconClass"
        },
        "shape": {
          "type": "string",
          "description": "Specifies the shape of the avatar.",
          "displayName": "Shape",
          "help": "#shape",
          "propertyEditorValues": {
            "square": {
              "description": "square avatar (default, if unspecified)",
              "displayName": "Square Avatar"
            },
            "circle": {
              "description": "circular avatar",
              "displayName": "Circular Avatar"
            }
          },
          "enumValues": [
            "circle",
            "square"
          ],
          "value": "square"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-button": {
      "name": "button",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CButtonElement"
      ],
      "description": "Buttons direct users to initiate or take actions and work with a single tap, click, or keystroke.",
      "displayName": "Button",
      "help": "oj-c.Button.html",
      "main": "oj-c/button",
      "extension": {
        "vbdt": {
          "module": "oj-c/button"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "button"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "display",
            "chroming",
            "disabled",
            "width",
            "size",
            "edge"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "displayName": "display",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "label",
            "icons",
            "all"
          ],
          "value": "all"
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "displayName": "size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "translatable": true,
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the button is attached to an edge. For example setting edge='bottom' can be used to attach a button to the bottom of a card. The button is then stretched to 100% width, and borders adjusted.",
          "displayName": "edge",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Display a default standalone button.",
              "displayName": "Small"
            },
            "bottom": {
              "description": "Stretch the button to 100% width and adjust borders for usage at bottom of container.",
              "displayName": "bottom"
            }
          },
          "translatable": true,
          "enumValues": [
            "none",
            "bottom"
          ],
          "value": "none"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has variants in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            },
            "danger": {
              "description": "A Danger button alerts the user to a dangerous situation.",
              "displayName": "Danger"
            }
          },
          "enumValues": [
            "borderless",
            "outlined",
            "solid",
            "callToAction",
            "danger"
          ],
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-button element accepts DOM nodes as children with the startIcon slot.",
          "displayName": "startIcon",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-button element accepts DOM nodes as children with the endIcon slot.",
          "displayName": "endIcon",
          "help": "#endIcon"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-rating-gauge": {
      "name": "rating-gauge",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CRatingGaugeElement"
      ],
      "description": "Rating gauges are typically used to display or accept user feedback on a product or service.",
      "displayName": "Rating Gauge",
      "main": "oj-c/rating-gauge",
      "help": "oj-c.RatingGauge.html",
      "extension": {
        "vbdt": {
          "module": "oj-c/rating-gauge"
        },
        "oracle": {
          "icon": "oj-ux-ico-gauge-rating",
          "uxSpecs": [
            "rating-gauge"
          ]
        }
      },
      "since": "13.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the gauge.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 5
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "disabled": {
          "type": "boolean",
          "help": "#disabled",
          "displayName": "Disabled",
          "value": false
        },
        "changed": {
          "type": "boolean",
          "description": "Whether there has been a value entered by the user even if it is the same as the initial value.",
          "displayName": "Changed",
          "help": "#changed",
          "writeback": true,
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the Rating Gauge.",
          "displayName": "Value",
          "help": "#value",
          "minimum": 0,
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#help"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the rating gauge items.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Rating Gauge",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Rating Gauge (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Rating Gauge",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "color": {
          "type": "string",
          "description": "Specifies the color of the rating gauge items.",
          "displayName": "Color",
          "help": "#color",
          "propertyEditorValues": {
            "neutral": {
              "description": "neutral color Rating Gauge (default, if unspecified)",
              "displayName": "Neutral"
            },
            "gold": {
              "description": "gold color Rating Gauge",
              "displayName": "Gold"
            }
          },
          "enumValues": [
            "neutral",
            "gold"
          ],
          "value": "neutral"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "tooltip": {
          "type": "string",
          "displayName": "Tooltip",
          "help": "#tooltip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-collapsible": {
      "name": "collapsible",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CCollapsibleElement"
      ],
      "description": "A collapsible displays a header that can be expanded to show its content.",
      "displayName": "Collapsible",
      "help": "oj-c.Collapsible.html",
      "main": "oj-c/collapsible",
      "extension": {
        "vbdt": {
          "module": "oj-c/collapsible"
        },
        "oracle": {
          "icon": "oj-ux-ico-collapsible",
          "uxSpecs": [
            "collapsible"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "expanded",
            "iconPosition",
            "variant"
          ]
        }
      ],
      "since": "14.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the collapsible. The oj-c-collapsible element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        },
        "header": {
          "description": "The header slot is the collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.",
          "displayName": "Header",
          "help": "#header"
        }
      },
      "properties": {
        "disabled": {
          "type": "boolean",
          "description": "Disables the collapsible if set to true",
          "displayName": "Disabled",
          "help": "#disabled"
        },
        "expanded": {
          "type": "boolean",
          "description": "Specifies if the content is expanded.",
          "displayName": "Expanded",
          "help": "#expanded",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          },
          "writeback": true
        },
        "iconPosition": {
          "type": "string",
          "description": "Controls placement of the icon in the header.",
          "displayName": "iconPosition",
          "help": "#iconPosition",
          "enumValues": [
            "start",
            "end"
          ]
        },
        "variant": {
          "type": "string",
          "description": "Controls display of the optional divider below the header.",
          "displayName": "variant",
          "help": "#variant",
          "enumValues": [
            "basic",
            "horizontal-rule"
          ]
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is collapsed.",
          "help": "#event:beforeCollapse",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojBeforeExpand": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is expanded.",
          "help": "#event:beforeExpand",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after the collapsible has been collapsed.",
          "help": "#event:collapse",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after the collapsible has been expanded (after animation completes).",
          "help": "#event:expand",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-file-picker": {
      "name": "file-picker",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CFilePickerElement"
      ],
      "properties": {
        "accept": {
          "type": "Array<string>",
          "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types",
          "displayName": "Accept",
          "help": "#accept"
        },
        "capture": {
          "type": "string",
          "description": "Specifies the preferred facing mode for the device's media capture mechanism.",
          "displayName": "Capture",
          "help": "#capture",
          "propertyEditorValues": {
            "user": {
              "description": "Specifies user-facing as the preferred mode",
              "displayName": "User"
            },
            "environment": {
              "description": "Specifies environment-facing as the preferred mode",
              "displayName": "Environment"
            },
            "implementation": {
              "description": "Specifies an implementation-specific default as the preferred facing mode",
              "displayName": "Implementation"
            },
            "none": {
              "description": "No capture mechanism is used",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "user",
            "environment",
            "implementation"
          ],
          "value": "none"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables the filepicker if set to true",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "primaryText": {
          "type": "string|function",
          "description": "The primary text for the default file picker.",
          "displayName": "Primary Text",
          "help": "#primaryText"
        },
        "secondaryText": {
          "type": "string|function",
          "description": "The secondary text for the default file picker.",
          "displayName": "Secondary Text",
          "help": "#secondaryText"
        },
        "selectionMode": {
          "type": "string",
          "description": "Whether to allow single or multiple file selection.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "multiple file selection",
              "displayName": "Multiple"
            },
            "single": {
              "description": "single file selection",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "slots": {
        "trigger": {
          "description": "The trigger slot is used to replace the default content of the file picker.",
          "help": "#trigger"
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before files are selected to allow for custom validation",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "files": {
              "type": "FileList",
              "description": "The selected files"
            }
          }
        },
        "ojInvalidSelect": {
          "description": "Triggered when invalid files are selected",
          "help": "#event:invalidSelect",
          "detail": {
            "messages": {
              "type": "Array<object>",
              "description": "Messages that should be displayed to the user describing invalid files.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "summary": {
                      "type": "string"
                    },
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning"
                      ]
                    }
                  }
                }
              }
            },
            "until": {
              "type": "Promise|null",
              "description": "This property may be populated with a Promise to provide short-term feedback during a user interaction (typically drag and drop); the feedback should be cleared upon the resolution of this Promise."
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after the files are selected",
          "help": "#event:select",
          "detail": {
            "files": {
              "type": "FileList",
              "description": "The files that were just selected."
            }
          }
        }
      },
      "methods": {
        "focus": {
          "description": "Sets focus on the file picker or the first tabbable element for file picker with custom content.",
          "return": "void"
        },
        "blur": {
          "description": "Blurs the file picker",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "main": "oj-c/file-picker"
    },
    "oj-c-meter-bar": {
      "name": "meter-bar",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CMeterBarElement"
      ],
      "description": "A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter Bar",
      "main": "oj-c/meter-bar",
      "help": "oj-c.MeterBar.html",
      "extension": {
        "vbdt": {
          "module": "oj-c/meter-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-linear-status",
          "uxSpecs": [
            "meter-bar"
          ]
        }
      },
      "since": "14.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter bar.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter bar.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter bar.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color"
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "value": 1
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "on",
                "off"
              ]
            }
          }
        },
        "orientation": {
          "type": "string",
          "displayName": "Orientation",
          "help": "#orientation",
          "enumValues": [
            "vertical",
            "horizontal"
          ],
          "value": "horizontal"
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "type": "string"
                },
                "value": {
                  "type": "number"
                },
                "position": {
                  "type": "string",
                  "enumValues": [
                    "start",
                    "end"
                  ]
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "max": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter bar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter Bar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter Bar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter Bar",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-meter-circle": {
      "name": "meter-circle",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CMeterCircleElement"
      ],
      "description": "A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter circle",
      "main": "oj-c/meter-circle",
      "help": "oj-c.Metercircle.html",
      "extension": {
        "vbdt": {
          "module": "oj-c/meter-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "meter-circle"
          ]
        }
      },
      "since": "14.0.0",
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter circle.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter circle.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter circle.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color"
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "value": 1
        },
        "innerRadius": {
          "type": "number",
          "displayName": "Inner Radius",
          "help": "innerRadius"
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "on",
                "off"
              ]
            }
          }
        },
        "angleExtent": {
          "type": "number",
          "displayName": "Angle Extent",
          "help": "#angleExtent",
          "value": 360
        },
        "startAngle": {
          "type": "number",
          "displayName": "Start Angle",
          "help": "#startAngle",
          "value": 90
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "value": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "max": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "centerTemplate": {
          "data": {
            "innerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "outerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "value": {
              "type": "number|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-list-item-layout": {
      "name": "list-item-layout",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CListItemLayoutElement"
      ],
      "description": "A List Item Layout represents layout used for list view item elements.",
      "displayName": "List Item Layout",
      "main": "oj-c/list-item-layout",
      "help": "oj-c.ListItemLayout.html",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "list-item-layout"
          ],
          "icon": "oj-ux-ico-list-item-layout"
        },
        "vbdt": {
          "module": "oj-c/list-item-layout",
          "defaultColumns": "12",
          "minColumns": "2"
        }
      },
      "slots": {
        "": {
          "description": "The default slot accepts the primary data to be displayed.",
          "displayName": "Default",
          "help": "#default"
        },
        "overline": {
          "description": "The overline slot is for adding a overline text above the default slot.",
          "displayName": "Overline",
          "help": "#overline"
        },
        "selector": {
          "description": "The selector slot can accept a oj-selector component and is optional.",
          "displayName": "Selector",
          "help": "#selector"
        },
        "leading": {
          "description": "The leading slot is used for adding a leading visual next to the selector.",
          "displayName": "Leading",
          "help": "#leading"
        },
        "secondary": {
          "description": "The secondary slot is for adding a secondary text below the default text.",
          "displayName": "Secondary",
          "help": "#secondary"
        },
        "tertiary": {
          "description": "The tertiary slot is for adding a tertiary text below the secondary text.",
          "displayName": "Tertiary",
          "help": "#tertiary"
        },
        "metadata": {
          "description": "The metadata for adding extra trailing information. Examples of metadata are author, date etc.",
          "displayName": "Metadata",
          "help": "#metadata"
        },
        "trailing": {
          "description": "The trailing slot is used for adding a trailing visual.",
          "displayName": "Trailing",
          "help": "#trailing"
        },
        "action": {
          "description": "Action slot often uses a toolbar. In general, the action slot should display either one primary action or one or more secondary actions.",
          "displayName": "Action",
          "help": "#action"
        },
        "quaternary": {
          "description": "The quaternary slot is for adding a quaternary text below the tertiary text.",
          "displayName": "Quaternary",
          "help": "#quaternary"
        },
        "navigation": {
          "description": "The navigation slot is used for adding links below the trailing slot.",
          "displayName": "Navigation",
          "help": "#navigation"
        }
      },
      "properties": {
        "inset": {
          "type": "string",
          "description": "Controls padding around outside of list item layouts.",
          "displayName": "Inset",
          "help": "#inset",
          "enumValues": [
            "none",
            "listInset"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-split-menu-button": {
      "name": "split-menu-button",
      "version": "14.0.1",
      "jetVersion": "^14.0.1",
      "type": "composite",
      "pack": "oj-c",
      "implements": [
        "CSplitMenuButtonElement"
      ],
      "description": "A Split Menu Button combines a push button and menu button.",
      "displayName": "Split Menu Button",
      "help": "oj-c.SplitMenuButton.html",
      "main": "oj-c/split-menu-button",
      "extension": {
        "vbdt": {
          "module": "oj-c/split-menu-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menubutton"
          ]
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "disabled",
            "width",
            "chroming",
            "size",
            "items"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "translatable": true,
          "value": ""
        },
        "items": {
          "type": "Array<object>",
          "description": "Items describe the menu items rendered by the menu button.",
          "displayName": "items",
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "type": "string",
                  "enumValues": [
                    "item",
                    "divider"
                  ]
                },
                "label": {
                  "type": "string"
                },
                "disabled": {
                  "type": "boolean"
                },
                "onAction": {
                  "type": "function"
                }
              }
            }
          },
          "value": []
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "displayName": "size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "translatable": true,
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            }
          },
          "enumValues": [
            "outlined",
            "solid",
            "callToAction"
          ],
          "value": "outlined"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "doAction": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    }
  }
}
