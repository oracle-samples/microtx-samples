{"version":3,"file":"SplitMenuButton-28af8bc4.js","sources":["../../src/UNSAFE_SplitMenuButton/SplitMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLayout } from '../UNSAFE_Button';\nimport { NavDownIcon } from '../UNSAFE_ThemedIcons';\nimport { Menu } from '../UNSAFE_Menu';\n\nimport { BaseButton, StylingOptions } from '../UNSAFE_BaseButton';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useCallback, useState, useRef, useImperativeHandle } from 'preact/hooks';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'title'>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type Props = IntrinsicProps &\n  WidthInterpolationProps & {\n    /**\n     * children - One or more MenuItems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The label rendered on the action side of the button.  Used\n     * to identify which child MenuItem action is invoked.\n     */\n    label?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     \n     */\n    variant?: 'outlined' | 'solid' | 'callToAction';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n  };\n\nexport const compStyles = {\n  divider: cssProps`${{\n    borderTopWidth: '0px',\n    borderBottomWidth: '0px',\n    borderRightWidth: '0px',\n    borderLeftWidth: '1px',\n    borderStyle: 'solid',\n    height: '100%',\n    display: 'inline-flex',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color)'\n  }}`,\n\n  disabledDivider: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-disabled)'\n  }}`,\n\n  icon: cssProps`${{\n    display: 'contents'\n  }}`,\n\n  root: cssProps`${{\n    display: 'inline-block'\n  }}`,\n\n  childrenMargins: cssProps`${{\n    /* @ts-ignore */\n    '& > *': {\n      marginTop: '0 !important',\n      marginBottom: '0 !important',\n      marginLeft: '0 !important',\n      marginRight: '0 !important'\n    }\n  }}`\n};\n\nconst menuButtonStyling = ['embedded', 'min', 'noBorderRadiusStart'] as StylingOptions[];\nconst menuButtonActiveStyling = [...menuButtonStyling, 'active'] as StylingOptions[];\n\nconst actionbuttonStyling = ['embedded', 'fill', 'noBorderRadiusEnd'] as StylingOptions[];\nconst actionButtonActiveStyling = [...actionbuttonStyling, 'active'] as StylingOptions[];\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * A SplitMenuButton is a combined action and menu button.\n */\nexport const SplitMenuButton = forwardRef(\n  (\n    {\n      children,\n      label = '',\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      onAction,\n      ...props\n    }: Props,\n    ref?: ForwardedRef<HTMLSpanElement>\n  ) => {\n    const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const { class: cls, ...styles } = styleInterpolations(props);\n\n    // SPACE or ENTER on root area invokes action, as does CLICK/TAP on LEFT SIDE ACTION AREA\n    // DOWN ARROW invokes menu, as does CLICK/TAP on RIGHT SIDE MENU AREA\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          setIsActive(true);\n        } else if (event.key == 'ArrowDown') {\n          !isDisabled && setIsMenuOpen((menuOpen: boolean) => !menuOpen);\n          // Prevent page scroll for down arrow, user definitely wanted to show menu in this case.\n          // Don't prevent other keypress defaults, as user may want to hold SPACE down to scroll page.\n          event.preventDefault();\n        }\n      },\n      [isDisabled, setIsMenuOpen, setIsActive]\n    );\n\n    const onKeyUp = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          !isDisabled && onAction && onAction();\n          setIsActive(false);\n        }\n      },\n      [isDisabled, onAction, setIsActive]\n    );\n\n    const onBlur = useCallback(() => {\n      setIsActive(false);\n    }, [setIsActive]);\n\n    const _ref = useRef<HTMLSpanElement>(null);\n    useImperativeHandle(ref!, () => _ref.current!, [_ref]);\n\n    const menuHandler = () => {\n      setIsMenuOpen(!isMenuOpen);\n    };\n\n    const handleClose = (e: any) => {\n      if (e.reason === 'cancel' || 'focusLoss') {\n        _ref.current?.focus();\n      }\n      setIsMenuOpen(false);\n    };\n\n    const dividerStyles = classNames([\n      compStyles.divider,\n      isDisabled && compStyles.disabledDivider\n    ]);\n\n    const rootStyles = classNames([compStyles.root]);\n\n    // Using Span for top button allows us to avoid :hover state rendering by\n    // taking advantage of :enabled not on spans\n    const rootButton = () => {\n      return (\n        <BaseButton\n          elementDetails={{ type: 'span' }}\n          ref={\n            _ref as ForwardedRef<HTMLButtonElement> &\n              ForwardedRef<HTMLAnchorElement> &\n              ForwardedRef<HTMLSpanElement>\n          }\n          isDisabled={isDisabled}\n          styling={['container', 'min']}\n          variant={variant}\n          size={size}\n          accessibleLabel={label}\n          ariaRoledescription=\"split menu button, press down arrow to invoke menu\"\n          ariaExpanded={isMenuOpen}>\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getActionButtonStyling(isActive)}\n              size={size}\n              isDisabled={isDisabled}\n              ariaHidden={true}\n              onAction={onAction}>\n              {label}\n            </BaseButton>\n            <div class={`${dividerStyles}`} />\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getMenuButtonStyling(isMenuOpen)}\n              size={size}\n              isDisabled={isDisabled}\n              ariaHidden={true}\n              onAction={menuHandler}>\n              <ButtonLayout\n                display=\"icons\"\n                startIcon={<NavDownIcon />}\n                size={size}\n                styling=\"embedded\"></ButtonLayout>\n            </BaseButton>\n          </TabbableModeContext.Provider>\n        </BaseButton>\n      );\n    };\n\n    if (isDisabled) {\n      return (\n        <span role=\"toolbar\" class={`${rootStyles} ${cls}`} style={styles}>\n          {rootButton()}\n        </span>\n      );\n    } else {\n      return (\n        <span\n          role=\"toolbar\"\n          class={`${rootStyles} ${cls}`}\n          style={styles}\n          onKeyDown={!isDisabled && onKeyDown}\n          onKeyUp={onKeyUp}\n          onBlur={onBlur}>\n          {rootButton()}\n          <Menu anchorRef={_ref} isOpen={isMenuOpen} onClose={handleClose}>\n            <span className={compStyles.childrenMargins}>{children}</span>\n          </Menu>\n        </span>\n      );\n    }\n  }\n);\n\nfunction getMenuButtonStyling(isActive: boolean) {\n  return isActive ? menuButtonActiveStyling : menuButtonStyling;\n}\n\nfunction getActionButtonStyling(isActive: boolean) {\n  return isActive ? actionButtonActiveStyling : actionbuttonStyling;\n}\n"],"names":["compStyles","menuButtonStyling","menuButtonActiveStyling","concat","actionbuttonStyling","actionButtonActiveStyling","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","SplitMenuButton","forwardRef","_a","ref","_b","props","class","cls","styles","__rest","onKeyDown","useCallback","event","key","isDisabled","setIsMenuOpen","menuOpen","onKeyUp","onAction","onBlur","setIsActive","_ref","useRef","useImperativeHandle","current","isMenuOpen","handleClose","e","reason","focus","_jsx","BaseButton","assign","elementDetails","type","styling","variant","size","accessibleLabel","label","ariaRoledescription","ariaExpanded","children","_jsxs","TabbableModeContext","Provider","value","isTabbable","jsx","getActionButtonStyling","isActive","ariaHidden","dividerStyles","getMenuButtonStyling","menuHandler","ButtonLayout","display","startIcon","NavDownIcon","SvgIcoNavDown","role","rootStyles","style","rootButton","Menu","anchorRef","isOpen","onClose","className"],"mappings":"y8CAwEA,MAAAA,EAAA,UAAAA,EAAA,WAAAA,EAAA,UAAAA,aAmCAC,EAAA,CAAA,WAAA,MAAA,uBACAC,EAAA,GAAAC,OAAAF,EAAA,CAAA,WAEAG,EAAA,CAAA,WAAA,OAAA,qBACAC,EAAA,GAAAF,OAAAC,EAAA,CAAA,WAEAE,EAAAC,mBAAAA,OAAAC,OAAAC,EAAAA,0BAEAC,EAAAC,EAAAA,oBAAAL,GAKAM,EAAAC,EAAAA,WAAA,CAAAC,EAAAC,yNAeIC,EAAAN,EAAAO,IAAAC,MAAAC,GAAAH,EAAAI,EAAAC,EAAAA,OAAAL,EAAA,CAAA,UAIAM,EAAAC,EAAAA,YAAAC,uCAIW,aAAAA,EAAAC,OACLC,GAAAC,EAAAC,IAAAA,iCASNC,EAAAN,EAAAA,YAAAC,oCAGME,GAAAI,GAAAA,qBAONC,EAAAR,EAAAA,YAAA,YAEA,CAAAS,IAEAC,EAAAC,SAAA,MACAC,EAAAA,oBAAApB,EAAA,IAAAkB,EAAAG,QAAA,CAAAH,iBAGEN,GAAAU,IAGFC,EAAAC,UACEA,EAAAC,OACE,QAAA1B,EAAAmB,EAAAG,eAAA,IAAAtB,GAAAA,EAAA2B,+BAMFzC,mCASA0C,MAAAC,EAAAA,WAAApC,OAAAqC,OAAA,CAAAC,eAAA,CAAAC,KAAA,QAAA/B,IAAAkB,EAAAP,WAAAA,EAAAqB,QAAA,CAAA,YAAA,OAAAC,QAAAA,EAAAC,KAAAA,EAAAC,gBAAAC,EAAAC,oBAAA,qDAAAC,aAAAhB,GAAA,CAAAiB,SAAAC,EAAAA,KAAAC,EAAAA,oBAAAC,SAAAlD,OAAAqC,OAAA,CAAAc,MAAA,CAAAC,YAAA,IAAA,CAAAL,SAAA,CAAAZ,EAAAkB,IAAAjB,aAAApC,OAAAqC,OAAA,CAAAC,eAAA,CAAAC,KAAA,QAAAE,QAAAA,EAAAD,QAAAc,EAAAC,GAAAb,KAAAA,EAAAvB,WAAAA,EAAAqC,YAAA,EAAAjC,SAAAA,GAAA,CAAAwB,SAAAH,KAAAT,EAAAkB,IAAA,MAAA,CAAA1C,SAAA8C,MAAAtB,EAAAkB,IAAAjB,aAAApC,OAAAqC,OAAA,CAAAC,eAAA,CAAAC,KAAA,QAAAE,QAAAA,EAAAD,QAAAkB,EAAA5B,GAAAY,KAAAA,EAAAvB,WAAAA,EAAAqC,YAAA,EAAAjC,SAAAoC,GAAA,CAAAZ,SAAAZ,EAAAkB,IAAAO,eAAA,CAAAC,QAAA,QAAAC,UAAA3B,EAAAA,IAAA4B,EAAAC,cAAA,IAAAtB,KAAAA,EAAAF,QAAA,uBA8CF,OAAArB,yFAOE6B,OAAA,OAAAhD,OAAAqC,OAAA,CAAA4B,KAAA,UAAAtD,MAAA,GAAAuD,KAAAtD,IAAAuD,MAAAtD,EAAAE,WAAAI,GAAAJ,EAAAO,QAAAA,EAAAE,OAAAA,GAAA,CAAAuB,SAAA,CAAAqB,IAAAjC,EAAAkB,IAAAgB,EAAAA,KAAArE,OAAAqC,OAAA,CAAAiC,UAAA5C,EAAA6C,OAAAzC,EAAA0C,QAAAzC,GAAA,CAAAgB,SAAAZ,EAAAkB,IAAA,OAAArD,OAAAqC,OAAA,CAAAoC,UAAAhF,GAAA,CAAAsD,SAAAA,cAkBN,SAAAW,EAAAH,gBAIA,SAAAD,EAAAC"}