{"version":3,"file":"UNSAFE_Collapsible.js","sources":["../../src/UNSAFE_Collapsible/CollapsibleHeaderIcon.tsx","../../src/UNSAFE_Collapsible/CollapsibleHeader.tsx","../../src/UNSAFE_Collapsible/CollapsibleContent.tsx","../../src/UNSAFE_Collapsible/Collapsible.tsx"],"sourcesContent":["import { ExpandIcon, CollapseIcon, CollapseUpIcon } from '../UNSAFE_ThemedIcons';\n\ntype IconProps = {\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n};\n\n/**\n * Header icon subcomponent\n */\nexport const CollapsibleHeaderIcon = ({ isExpanded, iconPosition }: IconProps) => {\n  const startIcon = iconPosition === 'start' && isExpanded ? ExpandIcon : CollapseIcon;\n  const endIcon = iconPosition === 'end' && isExpanded ? CollapseUpIcon : ExpandIcon;\n  const Icon = iconPosition === 'start' ? startIcon : endIcon;\n\n  return <Icon size=\"6x\" />;\n};\n","import { Fragment } from 'preact';\nimport { useCallback } from 'preact/hooks';\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Divider } from '../UNSAFE_Divider';\nimport { CollapsibleHeaderIcon } from './CollapsibleHeaderIcon';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { usePress } from '../hooks/UNSAFE_usePress';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'id' | 'children'>;\n\ntype HeaderProps = IntrinsicProps & {\n  id: string;\n  contentId: string;\n  isDisabled: boolean;\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n  variant?: 'basic' | 'horizontal-rule';\n  toggleHandler: (target: EventTarget | null) => void;\n};\n\nconst styles = {\n  base: cssProps`${{\n    cursor: 'pointer',\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    }\n  }}`,\n  expanded: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)'\n  }}`,\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)',\n    cursor: 'auto'\n  }}`,\n  divider: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`\n};\n\nconst childrenStylesBase = {\n  base: cssProps`${{\n    flexGrow: 1,\n    /* @ts-ignore */\n    '& > *': {\n      marginTop: '0 !important',\n      marginBottom: '0 !important',\n      marginLeft: '0 !important',\n      marginRight: '0 !important'\n    }\n  }}`,\n  iconStart: cssProps`${{\n    paddingInlineStart: '16px'\n  }}`,\n  iconEnd: cssProps`${{\n    paddingInlineEnd: '16px'\n  }}`\n};\n\n/**\n * Header subcomponent\n */\n\nexport const CollapsibleHeader = ({\n  children,\n  id,\n  contentId,\n  isDisabled,\n  isExpanded,\n  iconPosition,\n  variant = 'basic',\n  toggleHandler\n}: HeaderProps) => {\n  const classes = classNames([\n    styles.base,\n    variant === 'horizontal-rule' && styles.divider,\n    isExpanded && variant !== 'horizontal-rule' && styles.expanded,\n    isDisabled && styles.disabled\n  ]);\n\n  const childrenClasses = classNames([\n    childrenStylesBase.base,\n    iconPosition === 'end' && childrenStylesBase.iconEnd,\n    iconPosition === 'start' && childrenStylesBase.iconStart\n  ]);\n\n  const pressHandler = useCallback(\n    (event: Event) => {\n      toggleHandler(event.target);\n    },\n    [toggleHandler]\n  );\n\n  const { pressProps } = usePress(pressHandler, {\n    isDisabled,\n    isRepeat: false\n  });\n\n  const getHeader = () => (\n    <Fragment>\n      {iconPosition === 'end' && <div className={childrenClasses}>{children}</div>}\n      <CollapsibleHeaderIcon iconPosition={iconPosition} isExpanded={isExpanded} />\n      {iconPosition === 'start' && <div className={childrenClasses}>{children}</div>}\n    </Fragment>\n  );\n\n  return (\n    <>\n      <div\n        role={'button'}\n        aria-controls={contentId}\n        aria-expanded={isExpanded}\n        id={id}\n        tabIndex={0}\n        className={classes}\n        {...pressProps}>\n        <Flex align=\"center\" justify={iconPosition === 'start' ? 'start' : 'between'}>\n          {getHeader()}\n        </Flex>\n      </div>\n      {variant === 'horizontal-rule' && <Divider />}\n    </>\n  );\n};\n","import { JSX } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isExpanded: boolean;\n  onTransitionEnd: () => void;\n};\n\n/**\n * The 'collapsing' and 'expanding' states are related to the animation. The 'unmounted' state\n * is used for conditional rendering. In this state, the Collapsible content is completely removed\n * from the DOM. The 'unmounted' state is set either as an initial state or when collapsing\n * animation ends.\n */\ntype Status = 'collapsing' | 'expanding' | 'unmounted';\n\nconst styles = cssProps`${{\n  /* @ts-ignore */\n  '& > *': {\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    marginLeft: '0 !important',\n    marginRight: '0 !important'\n  }\n}}`;\n\nexport const CollapsibleContent = ({ children, id, isExpanded, onTransitionEnd }: ContentProps) => {\n  const [state, setState] = useState<Status>(isExpanded ? 'expanding' : 'unmounted');\n\n  /**\n   * 1. On initial render, Preact sets style.maxHeight field to 0 or 'none'.\n   * 2. During expanding animation, useAnimation hook uses WAAPI to animate the maxHeight out\n   *    to the expanded value.\n   * 3. On subsequent re-renders, Preact does never updates the style.maxHeight value\n   *    because even though we are telling Preact that maxHeight should be 0 or 'none', Preact\n   *    considers the maxHeight value is 0 or 'none' as it is not aware that we changed this value\n   *    in step 2. So from Preact's perspective there is no difference.\n   */\n  const contentInitialStyle = useRef<JSX.CSSProperties>({\n    overflowY: 'hidden',\n    maxHeight: isExpanded ? 'none' : '0'\n  });\n\n  useEffect(() => {\n    // Ignore state update on initial render\n    if (state === 'unmounted' && !isExpanded) {\n      return;\n    }\n    setState(isExpanded ? 'expanding' : 'collapsing');\n  }, [isExpanded, state]);\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(state, {\n    animationStates,\n    onAnimationEnd: ({ animationState }) => {\n      if (animationState === 'collapsing') {\n        setState('unmounted');\n      }\n      onTransitionEnd?.();\n    }\n  });\n\n  return (\n    <div\n      className={styles}\n      ref={nodeRef}\n      id={id}\n      tabIndex={-1}\n      style={contentInitialStyle.current}\n      aria-hidden={!isExpanded || undefined}>\n      {state !== 'unmounted' && children}\n    </div>\n  );\n};\n\n/**\n * The transition from collapsed to expanded works as follows:\n * 1. When the component is initially rendered in the collapsed state, we\n *    explicitly set maxHeight and overflowY from \"to\" configuration.\n * 2. When the expanded prop changes from false to true, we first mount the content children.\n * 3. Once this is mounted we trigger an animation updating animationState value of useAnimationHook.\n * 4. Configuration is represented inside hook. Passed config depends if previous animation was completed or not.\n *    We could check that based on node.style.maxHeight.\n *\n * The transition from expanded to collapsed is similar:\n * 1. We trigger an animation updating animationState value of useAnimationHook.\n * 2. Once animation is completed, with the help of end config,we set max-Height as 'none'.\n *    This will allow us to keep adding content.\n * 3. Once this is done, onAnimationEnd is called(as 'from collapsed to expanded\"). Here, content children are unmouunted.\n */\nconst animationStates: UseAnimationConfig<Status, HTMLDivElement>['animationStates'] = {\n  expanding: (node) => ({\n    to: {\n      maxHeight: `${node.scrollHeight}px`\n    },\n    options: {\n      duration: 400\n    },\n    end: {\n      maxHeight: 'none'\n    }\n  }),\n  collapsing: (node) => ({\n    ...(node.style.maxHeight === 'none' && {\n      from: {\n        maxHeight: `${node.scrollHeight}px`\n      }\n    }),\n    to: {\n      maxHeight: '0'\n    },\n    options: {\n      duration: 400\n    }\n  })\n};\n","import { ComponentChildren } from 'preact';\nimport { useRef, useCallback } from 'preact/hooks';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { CollapsibleHeader } from './CollapsibleHeader';\nimport { CollapsibleContent } from './CollapsibleContent';\n\ntype Props = {\n  /**\n   * Id of the component\n   */\n  id?: string;\n\n  /**\n   * Collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.\n   */\n  header?: ComponentChildren;\n\n  /**\n   * The content node to be collapsed\n   */\n  children?: ComponentChildren;\n\n  /**\n   * Disables the collapsible if set to true\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if the content is expanded\n   */\n  isExpanded?: boolean;\n\n  /**\n   * Changes chevron icon placement at the end of the collapsible header\n   */\n  iconPosition?: 'start' | 'end';\n\n  /**\n   * Controls the header display which con include a divider below the collapsible header\n   */\n  variant?: 'basic' | 'horizontal-rule';\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggle?: (details: ToggleDetail) => void;\n\n  /**\n   * Property that triggers a callback after toggle animation is done\n   */\n  onTransitionEnd?: (details: TransitionEnd) => void;\n};\n\ntype ToggleDetail = TransitionEnd & {\n  target: EventTarget | null;\n};\n\ntype TransitionEnd = {\n  value: boolean;\n};\n\n/**\n * A collapsible displays a header that can be expanded to show its content.\n */\n\nexport const Collapsible = ({\n  id,\n  header,\n  children,\n  isDisabled = false,\n  isExpanded = false,\n  iconPosition = 'start',\n  variant = 'basic',\n  onToggle,\n  onTransitionEnd\n}: Props) => {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const uniqueID = useId();\n  const headerId = `oj-collapsible-header-${uniqueID}`;\n  const contentId = `oj-collapsible-content-${uniqueID}`;\n\n  /**\n   * Function handling toggle and invoking callback for collapsing/expanding\n   */\n  const toggleHandler = useCallback(\n    (target: EventTarget | null) => {\n      if (isDisabled) {\n        return;\n      }\n      onToggle?.({\n        value: !isExpanded,\n        target\n      });\n    },\n    [isDisabled, onToggle, isExpanded]\n  );\n\n  /**\n   * Function that is triggerd when animation ends\n   */\n  const transitionEndHandler = useCallback(() => {\n    onTransitionEnd?.({\n      value: isExpanded\n    });\n  }, [onTransitionEnd, isExpanded]);\n\n  return (\n    <div id={id} ref={rootRef}>\n      <CollapsibleHeader\n        id={headerId}\n        contentId={contentId}\n        toggleHandler={toggleHandler}\n        isDisabled={isDisabled}\n        isExpanded={isExpanded}\n        iconPosition={iconPosition}\n        variant={variant}>\n        {header}\n      </CollapsibleHeader>\n      <CollapsibleContent\n        id={contentId}\n        isExpanded={isExpanded}\n        onTransitionEnd={transitionEndHandler}>\n        {children}\n      </CollapsibleContent>\n    </div>\n  );\n};\n"],"names":["CollapsibleHeaderIcon","isExpanded","iconPosition","startIcon","ExpandIcon","CollapseIcon","endIcon","CollapseUpIcon","Icon","_jsx","size","styles","childrenStylesBase","CollapsibleHeader","children","id","contentId","isDisabled","variant","toggleHandler","pressHandler","useCallback","event","target","pressProps","usePress","isRepeat","_jsxs","_Fragment","jsx","Object","assign","role","tabIndex","className","classes","Flex","align","justify","Divider","CollapsibleContent","onTransitionEnd","state","setState","useState","overflowY","nodeRef","useAnimation","onAnimationEnd","animationState","ref","style","contentInitialStyle","current","undefined","animationStates","expanding","node","to","maxHeight","scrollHeight","options","duration","end","collapsing","from","header","onToggle","rootRef","useRef","uniqueID","useId","headerId","value","transitionEndHandler"],"mappings":"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"}