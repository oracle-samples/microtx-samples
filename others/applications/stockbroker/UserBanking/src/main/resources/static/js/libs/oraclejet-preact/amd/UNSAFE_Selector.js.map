{"version":3,"file":"UNSAFE_Selector.js","sources":["../../src/UNSAFE_Selector/Selector.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Keys, containsKey } from '../utils/UNSAFE_keys';\nimport { useSelection } from '../hooks/PRIVATE_useSelection';\nimport { SelectionDetail } from '../UNSAFE_Collection';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { CheckboxOffIcon, CheckboxOnIcon } from '../UNSAFE_ThemedIcons';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\n\nconst styles = {\n  base: cssProps`${{\n    position: 'relative',\n    '&:active': {\n      transform: 'var(--oj-c-PRIVATE-DO-NOT-USE-radio-checkbox-input-transform-active)',\n      transitionProperty: 'transform',\n      transitionDuration: 'var(--oj-c-PRIVATE-DO-NOT-USE-animation-duration-xshort)',\n      transitionTimingFunction: 'var(--oj-c-PRIVATE-DO-NOT-USE-animation-ease-in-out)'\n    }\n  }}`,\n  container: cssProps`${{\n    display: 'inline-block'\n  }}`\n};\n\nconst checkboxStyles = {\n  base: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-radio-checkbox-input-size)',\n    lineHeight: 0\n  }}`,\n  unselected: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-radio-checkbox-unselected)'\n  }}`,\n  selected: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-radio-checkbox-selected)'\n  }}`\n};\n\n/**\n * Props for the Selector Component\n */\nexport type Props<K> = {\n  /**\n   * The key associated with the Selector.\n   */\n  rowKey: K;\n  /**\n   * The selected keys.\n   */\n  selectedKeys: Keys<K>;\n  /**\n   * aria-label for this selector\n   */\n  accessibleLabel?: string;\n  /**\n   * Callback function to invoke when the selected keys has changed when\n   * the checkbox is toggled.\n   */\n  onChange?: (detail: SelectionDetail<K>) => void;\n};\n\n// internal component to use in place of the real Checkbox\nfunction Checkbox(props: {\n  checked: boolean;\n  accessibleLabel?: string;\n  onClick?: (event: MouseEvent) => void;\n}) {\n  const { isTabbable } = useTabbableMode();\n\n  const classes = classNames([\n    checkboxStyles.base,\n    props.checked ? checkboxStyles.selected : checkboxStyles.unselected\n  ]);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const ariaLabel = props.checked\n    ? translations.selector_selected()\n    : translations.selector_unselected();\n  return (\n    <div\n      class={classes}\n      tabIndex={isTabbable ? 0 : -1}\n      type=\"checkbox\"\n      checked={props.checked}\n      aria-label={props.accessibleLabel || ariaLabel}\n      onClick={props.onClick}>\n      {props.checked ? <CheckboxOnIcon /> : <CheckboxOffIcon />}\n    </div>\n  );\n}\n\n// click event handler used by Selector\nconst handleClick = (event: Event) => {\n  // we don't want container component like ListView to process it\n  event.stopPropagation();\n};\n\n// update selectionProps onClick event to call event.stopPropagation()\nconst updateSelectionProps = (selectionProps: any) => {\n  // click event handler return from useSelection\n  const onClick = selectionProps.onClick;\n  if (onClick) {\n    // click event handler used by Selector\n    selectionProps.onClick = (event: MouseEvent) => {\n      onClick(event);\n      handleClick(event);\n    };\n    return selectionProps;\n  }\n  return { onClick: handleClick };\n};\n\n/**\n * The Selector component is used to enable multi-selection in Collection components.\n */\nexport function Selector<K>({ accessibleLabel, rowKey, selectedKeys, onChange }: Props<K>) {\n  const { selectionProps } = useSelection(\n    () => rowKey,\n    selectedKeys,\n    'multiple',\n    false,\n    'toggle',\n    onChange\n  );\n\n  // TODO: replace internal with Preact checkbox component once it is available\n  return (\n    <div class={styles.container} {...updateSelectionProps(selectionProps)}>\n      <div class={styles.base}>\n        <Flex align=\"center\" justify=\"center\" width=\"11x\" height=\"11x\">\n          <Checkbox checked={containsKey(selectedKeys, rowKey)} accessibleLabel={accessibleLabel} />\n        </Flex>\n      </div>\n    </div>\n  );\n}\n"],"names":["styles","checkboxStyles","Checkbox","props","isTabbable","useTabbableMode","checked","translations","useTranslationBundle","ariaLabel","selector_selected","selector_unselected","handleClick","event","accessibleLabel","rowKey","selectedKeys","onChange","selectionProps","onClick"],"mappings":"43CAkBA,MAAAA,EAAA,SAAAA,WAeAC,GAAA,WAAAA,GAAA,WAAAA,cAqCA,SAAAC,GAAAC,GAKE,MAAAC,WAAAA,GAAAC,EAAAA,kCAGEJ,GACAE,EAAAG,QAAAL,GAAAA,KAEFM,EAAAC,uBAAA,4BACAC,EAAAN,EAAAG,QACEC,EAAAG,oBACAH,EAAAI,mPAeJ,MAAAC,GAAAC,oCAuBA,UAAAC,gBAAAA,EAAAC,OAAAA,EAAAC,aAAAA,EAAAC,SAAAA,wHAjBAC,CAAAA,IAEE,MAAAC,EAAAD,EAAAC,QACA,OAAAA,GAEED,EAAAC,QAAAN,gBAIAK,GAEF,CAAAC,QAAAP"}