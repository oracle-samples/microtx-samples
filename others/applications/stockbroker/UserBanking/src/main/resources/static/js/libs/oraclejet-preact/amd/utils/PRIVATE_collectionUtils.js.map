{"version":3,"file":"PRIVATE_collectionUtils.js","sources":["../../../src/utils/PRIVATE_collectionUtils/collectionUtils.ts"],"sourcesContent":["import { isKeyDefined } from '../UNSAFE_keys';\n\n/**\n * Returns the key from the item element\n */\nconst getKey = (item: HTMLElement) => {\n  return item.dataset['ojKeyType'] === 'number'\n    ? Number(item.dataset['ojKey'])\n    : item.dataset['ojKey'];\n};\n\n/**\n * A helper function that return the key of the first available item.\n */\nexport const getFirstVisibleKey = (root: HTMLElement, itemSelector: string) => {\n  if (root) {\n    const firstItem = root.querySelector(itemSelector);\n    if (firstItem) {\n      const key = getKey(firstItem as HTMLElement);\n      return key;\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function to find the element with the specified key.\n * Returns null if the element with key is not found.\n */\nexport const findElementByKey = <K extends string | number>(\n  root: HTMLElement,\n  key: K,\n  itemSelector: string\n) => {\n  if (root) {\n    const items = root.querySelectorAll(itemSelector);\n    for (let i = 0; i < items.length; i++) {\n      const thisKey = getKey(items[i] as HTMLElement);\n      if (key == (thisKey as K)) {\n        return items[i];\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function that returns the key of the previous or the next item\n * given the specified current key\n */\nexport const getPrevNextKey = <K extends string | number>(\n  root: HTMLElement | null,\n  currentKey: K | undefined,\n  isPrev: boolean,\n  itemSelector: string\n) => {\n  return (): K | null => {\n    if (isKeyDefined(currentKey) && root) {\n      const currItem = findElementByKey(root, currentKey as K, itemSelector);\n      if (currItem) {\n        const nextItem = isPrev ? currItem.previousElementSibling : currItem.nextElementSibling;\n        if (nextItem) {\n          const key = getKey(nextItem as HTMLElement) as K;\n          if (key != null) {\n            return key;\n          }\n        }\n      }\n      return getFirstVisibleKey(root, itemSelector) as K;\n    }\n    return null;\n  };\n};\n\n/**\n * A helper function to get the key from an element\n */\nexport const keyExtractor = <K extends string | number>(\n  element: HTMLElement,\n  itemSelector: string\n): K | null => {\n  const item = element.closest(itemSelector);\n  if (item) {\n    const key = getKey(item as HTMLElement) as K;\n    return key === undefined ? null : key;\n  }\n  return null;\n};\n"],"names":["getKey","item","dataset","Number","getFirstVisibleKey","root","itemSelector","firstItem","querySelector","findElementByKey","key","items","querySelectorAll","i","length","currentKey","isPrev","isKeyDefined","currItem","nextItem","previousElementSibling","nextElementSibling","element","closest","undefined"],"mappings":"8DAKA,MAAMA,EAAUC,GACuB,WAA9BA,EAAKC,QAAL,UACHC,OAAOF,EAAKC,QAAL,OACPD,EAAKC,QAAL,MAMOE,EAAqB,CAACC,EAAmBC,KACpD,GAAID,EAAM,CACR,MAAME,EAAYF,EAAKG,cAAcF,GACrC,GAAIC,EAAW,CAEb,OADYP,EAAOO,IAIvB,OAAO,MAOIE,EAAmB,CAC9BJ,EACAK,EACAJ,KAEA,GAAID,EAAM,CACR,MAAMM,EAAQN,EAAKO,iBAAiBN,GACpC,IAAK,IAAIO,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CAErC,GAAIH,GADYV,EAAOW,EAAME,IAE3B,OAAOF,EAAME,IAInB,OAAO,mEAOqB,CAC5BR,EACAU,EACAC,EACAV,IAEO,KACL,GAAIW,EAAYA,aAACF,IAAeV,EAAM,CACpC,MAAMa,EAAWT,EAAiBJ,EAAMU,EAAiBT,GACzD,GAAIY,EAAU,CACZ,MAAMC,EAAWH,EAASE,EAASE,uBAAyBF,EAASG,mBACrE,GAAIF,EAAU,CACZ,MAAMT,EAAMV,EAAOmB,GACnB,GAAW,MAAPT,EACF,OAAOA,GAIb,OAAON,EAAmBC,EAAMC,GAElC,OAAO,qBAOiB,CAC1BgB,EACAhB,KAEA,MAAML,EAAOqB,EAAQC,QAAQjB,GAC7B,GAAIL,EAAM,CACR,MAAMS,EAAMV,EAAOC,GACnB,YAAeuB,IAARd,EAAoB,KAAOA,EAEpC,OAAO"}