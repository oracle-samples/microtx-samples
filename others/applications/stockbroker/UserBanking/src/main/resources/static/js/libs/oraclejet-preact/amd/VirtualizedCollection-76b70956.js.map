{"version":3,"file":"VirtualizedCollection-76b70956.js","sources":["../../src/PRIVATE_VirtualizedCollection/Placeholder.tsx","../../src/PRIVATE_VirtualizedCollection/VirtualizedCollection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX } from 'preact';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\n\nexport const placeholderTypes = stringLiteralArray(['topPlaceholder', 'bottomPlaceholder']);\n/**\n * Type of placeholder (top which is before the data content and bottom which is after the data content)\n */\nexport type PlaceholderType = typeof placeholderTypes[number];\n\n/**\n * Context object which is pass to the placeholderHeight function callback\n */\nexport type PlaceholderContext = {\n  fromIndex: number;\n  toIndex: number;\n  estimateItemSize: number;\n  which: PlaceholderType;\n};\n\nexport const PLACEHOLDER_STYLE_CLASS = 'oj-collection-placeholder';\n\nconst DEFAULT_PLACEHOLDER_SIZE = 48; // min-height defined in Redwood spec for item\nconst TOP_PLACEHOLDER_KEY = '_topPlaceholder';\nconst BOTTOM_PLACEHOLDER_KEY = '_bottomPlaceholder';\n\ntype Props = {\n  context: PlaceholderContext;\n  placeholderHeight?: (context: PlaceholderContext) => number;\n};\n\n/**\n * A component that renders placeholder which is used internally by VirtualizeViewportCollection\n */\nexport const Placeholder = ({ context, placeholderHeight }: Props) => {\n  const { fromIndex, toIndex, which, estimateItemSize } = context;\n  let totalHeight = 0;\n  if (placeholderHeight) {\n    totalHeight = placeholderHeight(context);\n  } else {\n    const placeholderUnitHeight =\n      estimateItemSize === 0 ? DEFAULT_PLACEHOLDER_SIZE : estimateItemSize;\n    totalHeight = Math.max(0, toIndex - fromIndex) * placeholderUnitHeight;\n  }\n\n  const key = which === 'topPlaceholder' ? TOP_PLACEHOLDER_KEY : BOTTOM_PLACEHOLDER_KEY;\n  const style: JSX.CSSProperties = { height: totalHeight + 'px' };\n  if (totalHeight === 0) {\n    style.display = 'none';\n  }\n  return <div key={key} className={PLACEHOLDER_STYLE_CLASS} style={style}></div>;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject, ComponentChildren } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { DataState, ItemContext, Range, Metadata, ViewportInfo } from '../UNSAFE_Collection';\nimport { Collection } from '../PRIVATE_Collection';\nimport {\n  Placeholder,\n  PlaceholderContext,\n  PlaceholderType,\n  PLACEHOLDER_STYLE_CLASS\n} from './Placeholder';\nimport { useViewportIntersect, ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\n\n/**\n * Props for the VirtualizedCollection component\n */\ntype Props<K, D> = {\n  /**\n   * A DataState object that provide information including data and metadata to the VirtualizedCollection.\n   */\n  data: DataState<K, D> | null;\n\n  /**\n   * Renderer callback used to render each item\n   */\n  children: (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => ComponentChildren;\n\n  /**\n   * Callback to calculate placeholder height\n   */\n  placeholderHeight?: (context: PlaceholderContext) => number;\n\n  /**\n   * Viewport configuration including specifying the element which is used to determine what range\n   * of data to render\n   */\n  viewportConfig: ViewportConfig;\n\n  /**\n   * The selector string to identify the children items\n   */\n  itemSelector: string;\n\n  /**\n   * Callback function to handle when viewport has changed, including the case\n   * where user scrolls to the end of the component and there are more items to load.\n   * The function should sets a new DataState on the component for the specified range.\n   */\n  onLoadRange: (range: Range) => void;\n\n  /**\n   * The number of additional items to render before and after the current viewport.  This is\n   * mainly used for performance tuning.  Increase the overscan will result in less frequent\n   * rendering when scroll but at the same time each render will take longer depending on the\n   * item content.\n   */\n  overscan?: number;\n\n  /**\n   * Optionally provide a custom callback to return the range to render based on viewport info\n   */\n  rangeExtractor?: (info: ViewportInfo) => Range;\n\n  /**\n   * Optionally specify the custom load more indicator\n   */\n  loadMoreIndicator?: ComponentChildren;\n\n  /**\n   * Optionally provide the suggestion indicator sparkle\n   */\n  suggestions?: ComponentChildren;\n};\n\n/**\n * A function that returns the default range extractor\n * @param fetchSize\n */\nexport function getVirtualizedRangeExtractor(fetchSize: number) {\n  return function ({ itemSize, viewportHeight, scrollOffset, overscan = 0 }: ViewportInfo): Range {\n    // if any of these is missing then return default initial range\n    if (\n      itemSize === undefined ||\n      itemSize === 0 ||\n      viewportHeight === undefined ||\n      scrollOffset === undefined\n    ) {\n      return { offset: 0, count: fetchSize };\n    }\n    const offset = Math.ceil(scrollOffset / itemSize);\n    const count = Math.ceil(viewportHeight / itemSize);\n    return {\n      offset: Math.max(0, offset - overscan),\n      count: count + overscan * (offset > 0 ? 2 : 1)\n    };\n  };\n}\n\n/**\n * Helper function to find the top and bottom of an element relative to the viewport\n * @param elem\n */\nconst getElementTopBottom = (elem: HTMLElement): { top: number; bottom: number } => {\n  let top;\n  let bottom;\n  if (elem === document.documentElement) {\n    top = 0;\n    bottom = document.documentElement.clientHeight;\n  } else {\n    const scrollerBounds = elem.getBoundingClientRect();\n    top = scrollerBounds.top;\n    bottom = scrollerBounds.bottom;\n  }\n  return { top, bottom };\n};\n\nconst isDataStateValid = <K, D>(dataState: DataState<K, D>) => {\n  return dataState && dataState.data && dataState.offset >= 0 && dataState.totalSize >= 0;\n};\n\nconst DEFAULT_MARGIN = 1;\n\n/**\n * Returns the range for the current viewport\n */\nconst getViewportRange = (\n  scroller: HTMLElement | null,\n  root: HTMLElement,\n  overscan: number,\n  rangeExtractor: (info: ViewportInfo) => Range,\n  estimateItemSize: number\n) => {\n  let scrollOffset;\n  let viewportHeight;\n\n  if (scroller && root) {\n    const rootRect = root.getBoundingClientRect();\n    const viewportRect = getElementTopBottom(scroller);\n    if (rootRect && viewportRect) {\n      scrollOffset = viewportRect.top - rootRect.top - DEFAULT_MARGIN;\n      viewportHeight = viewportRect.bottom - viewportRect.top + DEFAULT_MARGIN;\n    }\n  }\n\n  if (scrollOffset !== undefined && viewportHeight !== undefined) {\n    // figure out what the new range should be\n    const range = rangeExtractor({\n      scrollOffset,\n      viewportHeight,\n      overscan: overscan,\n      itemSize: estimateItemSize\n    });\n\n    return range;\n  }\n  return null;\n};\n\nconst DEFAULT_OVERSCAN = 1;\nconst DEFAULT_END_INDEX = 25; // match default fetch size\nconst LOADMORE_STYLE_CLASS = 'oj-collection-loadmore';\nconst LOAD_MORE_AND_PLACEHOLDER_SELECTOR = `.${LOADMORE_STYLE_CLASS}, .${PLACEHOLDER_STYLE_CLASS}`;\nconst DEFAULT_RANGE_EXTRACTOR = getVirtualizedRangeExtractor(DEFAULT_END_INDEX);\n\n/**\n * Component that only render items in the specified viewport.\n * @param props\n */\nexport function VirtualizedCollection<K, D>({\n  data,\n  children,\n  viewportConfig,\n  itemSelector,\n  placeholderHeight,\n  rangeExtractor = DEFAULT_RANGE_EXTRACTOR,\n  overscan = DEFAULT_OVERSCAN,\n  onLoadRange,\n  loadMoreIndicator,\n  suggestions\n}: Props<K, D>) {\n  const rootRef: RefObject<any> = useRef<HTMLElement>(null);\n  const estimateItemSizeRef: RefObject<number> = useRef(0);\n\n  // detect if viewport has changed and it needs to re-render based on a new range\n  useViewportIntersect(viewportConfig, DEFAULT_MARGIN, LOAD_MORE_AND_PLACEHOLDER_SELECTOR, () => {\n    const range = getViewportRange(\n      viewportConfig.scroller(),\n      rootRef.current,\n      overscan,\n      rangeExtractor,\n      estimateItemSizeRef.current ?? 0\n    );\n    if (range) {\n      onLoadRange(range);\n    }\n  });\n\n  // calculate average item height.  For now, we'll just do this once, but we can\n  // do a rolling average where we'll adjust on every render.\n  useEffect(() => {\n    if (estimateItemSizeRef.current === 0) {\n      let totalHeight = 0;\n      const nodes = rootRef.current.querySelectorAll(itemSelector);\n      if (nodes.length > 0) {\n        nodes.forEach((item: HTMLElement) => {\n          totalHeight += item.offsetHeight;\n        });\n        estimateItemSizeRef.current = totalHeight / nodes.length;\n      }\n    }\n  });\n\n  // override itemRenderer to adjust the index\n  const _getItemRenderer = (startIndex: number) => {\n    // returns a new render function\n    return (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n      const itemContext: ItemContext<{ data: D; metadata: Metadata<K> }> = {\n        index: startIndex + context.index,\n        data: context.data\n      };\n      return children(itemContext);\n    };\n  };\n\n  // if DataState is invalid (including not specified), just render blank\n  if (!data || !isDataStateValid(data)) {\n    return <div ref={rootRef} />;\n  }\n\n  const rangeData = data.data;\n  const offset = data.offset;\n  const endIndex = offset + rangeData.length;\n  const itemCount = data.totalSize;\n  const topPlaceholderContext =\n    offset >= 0\n      ? {\n          fromIndex: 0,\n          toIndex: offset,\n          which: 'topPlaceholder' as PlaceholderType,\n          estimateItemSize: estimateItemSizeRef.current ?? 0\n        }\n      : undefined;\n  const bottomPlaceholderContext =\n    endIndex && endIndex <= itemCount\n      ? {\n          fromIndex: endIndex,\n          toIndex: itemCount,\n          which: 'bottomPlaceholder' as PlaceholderType,\n          estimateItemSize: estimateItemSizeRef.current ?? 0\n        }\n      : undefined;\n\n  const renderLoadMore =\n    loadMoreIndicator && data.sizePrecision === 'atLeast' && endIndex <= itemCount;\n\n  // might need to support elementType prop in the future to allow customization of what\n  // type of element to render for the root\n  return (\n    <div ref={rootRef} style=\"will-change: contents\">\n      {suggestions}\n      {topPlaceholderContext && (\n        <Placeholder\n          context={topPlaceholderContext}\n          placeholderHeight={placeholderHeight}></Placeholder>\n      )}\n      <Collection items={rangeData}>{_getItemRenderer(offset)}</Collection>\n      {bottomPlaceholderContext && (\n        <Placeholder\n          context={bottomPlaceholderContext}\n          placeholderHeight={placeholderHeight}></Placeholder>\n      )}\n      {renderLoadMore && <div class={LOADMORE_STYLE_CLASS}>{loadMoreIndicator}</div>}\n    </div>\n  );\n}\n"],"names":["stringLiteralArray","PLACEHOLDER_STYLE_CLASS","Placeholder","context","placeholderHeight","fromIndex","toIndex","which","estimateItemSize","totalHeight","placeholderUnitHeight","Math","max","key","style","height","display","_jsx","jsx","className","getVirtualizedRangeExtractor","fetchSize","itemSize","viewportHeight","scrollOffset","overscan","undefined","offset","count","ceil","getViewportRange","scroller","root","rangeExtractor","rootRect","getBoundingClientRect","viewportRect","elem","top","bottom","document","documentElement","clientHeight","scrollerBounds","getElementTopBottom","LOADMORE_STYLE_CLASS","DEFAULT_RANGE_EXTRACTOR","data","children","viewportConfig","itemSelector","onLoadRange","loadMoreIndicator","suggestions","rootRef","useRef","estimateItemSizeRef","useViewportIntersect","range","current","_a","useEffect","nodes","querySelectorAll","length","forEach","item","offsetHeight","dataState","totalSize","ref","rangeData","endIndex","itemCount","topPlaceholderContext","bottomPlaceholderContext","_b","renderLoadMore","sizePrecision","_jsxs","jsxs","Object","assign","Collection","items","startIndex","itemContext","index","class"],"mappings":"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"}