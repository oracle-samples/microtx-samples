{"version":3,"file":"TextAreaAutosize-60cacec3.js","sources":["../../src/UNSAFE_TextAreaAutosize/ScrollHeightUtils.tsx","../../src/UNSAFE_TextAreaAutosize/useTextAreaAutosizing.tsx","../../src/UNSAFE_TextAreaAutosize/TextAreaAutosize.tsx"],"sourcesContent":["// returns the lineHeight as a number of pixels.\nexport const calculateLineHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = window.getComputedStyle(textarea);\n  const computedlineHeight = computedStyle.lineHeight;\n  if (computedlineHeight === 'normal') {\n    // We get 'normal' for values 'initial', 'inherit', 'unset' and 'normal'\n    // TODO: Unclear if we need this.\n    // getComputedStyle always return fontSize in pixels.  Not likely a float, but since it's legal\n    // we use parseFloat()\n    const fontSize = parseFloat(computedStyle.fontSize);\n    return 1.2 * fontSize;\n  }\n  return parseFloat(computedlineHeight);\n};\nexport const getStylingHeight = (textarea: HTMLTextAreaElement) => {\n  const cssStyle = window.getComputedStyle(textarea);\n  const paddingTop = parseFloat(cssStyle.paddingTop);\n  const paddingBottom = parseFloat(cssStyle.paddingBottom);\n  const borderTop = parseFloat(cssStyle.borderTop);\n  const borderBottom = parseFloat(cssStyle.borderBottom);\n  return { paddingHeight: paddingTop + paddingBottom, borderHeight: borderTop + borderBottom };\n};\n","import { ComponentProps } from 'preact';\nimport { useLayoutEffect, Ref } from 'preact/hooks';\nimport { calculateLineHeight, getStylingHeight } from './ScrollHeightUtils';\nimport { TextAreaAutosize } from './TextAreaAutosize';\n\ntype PickedPropsFromTextAreaAutosize = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'minRows' | 'maxRows' | 'value'\n>;\ntype Props = PickedPropsFromTextAreaAutosize & {\n  isReadonly?: boolean;\n  enabledElementRef: Ref<HTMLTextAreaElement>;\n  readonlyElementRef: Ref<HTMLTextAreaElement | HTMLDivElement>;\n};\n\n// TODO: Make this fire when the container resizes - JET-50840\nexport const useTextAreaAutosizing = ({\n  isReadonly,\n  enabledElementRef,\n  readonlyElementRef,\n  minRows = 2,\n  maxRows,\n  value\n}: Props) => {\n  useLayoutEffect(() => {\n    const textareaRef = isReadonly ? readonlyElementRef : enabledElementRef;\n    if (textareaRef.current === null) return;\n    if (textareaRef.current instanceof HTMLDivElement) return; // We don't need to do anything if the readonlyElement is a DIV.\n    const textarea = textareaRef.current;\n    const lineHeight = calculateLineHeight(textarea);\n    textarea.style.height = '0';\n    const { paddingHeight, borderHeight } = getStylingHeight(textarea);\n    const heightForMinRows = lineHeight * minRows + paddingHeight + borderHeight;\n    const scrollHeight = textarea.scrollHeight + borderHeight;\n    let resizedHeight = 0;\n    // if maxRows is -1 the textarea will grow or shrink to fit all the content.\n    // it won't shrink any less than rows.\n    if (maxRows === undefined) {\n      // we want to fit the entire scrollHeight, but we don't want\n      // to shrink smaller than the height for rows.\n      if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else if (maxRows > minRows) {\n      // if maxRows is positive and greater than rows, the textarea will grow to fit the content\n      // up to maxrows, or shrink to fit the content and down to rows.\n      const heightForMaxRows = lineHeight * maxRows + paddingHeight + borderHeight;\n      if (scrollHeight > heightForMaxRows) {\n        resizedHeight = heightForMaxRows;\n      } else if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else {\n      resizedHeight = heightForMinRows;\n    }\n    // The 0.5 gaurantees that the clientHeight will be bigger than the scrollHeight, so no scrollbar appears.\n    textarea.style.height = resizedHeight + 0.5 + 'px';\n  }, [value, minRows, maxRows, isReadonly]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { useTextAreaAutosizing } from './useTextAreaAutosizing';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MaxLengthCounter } from '../UNSAFE_TextArea';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Specifies the maximum number of rows that the TextAreaAutosize is allowed to grow to.\n   * If maxRows is less than minRows, it is ignored.\n   */\n  maxRows?: number;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Specifies the minimum number of rows that the TextAreaAutosize is allowed to shrink to.\n   */\n  minRows?: number;\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked when the user inputs a value.\n   *\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\nexport const TextAreaAutosize = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      maxRows,\n      messages,\n      minRows = 2,\n      placeholder,\n      role,\n      //TODO: Add counter to show the length remaining - JET-50752\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement | HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        contentVariant: 'textarea',\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        value\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    useTextAreaAutosizing({\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      minRows,\n      maxRows,\n      value\n    });\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              elementRef={readonlyElementRef}\n              {...(maxRows ? { as: 'textarea', rows: minRows } : { as: 'div' })}\n              autoFocus={autoFocus}\n              textAlign={textAlign}\n              value={value}\n              variant=\"textarea\"\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, []);\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={minRows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && maxLength !== undefined && (\n          <MaxLengthCounter\n            {...{ maxLength, valueLength, parentHasFocus: isFocused, onClick: onClickCounter }}\n          />\n        )}\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["useTextAreaAutosizing","isReadonly","enabledElementRef","readonlyElementRef","minRows","maxRows","value","useLayoutEffect","textareaRef","current","HTMLDivElement","textarea","lineHeight","computedStyle","window","getComputedStyle","computedlineHeight","parseFloat","fontSize","calculateLineHeight","style","height","paddingHeight","borderHeight","cssStyle","paddingTop","paddingBottom","borderTop","borderBottom","getStylingHeight","heightForMinRows","scrollHeight","resizedHeight","undefined","heightForMaxRows","TextAreaAutosize","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthCounter","maxLengthUnit","messages","placeholder","role","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","variant","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","focusProps","isFocused","useFocusableTextField","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","contentVariant","styleVariant","isMaxLengthExceeded","valueLength","onFilteredInput","useLengthFilter","labelComp","_jsx","Label","Object","assign","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","fieldLabel","FormFieldContext","Provider","children","ReadonlyTextField","ReadonlyTextFieldInput","ariaLabelledBy","id","elementRef","as","rows","hasInsideLabel","onClickCounter","elm","len","length","_a","setSelectionRange","_b","focus","mainContent","_jsxs","Fragment","TextFieldInput","inputRef","MaxLengthCounter","parentHasFocus","onClick","MaxLengthLiveRegion","TextField","onBlur","onfocusout","onFocus","onfocusin"],"mappings":"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"}