{"version":3,"file":"UNSAFE_useFormFieldContext.js","sources":["../../../src/hooks/UNSAFE_useFormFieldContext/FormFieldContext.ts","../../../src/hooks/UNSAFE_useFormFieldContext/useFormFieldContext.ts"],"sourcesContent":["import { createContext } from 'preact';\n\ntype DisabledFormFieldContext = {\n  /**\n   * Indicates whether the component has value\n   */\n  hasValue?: boolean;\n  /**\n   * Indicates whether the component is in disabled state\n   */\n  isDisabled: true;\n  /**\n   * A disabled field can never have focus\n   */\n  isFocused?: false;\n  /**\n   * Indicates whether the component is in a loading state\n   */\n  isLoading?: boolean;\n  /**\n   * A disabled field can never be readonly\n   */\n  isReadonly?: false;\n};\n\ntype EnabledFormFieldContext = {\n  /**\n   * Indicates whether the component has value\n   */\n  hasValue?: boolean;\n  /**\n   * Enabled field can never be disabled\n   */\n  isDisabled?: false;\n  /**\n   * Indicates whether the text field is in focused state\n   */\n  isFocused?: boolean;\n  /**\n   * Indicates whether the component is in a loading state\n   */\n  isLoading?: boolean;\n  /**\n   * Enabled field will not be readonly\n   */\n  isReadonly?: false;\n};\n\ntype ReadonlyFormFieldContext = {\n  /**\n   * Indicates whether the component has value\n   */\n  hasValue?: boolean;\n  /**\n   * Readonly field can never be disabled\n   */\n  isDisabled?: false;\n  /**\n   * Indicates whether the text field is in focused state\n   */\n  isFocused?: boolean;\n  /**\n   * Indicates whether the component is in a loading state\n   */\n  isLoading?: boolean;\n  /**\n   * Indicates whether the component is in readonly state\n   */\n  isReadonly: true;\n};\n\ntype FormFieldContextProps =\n  | DisabledFormFieldContext\n  | EnabledFormFieldContext\n  | ReadonlyFormFieldContext;\n\n/**\n * Context which the parent component can use to provide various FormControl related\n * information\n */\nconst FormFieldContext = createContext<FormFieldContextProps>({\n  hasValue: false,\n  isDisabled: false,\n  isFocused: false,\n  isLoading: false,\n  isReadonly: false\n});\n\nexport { FormFieldContext, FormFieldContextProps };\n","import { useContext } from 'preact/hooks';\nimport { FormFieldContext } from './FormFieldContext';\n\n/**\n * Utility hook for consuming the FormFieldContext\n *\n * @returns The value of closest FormControl provider\n */\nfunction useFormFieldContext() {\n  return useContext(FormFieldContext);\n}\n\nexport { useFormFieldContext };\n"],"names":["FormFieldContext","createContext","hasValue","isDisabled","isFocused","isLoading","isReadonly","useContext"],"mappings":"wEAgFM,MAAAA,EAAmBC,EAAAA,cAAqC,CAC5DC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,WAAW,EACXC,YAAY,+CC7Ed,WACE,OAAOC,EAAAA,WAAWP"}