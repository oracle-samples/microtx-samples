{
  "name": "input-password",
  "version": "1.0.0",
  "jetVersion": "^14.0.1",
  "type": "composite",
  "pack": "oj-c",
  "implements": [
    "CInputPasswordElement"
  ],
  "displayName": "InputPassword",
  "description": "An input password displays a field that allows a user to enter a password that will be masked.",
  "help": "oj-c.InputPassword.html",
  "main": "oj-c/input-password",
  "extension": {
    "vbdt": {
      "module": "oj-c/input-password",
      "defaultColumns": 6,
      "minColumns": 2
    },
    "oracle": {
      "icon": "oj-ux-ico-text-input-password",
      "uxSpecs": [
        "input-password"
      ]
    }
  },
  "propertyLayout": [
    {
      "propertyGroup": "common",
      "items": [
        "disabled",
        "labelHint",
        "placeholder",
        "readonly",
        "required"
      ]
    },
    {
      "propertyGroup": "data",
      "items": [
        "value"
      ]
    }
  ],
  "since": "13.0.0",
  "properties": {
    "autocomplete": {
      "type": "string",
      "description": "Dictates component's autocomplete state",
      "displayName": "Autocomplete",
      "help": "#autocomplete",
      "value": "on"
    },
    "clearIcon": {
      "type": "string",
      "description": "Specifies if an icon to clear the input field should be visible.",
      "displayName": "Clear Icon",
      "help": "#clearIcon",
      "propertyEditorValues": {
        "always": {
          "description": "The clear icon will always be shown.",
          "displayName": "Always"
        },
        "never": {
          "description": "The clear icon will never be shown (default, if unspecified).",
          "displayName": "Never"
        },
        "conditional": {
          "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
          "displayName": "Conditional"
        }
      },
      "enumValues": [
        "always",
        "never",
        "conditional"
      ],
      "value": "never"
    },
    "containerReadonly": {
      "type": "boolean",
      "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
      "displayName": "Container Readonly",
      "help": "#containerReadonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      }
    },
    "disabled": {
      "type": "boolean",
      "description": "Specifies whether the component is disabled.",
      "displayName": "Disabled",
      "help": "#disabled",
      "value": false
    },
    "displayOptions": {
      "type": "object",
      "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
      "displayName": "Display Options",
      "help": "#displayOptions",
      "properties": {
        "converterHint": {
          "type": "string",
          "enumValues": [
            "display",
            "none"
          ],
          "value": "display"
        },
        "messages": {
          "type": "string",
          "enumValues": [
            "display",
            "none"
          ],
          "value": "display"
        },
        "validatorHint": {
          "type": "string",
          "enumValues": [
            "display",
            "none"
          ],
          "value": "display"
        }
      }
    },
    "help": {
      "type": "object",
      "description": "Form component help information.",
      "displayName": "Help",
      "help": "#help",
      "properties": {
        "instruction": {
          "type": "string",
          "value": ""
        }
      }
    },
    "helpHints": {
      "type": "object",
      "description": "The helpHints object contains a definition property and a source property.",
      "displayName": "Help Hints",
      "help": "#helpHints",
      "properties": {
        "definition": {
          "type": "string",
          "value": ""
        },
        "source": {
          "type": "string",
          "value": ""
        },
        "sourceText": {
          "type": "string"
        }
      }
    },
    "labelEdge": {
      "type": "string",
      "description": "Specifies how the label is positioned for the component",
      "displayName": "Label Edge",
      "help": "#labelEdge",
      "propertyEditorValues": {
        "inside": {
          "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
          "displayName": "Inside"
        },
        "none": {
          "description": "The component will not create a label, but instead set the aria-label property on the input element.",
          "displayName": "None"
        },
        "start": {
          "description": "The label will be placed before the start of the component.",
          "displayName": "Start"
        },
        "top": {
          "description": "The label will be placed on top of the component.",
          "displayName": "Top"
        }
      },
      "enumValues": [
        "start",
        "none",
        "top",
        "inside"
      ],
      "binding": {
        "consume": {
          "name": "containerLabelEdge"
        }
      }
    },
    "labelHint": {
      "type": "string",
      "description": "Represents a hint for rendering a label on the component.",
      "displayName": "Label Hint",
      "help": "#labelHint",
      "required": true,
      "translatable": true
    },
    "labelStartWidth": {
      "type": "string",
      "description": "The width of the label when labelEdge is 'start'.",
      "displayName": "Label Start Width",
      "help": "#labelStartWidth",
      "binding": {
        "consume": {
          "name": "labelWidth"
        }
      }
    },
    "labelWrapping": {
      "type": "string",
      "description": "Should the labels wrap or truncate when there is not enough available space.",
      "displayName": "Label Wrapping",
      "help": "#labelWrapping",
      "propertyEditorValues": {
        "truncate": {
          "description": "Label will truncate if needed.",
          "displayName": "Truncate"
        },
        "wrap": {
          "description": "Label will wrap if needed.",
          "displayName": "Wrap"
        }
      },
      "enumValues": [
        "wrap",
        "truncate"
      ],
      "binding": {
        "consume": {
          "name": "labelWrapping"
        }
      }
    },
    "maskIcon": {
      "type": "string",
      "description": "Represents the mask icon.",
      "displayName": "Mask Icon",
      "help": "#maskIcon",
      "propertyEditorValues": {
        "hidden": {
          "description": "The mask visibility icon is never visible.",
          "displayName": "Hidden"
        },
        "visible": {
          "description": "The mask visibility icon is always visible.",
          "displayName": "Visible"
        }
      },
      "enumValues": [
        "hidden",
        "visible"
      ],
      "value": "visible"
    },
    "messagesCustom": {
      "type": "Array<object>",
      "description": "List of custom component messages",
      "displayName": "Messages Custom",
      "help": "#messagesCustom",
      "extension": {
        "vbdt": {
          "itemProperties": {
            "summary": {
              "type": "string"
            },
            "detail": {
              "type": "string"
            },
            "severity": {
              "type": "string",
              "enumValues": [
                "error",
                "confirmation",
                "info",
                "warning"
              ]
            }
          }
        }
      },
      "writeback": true,
      "value": []
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder text to set on the element.",
      "displayName": "Placeholder",
      "help": "#placeholder",
      "translatable": true
    },
    "readonly": {
      "type": "boolean",
      "description": "Whether the component is readonly",
      "displayName": "Readonly",
      "help": "#readonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      },
      "value": false
    },
    "required": {
      "type": "boolean",
      "description": "Specifies whether or not the component is required.",
      "displayName": "Required",
      "help": "#required",
      "value": false
    },
    "requiredMessageDetail": {
      "type": "string",
      "description": "Overrides the default Required error message.",
      "displayName": "Required Message Detail",
      "help": "#requiredMessageDetail",
      "translatable": true
    },
    "textAlign": {
      "type": "string",
      "description": "Specifies how the text is aligned within the text field",
      "displayName": "Text Align",
      "help": "#textAlign",
      "propertyEditorValues": {
        "start": {
          "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
          "displayName": "Start"
        },
        "end": {
          "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
          "displayName": "End"
        },
        "right": {
          "description": "Aligns text right regardless of reading direction, often used for numbers.",
          "displayName": "Right"
        }
      },
      "enumValues": [
        "start",
        "right",
        "end"
      ]
    },
    "userAssistanceDensity": {
      "type": "string",
      "description": "Specifies the density of the form component's user assistance presentation.",
      "displayName": "User Assistance Density",
      "help": "#userAssistanceDensity",
      "propertyEditorValues": {
        "reflow": {
          "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
          "displayName": "Reflow"
        },
        "efficient": {
          "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
          "displayName": "Efficient"
        }
      },
      "enumValues": [
        "reflow",
        "efficient"
      ],
      "binding": {
        "consume": {
          "name": "containerUserAssistanceDensity"
        }
      },
      "value": "reflow"
    },
    "validators": {
      "type": "Array<object>|null",
      "description": "Specifies the validators for the component.",
      "displayName": "Validators",
      "help": "#validators",
      "value": []
    },
    "value": {
      "type": "string|null",
      "description": "The value of the component.",
      "displayName": "Value",
      "help": "#value",
      "writeback": true,
      "value": null
    },
    "rawValue": {
      "type": "string",
      "description": "Specifies how the raw value of the component",
      "displayName": "Raw Value",
      "help": "#rawValue",
      "readOnly": true,
      "writeback": true
    },
    "valid": {
      "type": "string",
      "description": "Specifies how the raw value of the component",
      "displayName": "Raw Value",
      "help": "#rawValue",
      "propertyEditorValues": {
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Shown"
        }
      },
      "enumValues": [
        "valid",
        "pending",
        "invalidHidden",
        "invalidShown"
      ],
      "readOnly": true,
      "writeback": true
    }
  },
  "methods": {
    "reset": {
      "return": "any"
    },
    "showMessages": {
      "return": "any"
    },
    "validate": {
      "return": "Promise"
    },
    "blur": {
      "return": "any"
    },
    "focus": {
      "return": "any"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}