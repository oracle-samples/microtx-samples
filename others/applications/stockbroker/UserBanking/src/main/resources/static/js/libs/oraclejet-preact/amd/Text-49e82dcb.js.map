{"version":3,"file":"Text-49e82dcb.js","sources":["../../src/UNSAFE_Text/Text.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\ntype StylePropsWithOutTruncate = {\n  /**\n   * Specifies text color. If set as \"inherit\", takes text color from its parent element.\n   */\n  variant?: 'primary' | 'secondary' | 'disabled' | 'danger' | 'warning' | 'success' | 'inherit';\n\n  /**\n   * Specifies font size and line height. If set as \"inherit\", takes font size and line height from its parent element.\n   */\n  size?: '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'inherit';\n\n  /**\n   * Specifies the font weight. If set as \"inherit\", takes font weight from its parent element.\n   */\n  weight?: 'normal' | 'semiBold' | 'bold' | 'inherit';\n\n  /**\n   * Specifies if hyphens should be included when handling long words with no spaces.\n   */\n  hyphens?: 'auto' | 'none';\n};\ntype TruncateProps =\n  | {\n      /**\n       * Truncates text at a specific number of lines and then displays an ellipsis (â€¦) at the end of the last line. Parent of the element needs to have a specific width so text starts overflowing and produce a truncation.\n       */\n      lineClamp?: number;\n      /**\n       * Determines text behavior when text is truncated. Be aware of setting either lineClamp or truncation. Setting both props would produce a type error. In most cases, lineClamp=1 tries to put the ellipsis at the end of a \"word\". On the other hand, using truncation=\"ellipsis\" will show as much as possible text, then put the ellipsis at the end.\n       */\n      truncation?: never;\n    }\n  | {\n      lineClamp?: never;\n      truncation?: 'none' | 'clip' | 'ellipsis';\n    };\ntype AdditionalProps = {\n  /**\n   * Specifies the text id\n   */\n  id?: string;\n\n  /**\n   * Specifies the children.\n   */\n  children?: string;\n};\ntype Props = StylePropsWithOutTruncate & TruncateProps & AdditionalProps;\n\nconst styles = {\n  base: cssProps`${{\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    overflowWrap: 'anywhere',\n    display: 'inline'\n  }}`,\n  lineClamp: cssProps`${{\n    display: '-webkit-box',\n    WebkitBoxOrient: 'vertical'\n  }}`,\n  truncation: {\n    none: '',\n    clip: cssProps`${{\n      textOverflow: 'clip',\n      whiteSpace: 'nowrap',\n      width: '100%',\n      display: 'inline-block'\n    }}`,\n    ellipsis: cssProps`${{\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      width: '100%',\n      display: 'inline-block'\n    }}`\n  },\n  variant: {\n    primary: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)'\n    }}`,\n    secondary: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-secondary)'\n    }}`,\n    disabled: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)'\n    }}`,\n    danger: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-danger-3)'\n    }}`,\n    warning: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-warning-3)'\n    }}`,\n    success: cssProps`${{\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-success-3)'\n    }}`,\n    inherit: cssProps`${{\n      color: 'inherit'\n    }}`\n  },\n  size: {\n    '2xs': cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-2xs-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-2xs-line-height)'\n    }}`,\n    xs: cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-line-height)'\n    }}`,\n    sm: cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-line-height)'\n    }}`,\n    md: cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height)'\n    }}`,\n    lg: cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-lg-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-lg-line-height)'\n    }}`,\n    xl: cssProps`${{\n      fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xl-font-size)',\n      lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xl-line-height)'\n    }}`,\n    inherit: cssProps`${{\n      fontSize: 'inherit',\n      lineHeight: 'inherit'\n    }}`\n  },\n  weight: {\n    normal: cssProps`${{\n      fontWeight: 'normal'\n    }}`,\n    semiBold: cssProps`${{\n      fontWeight: '600'\n    }}`,\n    bold: cssProps`${{\n      fontWeight: '700'\n    }}`,\n    inherit: cssProps`${{\n      fontWeight: 'inherit'\n    }}`\n  },\n  hyphens: {\n    auto: cssProps`${{\n      hyphens: 'auto'\n    }}`,\n    none: cssProps`${{\n      hyphens: 'none'\n    }}`\n  }\n};\nconst interpolations = [\n  () => ({ class: styles.base }),\n  ({ size = 'inherit' }: Pick<StylePropsWithOutTruncate, 'size'>) => ({\n    class: styles.size[size]\n  }),\n  ({ weight = 'inherit' }: Pick<StylePropsWithOutTruncate, 'weight'>) => ({\n    class: styles.weight[weight]\n  }),\n  ({ variant = 'inherit' }: Pick<StylePropsWithOutTruncate, 'variant'>) => ({\n    class: styles.variant[variant]\n  }),\n  ({ hyphens = 'auto' }: Pick<StylePropsWithOutTruncate, 'hyphens'>) => ({\n    class: styles.hyphens[hyphens]\n  }),\n  ({ truncation = 'none' }: Pick<TruncateProps, 'truncation'>) => ({\n    class: styles.truncation[truncation]\n  }),\n  ({ lineClamp }: Pick<TruncateProps, 'lineClamp'>) =>\n    !lineClamp ? {} : { class: styles.lineClamp, webkitLineClamp: lineClamp }\n];\nconst styleInterpolations = mergeInterpolations<Omit<Props, 'children'>>(interpolations);\nconst childrenStyles = cssProps`${{\n  /* @ts-ignore */\n  '& > *': {\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    marginLeft: '0 !important',\n    marginRight: '0 !important'\n  }\n}}`;\n\nexport function Text({ children, ...props }: Props) {\n  const { class: cls, ...styles } = styleInterpolations(props);\n  return (\n    <span class={cls} style={styles} id={props.id}>\n      <span className={childrenStyles}>{children}</span>\n    </span>\n  );\n}\n"],"names":["styles","truncation","none","variant","size","weight","hyphens","interpolations","class","styleInterpolations","mergeInterpolations","_a","children","props","__rest","_b","cls"],"mappings":"+IA2DA,MAAAA,EAAA,MAAA,qBAAA,SAWEC,WAAA,CACEC,KAAA,QADF,gCAeAC,QAAA,SAAA,qBAAA,oBAAA,gBAAA,iBAAA,mBAAA,4BAuBAC,KAAA,OAAA,YAAA,aAAA,aAAA,cAAA,cAAA,8BA8BAC,OAAA,QAAA,mBAAA,gBAAA,8BAcAC,QAAA,MAAA,0BASFC,EAAA,8CAGIC,MAAAR,EAAAI,KAAAA,+BAGAI,MAAAR,EAAAK,OAAAA,gCAGAG,MAAAR,EAAAG,QAAAA,6BAGAK,MAAAR,EAAAM,QAAAA,gCAGAE,MAAAR,EAAAC,WAAAA,kEAKJQ,EAAAC,EAAAA,oBAAAH,UAWA,SAAAI,GAAqB,IAAAC,SAAAA,GAAAD,EAAAE,EAAAC,EAAAA,OAAAH,EAAA,CAAA,aACnB,MAAAI,EAAAN,EAAAI,IAAAL,MAAAQ,GAAAD,EAAAf,EAAAc,EAAAA,OAAAC,EAAA,CAAA,sHAXF"}