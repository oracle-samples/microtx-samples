{"version":3,"file":"PRIVATE_TransitionGroup.js","sources":["../../src/PRIVATE_TransitionGroup/TransitionUtils.ts","../../src/PRIVATE_TransitionGroup/TransitionGroup.tsx","../../src/PRIVATE_TransitionGroup/Transition.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cloneElement, VNode } from 'preact';\nimport { TransitionProps } from './Transition';\n\nexport type ChildKey = number | string;\nexport type ChildMapping = Map<string | number, VNode<TransitionProps>>;\nexport type ChildrenRecord<T = any> = {\n  [Key in number | string | any]: T[];\n};\n\n/**\n * @classdesc\n * A utility class consisting of helper functions for handling transitions\n * related operations.\n */\nexport class TransitionUtils {\n  /**\n   * Creates a map of the children array with the calculated in prop\n   *\n   * @param children The newly received children\n   * @param prevChildMapping The previous child mapping\n   * @returns the newly created child mapping\n   */\n  public static getChildMapping(\n    children: VNode<TransitionProps>[],\n    prevChildMapping: ChildMapping = new Map(),\n    onExited: (child: VNode<TransitionProps>, node: Element, key?: ChildKey) => void = () => {}\n  ): ChildMapping {\n    // A symbol to store trailing children\n    const TRAILING = Symbol();\n    let mappedDeletions = {} as ChildrenRecord;\n\n    if (prevChildMapping.size !== 0) {\n      // If previous children exists, get the mapped deleted children\n      mappedDeletions = TransitionUtils._getMappedDeletions(children, prevChildMapping, TRAILING);\n    }\n\n    // Create a new Map with the new children along with the deletions inserted in their\n    // respective positions\n    const mergedChildrenMap: ChildMapping = children.reduce<ChildMapping>(\n      (accumulator, currentChild) => {\n        if (mappedDeletions[currentChild.key]) {\n          // There are keys from prev that are deleted before the current\n          // next key, so add them first\n          const deletedChildren = mappedDeletions[currentChild.key];\n          for (const key of deletedChildren) {\n            const previousChild = prevChildMapping.get(key);\n            // Set the in property to false, as this is children is removed\n            accumulator.set(key, cloneElement(previousChild!, { in: false }));\n          }\n          // Then add the current key. Do not change the in property as this is a\n          // retained children.\n          const previousChild = prevChildMapping.get(currentChild.key);\n          accumulator.set(\n            currentChild.key,\n            cloneElement(currentChild, { in: previousChild!.props.in })\n          );\n        } else {\n          // This is a new children. Set the in property to true\n          const newChild = cloneElement(currentChild, {\n            // bind the original child so that the original callbacks can be\n            // called in the onExited callback from the argument.\n            onExited: onExited.bind(null, currentChild),\n            in: true\n          });\n          accumulator.set(currentChild.key, newChild);\n        }\n\n        return accumulator;\n      },\n      new Map() as ChildMapping\n    );\n\n    // Finally add any trailing deleted children present in the mappedDeletions[TRAILING]\n    for (const key of mappedDeletions[TRAILING as any] || []) {\n      const previousChild = prevChildMapping.get(key);\n      // Set the in property to false, as this is children is removed\n      mergedChildrenMap.set(key, cloneElement(previousChild!, { in: false }));\n    }\n\n    // Finally return the merged children map\n    return mergedChildrenMap;\n  }\n\n  ////////////////////////////\n  // Private helper methods //\n  ////////////////////////////\n\n  /**\n   * Creates a map of deleted children wrt to the keys in the new data.\n   *\n   * @param children The newly received children\n   * @param prevChildMapping The previous child mapping\n   * @param TRAILING A unique symbol to be used for storing the trailing children\n   * @returns A map containing deleted children\n   */\n  private static _getMappedDeletions(\n    children: VNode<TransitionProps>[],\n    prevChildMapping: ChildMapping,\n    TRAILING: symbol\n  ): ChildrenRecord<ChildKey> {\n    // Create a set with keys of next children\n    const nextChildrenKeys = new Set(children.map((children) => children.key));\n\n    return [...prevChildMapping.keys()].reduce<ChildrenRecord<ChildKey>>(\n      (accumulator, currentKey) => {\n        if (nextChildrenKeys.has(currentKey)) {\n          // We have reached a point where the closest prevKey that\n          // is in the next, so if there are any pending keys add them\n          // to this key in mappedDeletions so that the pending keys will\n          // be added before the current next key\n          accumulator[currentKey] = accumulator[TRAILING as any];\n          delete accumulator[TRAILING as any];\n        } else {\n          // If key is not found in next, then add it to the trailing keys.\n          const trailingChildren = accumulator[TRAILING as any]\n            ? [...accumulator[TRAILING as any], currentKey]\n            : [currentKey];\n          accumulator[TRAILING as any] = trailingChildren;\n        }\n\n        return accumulator;\n      },\n      {} as ChildrenRecord<ChildKey>\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Component, ComponentChild, ComponentType, VNode } from 'preact';\nimport { TransitionProps } from './Transition';\nimport { ChildKey, ChildMapping, TransitionUtils } from './TransitionUtils';\n\n/**\n * Props for the TransitionGroup Component\n */\ntype TransitionGroupProps = {\n  /**\n   * @description\n   * <TransitionGroup> renders a '<div>' by default. You can change this\n   * behavior by providing a different value to this prop.\n   */\n  elementType?: string | ComponentType;\n\n  /**\n   * @description\n   * Children component should be a collection of TransitionComponent. The child\n   * components should be a Transition Component.\n   */\n  children: VNode<TransitionProps>[];\n};\n\n/**\n * State for the TransitionGroup component\n */\ntype State = {\n  childMapping?: ChildMapping;\n  handleExited?: (child: VNode<TransitionProps>, node: Element, key?: ChildKey) => void;\n};\n\n/**\n * @classdesc\n * The <TransitionGroup> component manages a set of components that involves animations.\n * This component does not handle any animation, rather just a state machine that manages\n * the mounting and unmounting of the components over the time. The actual animation needs\n * to be handled by the content component.\n *\n * Consider the example below:\n * <TransitionGroup>\n *   {\n *      messages.map(message => {\n *        <Transition key={message.key}>\n *          <Message\n *            type={type}\n *            index={index}\n *            item={data.message}\n *            onOjClose={onOjClose}\n *          />\n *        </Transition>\n *      });\n *   }\n * </TransitionGroup>\n * As the messages are added/removed, the TransitionGroup Component automatically\n * toggles the 'in' prop of the Transition Component.\n *\n * @ignore\n */\nexport class TransitionGroup extends Component<TransitionGroupProps, State> {\n  static defaultProps: Partial<TransitionGroupProps> = {\n    elementType: 'div'\n  };\n\n  /**\n   * Derives state from the current props\n   *\n   * @param props The current Props that will be used to get the new state\n   * @param state The current state\n   *\n   * @returns The new state\n   */\n  static getDerivedStateFromProps(\n    props: Readonly<TransitionGroupProps>,\n    state: Readonly<State>\n  ): State | null {\n    const { childMapping, handleExited } = state;\n    return {\n      childMapping: TransitionUtils.getChildMapping(props.children, childMapping, handleExited)\n    };\n  }\n\n  private _mounted: boolean;\n\n  ////////////////////////////////////////////////////////////////////////\n  // Handler functions are created as members to have them 'this' bound //\n  ////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Handles when a transition component exits\n   *\n   * @param child The child instance that exited\n   * @param node The corresponding transition element\n   * @param metadata The metadata of the corresponding transition component\n   */\n  private readonly _handleExited = (\n    child: VNode<TransitionProps>,\n    node?: Element,\n    metadata?: any\n  ) => {\n    const { children } = this.props;\n    // get the child mapping for the current children\n    const currentChildMapping = TransitionUtils.getChildMapping(children);\n\n    // if the exited child is added again, do nothing here\n    if (currentChildMapping.has(child.key)) return;\n\n    // The child component has exited, call the original onExited callback\n    child.props.onExited?.(node, metadata);\n\n    // Check if this component is still mounted, if so update the state\n    if (this._mounted) {\n      this.setState((state: Readonly<State>): Partial<State> => {\n        const childMapping = new Map(state.childMapping!);\n        // delete the exited child\n        childMapping.delete(child.key);\n        return { childMapping };\n      });\n    }\n  };\n\n  ///////////////////////////\n  // Handler functions end //\n  ///////////////////////////\n\n  /**\n   * Instantiates Component\n   *\n   * @param props The component properties\n   */\n  constructor(props: Readonly<TransitionGroupProps>) {\n    super(props);\n\n    this.state = {\n      childMapping: undefined,\n      handleExited: this._handleExited\n    };\n    this._mounted = false;\n  }\n\n  //////////////////////////////////////\n  // Component Life Cycle Hooks Start //\n  //////////////////////////////////////\n\n  /**\n   * Life cycle hook that gets called when the component is mounted on to\n   * the DOM\n   */\n  componentDidMount() {\n    this._mounted = true;\n  }\n\n  /**\n   * Life cycle hook that gets called when the component is unmounted from\n   * the DOM\n   */\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  ////////////////////////////////////\n  // Component Life Cycle Hooks End //\n  ////////////////////////////////////\n\n  /**\n   * Renders the transition components\n   */\n  render(): ComponentChild {\n    const WrapperComponent = this.props.elementType!;\n    const { childMapping } = this.state;\n    const children = [...childMapping!.values()];\n    return <WrapperComponent>{children}</WrapperComponent>;\n  }\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Component, ComponentChild, RenderableProps } from 'preact';\n\n/**\n * Supported transitions\n */\ntype TransitionCompleteStatus = 'entered' | 'exited';\ntype TransitionIntermediateStatus = 'entering' | 'exiting' | null;\ntype TransitionStatus = TransitionCompleteStatus | TransitionIntermediateStatus;\n\n/**\n * A function wrapper that when cancelled, will not call the\n * original function when invoked.\n */\ntype CancellableFunction = {\n  (): void;\n  cancel?: () => void;\n};\n\n/**\n * State for the Transition component\n */\ntype State = {\n  status: TransitionStatus;\n};\n\n/**\n * Props for the Transition Component\n */\nexport type TransitionProps<M = any> = {\n  /**\n   * A boolean for whether or not to the show the child content. Usually, this represents\n   * whether or the current item existing in the data.\n   */\n  in?: boolean;\n\n  /**\n   * An optional metadata that will be passed along on all callbacks\n   */\n  metadata?: M;\n\n  /**\n   * Called when the component enters for the first time.\n   */\n  onEnter?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component enters for the first time and right after onEnter call.\n   */\n  onEntering?: (node?: Element, callback?: () => void, metadata?: M) => void;\n\n  /**\n   * Called when the component enters for the first time and all the enter transitions are over.\n   */\n  onEntered?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component exits.\n   */\n  onExit?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component exits and right after the onExit call.\n   */\n  onExiting?: (node?: Element, callback?: () => void, metadata?: M) => void;\n\n  /**\n   * Called when the component exits and all the transitions are over.\n   */\n  onExited?: (node?: Element, metadata?: M) => void;\n};\n\n/**\n * @classdesc\n * The component that acts as a layer for handing transitions.\n *\n * @ignore\n */\nexport class Transition<M = any> extends Component<TransitionProps<M>, State> {\n  private readonly _appearStatus: TransitionIntermediateStatus;\n  private _nextCallback: CancellableFunction | null;\n\n  ////////////////////////////////////////////////////////////////////////\n  // Handler functions are created as members to have them 'this' bound //\n  ////////////////////////////////////////////////////////////////////////\n\n  ///////////////////////////\n  // Handler functions end //\n  ///////////////////////////\n\n  /**\n   * Instantiates Component\n   *\n   * @param props The component properties\n   */\n  constructor(props: Readonly<TransitionProps<M>>) {\n    super(props);\n\n    let appearStatus: TransitionIntermediateStatus;\n    if (props.in) {\n      appearStatus = 'entering';\n    } else {\n      appearStatus = null;\n    }\n\n    this._appearStatus = appearStatus;\n    this.state = { status: 'exited' };\n    this._nextCallback = null;\n  }\n\n  //////////////////////////////////////\n  // Component Life Cycle Hooks Start //\n  //////////////////////////////////////\n\n  /**\n   * Lifecycle hook that gets called when the component is mounted to the DOM\n   */\n  componentDidMount() {\n    this._updateStatus(this._appearStatus);\n  }\n\n  /**\n   * Lifecycle hook that gets called after each update to the component\n   *\n   * @param prevProps The props of the component before last update\n   */\n  componentDidUpdate(prevProps: Readonly<TransitionProps<M>>) {\n    let nextStatus: TransitionIntermediateStatus = null;\n\n    if (prevProps !== this.props) {\n      const { status } = this.state;\n\n      if (this.props.in) {\n        if (status !== 'entering' && status !== 'entered') {\n          // The component is just entering, so set the next status as Entering\n          nextStatus = 'entering';\n        }\n      } else {\n        if (status === 'entering' || status === 'entered') {\n          // The component is not in the data anymore, so we need to do exit animation\n          // So, set the next status as Exiting\n          nextStatus = 'exiting';\n        }\n      }\n    }\n\n    this._updateStatus(nextStatus);\n  }\n\n  /**\n   * Lifecycle hook that gets called right before the component unmounts\n   */\n  componentWillUnmount() {\n    this._cancelNextCallback();\n  }\n\n  ////////////////////////////////////\n  // Component Life Cycle Hooks End //\n  ////////////////////////////////////\n\n  /**\n   * Renders the Transition component\n   *\n   * @param props The current props\n   * @returns The rendered component child\n   */\n  render(props?: RenderableProps<TransitionProps<M>>): ComponentChild {\n    return props?.children;\n  }\n\n  ////////////////////////////\n  // Private helper methods //\n  ////////////////////////////\n\n  /**\n   * Creates a wrapper callback function, which can be cancelled.\n   *\n   * @param callback The current callback function\n   * @returns The created cancellable callback\n   */\n  private _setNextCallback(callback: (...args: any) => void): CancellableFunction {\n    let active = true;\n\n    this._nextCallback = (...args: any[]) => {\n      if (active) {\n        active = false;\n        this._nextCallback = null;\n\n        callback(...args);\n      }\n    };\n\n    this._nextCallback.cancel = () => {\n      active = false;\n    };\n\n    return this._nextCallback;\n  }\n\n  /**\n   * Cancels the scheduled next callback\n   */\n  private _cancelNextCallback() {\n    this._nextCallback?.cancel?.();\n    this._nextCallback = null;\n  }\n\n  /**\n   * Updates the status of the component. Performs corresponding Transitions.\n   */\n  private _updateStatus(nextStatus: TransitionIntermediateStatus) {\n    if (nextStatus != null) {\n      this._cancelNextCallback();\n\n      if (nextStatus === 'entering') {\n        this._performEnter(this.base as Element); // In our component, base is always Element\n      } else {\n        this._performExit(this.base as Element); // In our component, base is always Element\n      }\n    }\n  }\n\n  /**\n   * Perform Entering transitions\n   *\n   * @param node The root DOM element of this component\n   */\n  private _performEnter(node?: Element) {\n    this.props.onEnter?.(node, this.props.metadata);\n\n    this.setState({ status: 'entering' }, () => {\n      this.props.onEntering?.(\n        node,\n        this._setNextCallback(() => {\n          this.setState({ status: 'entered' }, () => {\n            this.props.onEntered?.(node, this.props.metadata);\n          });\n        }),\n        this.props.metadata\n      );\n    });\n  }\n\n  /**\n   * Perform Exiting transitions\n   *\n   * @param node The root DOM element of this component\n   */\n  private _performExit(node?: Element) {\n    this.props.onExit?.(node, this.props.metadata);\n\n    this.setState({ status: 'exiting' }, () => {\n      this.props.onExiting?.(\n        node,\n        this._setNextCallback(() => {\n          this.setState({ status: 'exited' }, () => {\n            this.props.onExited?.(node, this.props.metadata);\n          });\n        }),\n        this.props.metadata\n      );\n    });\n  }\n}\n"],"names":["TransitionUtils","static","children","prevChildMapping","Map","onExited","TRAILING","Symbol","mappedDeletions","size","_getMappedDeletions","mergedChildrenMap","reduce","accumulator","currentChild","key","deletedChildren","previousChild","get","set","cloneElement","in","props","newChild","bind","nextChildrenKeys","Set","map","_toConsumableArray","keys","currentKey","has","trailingChildren","TransitionGroup","Component","constructor","super","this","_handleExited","child","node","metadata","getChildMapping","_b","_a","call","_mounted","setState","state","childMapping","delete","undefined","handleExited","componentDidMount","componentWillUnmount","render","WrapperComponent","elementType","values","_jsx","jsx","defaultProps","Transition","appearStatus","_appearStatus","status","_nextCallback","_updateStatus","componentDidUpdate","prevProps","nextStatus","_cancelNextCallback","_setNextCallback","callback","active","args","apply","cancel","_performEnter","base","_performExit","onEnter","onEntering","onEntered","onExit","onExiting"],"mappings":"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"}