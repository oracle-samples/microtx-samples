{"version":3,"file":"UNSAFE_arrayUtils.js","sources":["../../../src/utils/UNSAFE_arrayUtils/arrayUtils.ts"],"sourcesContent":["// If the value is an array, just return it, otherwise make a single entry array out of it and return it.\nexport const coerceArray = <T>(value: T | T[]) => (Array.isArray(value) ? value : [value]);\n\n// By default TS will infer `string[]` for an array so use this function to\n// extract string literal unions. This will automatically type your array.\n// Example:\n// const dimensions1 = [\"height\", \"width\"]; // dimensions1 type is string[].\n// const dimensions = stringLiteralArray([\"height\", \"width\"]);\n// dimensions type is (\"height\"|\"width\")[] (an array that can only have \"height\" and \"width\" in it)\nexport const stringLiteralArray = <LiteralString extends string>(xs: LiteralString[]) => xs;\n"],"names":["value","Array","isArray","xs"],"mappings":"0DAC+BA,GAAoBC,MAAMC,QAAQF,GAASA,EAAQ,CAACA,wBAQlBG,GAAwBA"}