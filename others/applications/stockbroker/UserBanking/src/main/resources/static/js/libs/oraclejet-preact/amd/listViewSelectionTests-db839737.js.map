{"version":3,"file":"listViewSelectionTests-db839737.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTests.tsx","../../src/PRIVATE_List/__tests__/shared/listViewSelectionTests.tsx"],"sourcesContent":["import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport {\n  CurrentItemVariant,\n  ItemActionDetail,\n  Metadata,\n  SelectionMode\n} from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getItems, getRoot } from './testHelpers';\n\nexport type Props<K, D> = {\n  currentItemVariant?: CurrentItemVariant;\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  gridlines?: Gridlines;\n  initialKey?: K;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number, D> = (props: Props<K, D>) => VNode;\n\nexport const testRender = (TestComponent: TestComponentProps<any, any>) => {\n  it('initial render', async function () {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect(items.length).eq(25);\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest == typeof undefined) {\n    it('initial render with sparkle', async () => {\n      const data = populateData(100) as Employee<string>[];\n      let dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // add suggestions\n      dataMetadata[3].metadata.suggestion = { enable: true };\n      dataMetadata[7].metadata.suggestion = { enable: true };\n      dataMetadata[9].metadata.suggestion = { enable: true };\n\n      const suggestions = dataMetadata.filter((d) => d.metadata.suggestion);\n      dataMetadata = dataMetadata.filter((d) => !d.metadata.suggestion);\n      dataMetadata.unshift(...suggestions);\n\n      const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n      const grid = await getRoot(list);\n      const sparkle = grid.firstElementChild?.firstElementChild?.firstElementChild as HTMLElement;\n      expect(sparkle !== undefined).eq(true);\n\n      const items = await getItems(list);\n      expect(items?.length).eq(25);\n      expect(items[0].dataset['ojSuggestion']).eq('true');\n      expect(items[1].dataset['ojSuggestion']).eq('true');\n      expect(items[2].dataset['ojSuggestion']).eq('true');\n\n      const sparkleHeight = items[0].offsetHeight + items[1].offsetHeight + items[2].offsetHeight;\n      expect(sparkleHeight).eq(sparkle.offsetHeight);\n    });\n  }\n};\n\nexport const testAria = (TestComponent: TestComponentProps<any, any>) => {\n  it('aria structure and properties (select-none)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq(null);\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria structure and properties (single-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} selectionMode=\"single\"></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('false');\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('aria structure and properties (multi-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('true');\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n};\n\nexport const testKeys = (TestComponent: TestComponentProps<any, any>) => {\n  it('supports currentKey logic with numeric key', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('supports currentKey logic with string key', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('supports currentKey logic with pointerDown', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.pointerDown(items[2]);\n    waitFor(() => {\n      expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    });\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n};\n\nexport const testGridlines = (TestComponent: TestComponentProps<any, any>) => {\n  it('gridlines - gridlines are hidden', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(2);\n    expect((items[1] as HTMLElement).classList.length).eq(2);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n  });\n\n  it('gridlines - bottom gridlines are visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visible = { item: 'visible' as const, bottom: 'visible' as const };\n    const list = render(<TestComponent data={dataMetadata} gridlines={visible}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(3);\n    expect((items[1] as HTMLElement).classList.length).eq(3);\n    expect((items[2] as HTMLElement).classList.length).eq(3);\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleExceptLast = { item: 'visible' as const };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleExceptLast}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(3);\n    expect((items[1] as HTMLElement).classList.length).eq(3);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n  });\n\n  it('gridlines - bottom gridlines are visible; The top gridlines of the first list item is visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirst = {\n      item: 'visible' as const,\n      top: 'visible' as const,\n      bottom: 'visible' as const\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirst}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(4);\n    expect((items[1] as HTMLElement).classList.length).eq(3);\n    expect((items[2] as HTMLElement).classList.length).eq(3);\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item. The top gridlines of the first list item is visible.', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirstButNotLast = { item: 'visible' as const, top: 'visible' as const };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirstButNotLast}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(4);\n    expect((items[1] as HTMLElement).classList.length).eq(3);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n  });\n};\n\nexport const testItemAction = (TestComponent: TestComponentProps<any, any>) => {\n  it('ItemAction - test click on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 0) {\n        expect(detail.reason, 'Reason is click').eq('click');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 1) {\n        expect(detail.reason, 'Reason is click').eq('click');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.reason, 'Reason is click').eq('click');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n    );\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[1]);\n    fireEvent.click(items[1]);\n    fireEvent.click(items[2]);\n    expect(count).eq(3);\n  });\n\n  it('ItemAction - test press enter on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.reason, 'Reason is enter').eq('enter');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.reason, 'Reason is enter').eq('enter');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 3) {\n        expect(detail.reason, 'Reason is enter').eq('enter');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n    );\n    const grid = await getRoot(list);\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: 'Enter' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.reason, 'Reason is spacebar').eq('spacebar');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.reason, 'Reason is spacebar').eq('spacebar');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 3) {\n        expect(detail.reason, 'Reason is spacebar').eq('spacebar');\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n    );\n    const grid = await getRoot(list);\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: ' ' });\n    expect(count).eq(4);\n  });\n\n  it('currentItemVariant - highlight', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"highlight\"></TestComponent>\n    );\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(2);\n    expect((items[1] as HTMLElement).classList.length).eq(3);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n\n    fireEvent.click(items[0]);\n    expect((items[0] as HTMLElement).classList.length).eq(3);\n    expect((items[1] as HTMLElement).classList.length).eq(2);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n  });\n\n  it('currentItemVariant - none', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"none\"></TestComponent>\n    );\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).classList.length).eq(2);\n    expect((items[1] as HTMLElement).classList.length).eq(2);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n\n    fireEvent.click(items[0]);\n    expect((items[0] as HTMLElement).classList.length).eq(2);\n    expect((items[1] as HTMLElement).classList.length).eq(2);\n    expect((items[2] as HTMLElement).classList.length).eq(2);\n  });\n};\n","import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata, SelectionMode } from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getRoot, mouseCheckboxSelection, mouseItemSelection } from './testHelpers';\n\ntype Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  gridlines?: Gridlines;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testSelection = (TestComponent: TestComponentProps<any>) => {\n  it('select single - numeric key', async () => {\n    const data = populateData(10, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        selectionMode=\"single\"\n        onClick={() => {\n          expect(false, 'Click event should not propagate').to.be.true;\n        }}></TestComponent>\n    );\n    const items = await getContents(list);\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[5]);\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[7]);\n    await waitFor(() => {\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('select multiple items using shift click', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    // console.log('here');\n    // console.log(list.debug());\n    await waitFor(() => {\n      expect(items[1].getAttribute('aria-selected')).eq('false');\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items using shift space bar', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects multiple items when clicking on Selector checkboxes', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseCheckboxSelection(items[2]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n    });\n    mouseCheckboxSelection(items[4]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('correctly modifies range selection when using SPACE to select', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n\n    // keyboard select to \"toggle\" one item off\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n\n    // keyboard select again to \"replace\" with single selection only\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects single items using space keypress', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('selects single items using enter keypress', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('select multiple items then click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('false');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then shift click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then metaKey click on a selected items, to select and unselect', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // first click to deselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('false');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // second click to reselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // click outside of range should be additive too\n    mouseItemSelection(items[7], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('supports multi-select (and deselect) via keyboard arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot(list);\n    const items = await getContents(list);\n\n    // select items 1-3\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n\n    // deselect 2 and 3 via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // continue up past initial anchor, to select items 0 and 1\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports extending mouse initiated range select via arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot(list);\n    const items = await getContents(list);\n\n    // select items 2-5 via click\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n\n    // now extend by two more rows\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('true');\n    expect(items[7].getAttribute('aria-selected')).eq('true');\n\n    // now deselect those via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","list","render","_jsx","grid","getRoot","expect","getAttribute","eq","items","getItems","length","cells","getContents","jsx","selectionMode","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","RootEnvironmentProvider","Object","assign","environment","children","classList","gridlines","item","bottom","top","count","onItemAction","detail","reason","context","fireEvent","click","keyDown","initialKey","currentItemVariant","hasAttribute","pointerDown","waitFor","undefined","dataset","jest","_dataMetadata","suggestion","enable","suggestions","filter","d","unshift","apply","_toConsumableArray","sparkle","_b","_a","firstElementChild","sparkleHeight","offsetHeight","onClick","to","be","true","mouseItemSelection","shiftKey","__variableDynamicImportRuntime1__","keyUp","__variableDynamicImportRuntime2__","mouseCheckboxSelection","__variableDynamicImportRuntime3__","__variableDynamicImportRuntime4__","__variableDynamicImportRuntime5__","__variableDynamicImportRuntime6__","__variableDynamicImportRuntime7__","__variableDynamicImportRuntime8__","metaKey","__variableDynamicImportRuntime9__","__variableDynamicImportRuntime10__"],"mappings":"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"}