{"version":3,"file":"listViewTestFixtures-3c2de34f.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTestFixtures.ts","../../test/mocks/mockIntersectionObserver.ts"],"sourcesContent":["/**\n * Employees data fixtures shared by all ListView tests\n */\n\nexport type Employee<K> = {\n  id: K;\n  name: string;\n};\n\nexport function populateData(\n  count: number,\n  isNumberKey?: boolean\n): Employee<string>[] | Employee<number>[] {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    if (isNumberKey) {\n      data.push({ id: i, name: 'Employee ' + i });\n    } else {\n      data.push({ id: 'i' + i, name: 'Employee ' + i });\n    }\n  }\n  return isNumberKey ? (data as Employee<number>[]) : (data as Employee<string>[]);\n}\n","/**\n * Utility function that mocks the `IntersectionObserver` API. Necessary for components that rely\n * on it, otherwise the tests will crash.\n *\n * Recommended to execute inside `beforeEach`.\n */\n\nexport const setupIntersectionObserverMock = () => {\n  // IntersectionObserver isn't available in test environment\n  const MockIntersectionObserver = jest.fn();\n  MockIntersectionObserver.mockReturnValue({\n    observe: () => null,\n    unobserve: () => null,\n    disconnect: () => null\n  });\n\n  Object.defineProperty(global, 'IntersectionObserver', {\n    writable: true,\n    configurable: true,\n    value: MockIntersectionObserver\n  });\n};\n"],"names":["count","isNumberKey","data","i","push","id","name","MockIntersectionObserver","jest","fn","mockReturnValue","observe","unobserve","disconnect","Object","defineProperty","global","writable","configurable","value"],"mappings":"2DASgB,SACdA,EACAC,GAEA,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOG,IACrBF,EACFC,EAAKE,KAAK,CAAEC,GAAIF,EAAGG,KAAM,YAAcH,IAEvCD,EAAKE,KAAK,CAAEC,GAAI,IAAMF,EAAGG,KAAM,YAAcH,IAGjD,OAAsBD,mCCdqB,KAE3C,MAAMK,EAA2BC,KAAKC,KACtCF,EAAyBG,gBAAgB,CACvCC,QAAS,IAAM,KACfC,UAAW,IAAM,KACjBC,WAAY,IAAM,OAGpBC,OAAOC,eAAeC,OAAQ,uBAAwB,CACpDC,UAAU,EACVC,cAAc,EACdC,MAAOZ"}