{"version":3,"file":"UNSAFE_InputPassword.js","sources":["../../src/UNSAFE_InputPassword/RevealToggleIcon.tsx","../../src/UNSAFE_InputPassword/InputPassword.tsx"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { ViewHideIcon, ViewIcon } from '../UNSAFE_ThemedIcons';\n\ntype RevealToogleIconProps = {\n  onPress: (event: Event) => void;\n  isRevealed?: boolean;\n};\n\n// TODO: This was copied from ClearIcon. When we have a preact <Button> component we\n// will need to refactor to use that.\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n\nconst revealToggleIconStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor,\n    borderColor: 'transparent',\n    backgroundColor: 'transparent',\n\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight,\n    fontSize: ojButtonIconSize,\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`\n};\n\nexport function RevealToggleIcon({ isRevealed, onPress }: RevealToogleIconProps) {\n  const { pressProps } = usePress(onPress);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // title attribute. We removed these because title is taking precedence over aria-label and this\n  // is messing up the screen readers. To be accessible we are removing title and will implement\n  // this as a <Tooltip> component when we have one.\n  // TODO JET-51517 implement reveal icon title as a Tooltip\n  // const hidePasswordStr = translations.inputPassword_hide();\n  // const showPasswordStr = translations.inputPassword_show();\n  const passwordMaskedStr = translations.inputPassword_hidden();\n  // TODO: Use toggle <Button> when that is available, JET-49207\n  return (\n    <button\n      aria-label={passwordMaskedStr}\n      role=\"switch\"\n      aria-checked={isRevealed ? false : true}\n      class={revealToggleIconStyles.base}\n      tabIndex={0}\n      {...pressProps}>\n      {isRevealed ? <ViewHideIcon /> : <ViewIcon />}\n    </button>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from './RevealToggleIcon';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '../UNSAFE_InputText/ClearIcon';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n  /**\n   * Specifies whether the reveal toggle should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The reveal toggle is always visible and the user can click on it to reveal the password in plain text.\n   * When the user leaves the field, the password is automatically masked.</li>\n   * <li><code>'never'</code>: The reveal toggle is never visible and the user can never reveal the password in plain text.</li>\n   * </ul>\n   */\n  hasRevealToggle?: 'always' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field. If the labelEdge is 'none',\n   * the labelHint is hidden from the user but is still accessible.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\n// One way InputPassword differs from InputText is InputPassword's readonly\n// is implemented with an <input> and not a <div>.\nexport const InputPassword = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      hasClearIcon,\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLInputElement\n    >({ isDisabled, isReadonly, ref, onBlurWithin: setRevealedFalse });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal buttton,\n    // toggle revealing/masking password\n    const onRevealIconPress = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed]);\n\n    const revealToggleIcon =\n      !isDisabled && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon onPress={onRevealIconPress} isRevealed={isRevealed} />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInput, value]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"input\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              type=\"password\"\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <TextFieldInput\n        ariaLabel={ariaLabel}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        currentCommitValue={currentCommitValue}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        onInput={onInputAndDispatch}\n        onCommit={onCommitAndDispatch}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        value={value}\n        type={isRevealed ? 'text' : 'password'}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["revealToggleIconStyles","RevealToggleIcon","isRevealed","onPress","passwordMaskedStr","useTranslationBundle","inputPassword_hidden","InputPassword","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","hasClearIcon","hasRevealToggle","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","bool","setFalse","setRevealedFalse","setTrue","setRevealedTrue","useToggle","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","onBlurWithin","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onRevealIconPress","revealToggleIcon","_jsx","onClickClearIcon","_a","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","labelComp","Label","Object","assign","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","FormFieldContext","Provider","children","ReadonlyTextField","role","ReadonlyTextFieldInput","ariaLabelledBy","id","as","elementRef","hasInsideLabel","mainContent","TextFieldInput","inputRef","TextField","endContent","onBlur","onfocusout","onFocus","onfocusin"],"mappings":"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"}