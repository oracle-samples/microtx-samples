{"version":3,"file":"UNSAFE_LabelValueLayout.js","sources":["../../src/UNSAFE_LabelValueLayout/LabelValueLayout.tsx"],"sourcesContent":["import { classNames } from '../utils/UNSAFE_classNames';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, JSX } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { sizeToCSS, Size } from '../utils/UNSAFE_size';\n\nconst labelSlotStyles = {\n  base: cssProps`${{\n    display: 'block',\n    flexGrow: '0',\n    flexShrink: '1',\n    boxSizing: 'border-box'\n  }}`,\n  start: cssProps`${{\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-form-layout-start-edge-label-to-value-padding)'\n  }}`,\n\n  top: cssProps`${{\n    flexBasis: '100%',\n    width: '100%',\n    maxWidth: '100%',\n    paddingBlockEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-form-layout-top-edge-label-to-value-padding)'\n  }}`,\n\n  topPureReadonly: cssProps`${{\n    paddingBlockEnd: 0\n  }}`\n};\n\nconst labelInnerStyles = {\n  // base is labelEdge 'top'\n  base: cssProps`${{\n    display: 'block',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-label-color)',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-label-font-size)',\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-label-line-height)',\n    width: '100%'\n  }}`,\n  start: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center'\n  }}`,\n  startNotPureReadonly: cssProps`${{\n    minHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height)'\n  }}`,\n  // TODO: Use Text Component instead of CSS\n  noWrap: cssProps`${{\n    whiteSpace: 'nowrap',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    textOverflow: 'ellipsis'\n  }}`\n};\n\nconst valueSlotStyles = cssProps`${{\n  flex: '1 1 100%',\n  width: '100%',\n  maxWidth: '100%'\n}}`;\n\ntype Props = {\n  /**\n   * Label content of the layout\n   */\n  label?: ComponentChildren;\n  /**\n   * Defines how the label is going to be positioned\n   */\n  labelEdge?: 'start' | 'top';\n  /**\n   * Defines the label width for labelEdge 'start' ('top' is always 100%)\n   */\n  labelStartWidth?: Size;\n  /**\n   * Value content of the layout\n   */\n  children: ComponentChildren;\n};\n\nexport const LabelValueLayout = ({\n  label,\n  labelEdge,\n  children,\n  labelStartWidth = '33%'\n}: Props) => {\n  const width = sizeToCSS(labelStartWidth);\n  const valueWidth = `calc(100% - ${width})`;\n  const labelStyles: JSX.CSSProperties =\n    labelEdge === 'start' ? { flexBasis: width, width: width, maxWidth: width } : {};\n  const valueStyles: JSX.CSSProperties =\n    labelEdge === 'start' ? { flexBasis: valueWidth, width: valueWidth, maxWidth: valueWidth } : {};\n\n  const { isFormLayout, isReadonly: isFormReadonly, labelWrapping } = useFormContext();\n  const { isReadonly } = useFormFieldContext();\n  const isPureReadonly = (isFormLayout && isFormReadonly) || (!isFormLayout && isReadonly);\n  const labelStyleClasses = classNames([\n    labelSlotStyles.base,\n    labelEdge === 'start' && labelSlotStyles.start,\n    // labelEdge === 'start' && isPureReadonly && labelSlotStyles.startReadonly,\n    // labelEdge === 'start' && !isPureReadonly && labelSlotStyles.startNotPureReadonly,\n    labelEdge === 'top' && labelSlotStyles.top,\n    labelEdge === 'top' && isPureReadonly && labelSlotStyles.topPureReadonly\n  ]);\n  const labelInnerClasses = classNames([\n    labelInnerStyles.base,\n    labelEdge === 'start' && labelInnerStyles.start,\n    labelEdge === 'start' && !isPureReadonly && labelInnerStyles.startNotPureReadonly,\n    labelWrapping === 'truncate' && labelInnerStyles.noWrap\n  ]);\n\n  return (\n    <Flex wrap=\"wrap\" align=\"start\">\n      <div class={labelStyleClasses} style={labelStyles}>\n        <div class={labelInnerClasses}>{label}</div>\n      </div>\n      <div class={valueSlotStyles} style={valueStyles}>\n        {children}\n      </div>\n    </Flex>\n  );\n};\n"],"names":["labelSlotStyles","labelInnerStyles","label","labelEdge","children","labelStartWidth","width","sizeToCSS","valueWidth","isFormLayout","isReadonly","isFormReadonly","labelWrapping","useFormContext","useFormFieldContext","isPureReadonly","_jsxs","Flex","Object","assign","wrap","align","_jsx","jsx","class","labelStyleClasses","style","labelStyles","labelInnerClasses","valueStyles"],"mappings":"qtBAQA,MAAAA,EAAA,WAAAA,EAAA,SAAAA,EAAA,WAAAA,aAuBAC,EAAA,WAAAA,EAAA,WAAAA,EAAA,SAAAA,gCAkDA,EAAAC,MAAAA,EAAAC,UAAAA,EAAAC,SAAAA,EAAAC,gBAAAA,EAAA,UAME,MAAAC,EAAAC,YAAAF,GACAG,EAAAF,eAAAA,0GAMAG,aAAAA,EAAAC,WAAAC,EAAAC,cAAAA,GAAAC,EAAAA,kBACAH,WAAAA,GAAAI,EAAAA,sBACAC,EAAAN,GAAAE,IAAAF,GAAAC,kBAEEV,EACA,UAAAG,GAAAH,EAGA,QAAAG,GAAAH,EACA,QAAAG,GAAAY,GAAAf,oBAGAC,EACA,UAAAE,GAAAF,qBAEA,aAAAW,GAAAX,IAGF,OAAAe,OAAAC,EAAAA,KAAAC,OAAAC,OAAA,CAAAC,KAAA,OAAAC,MAAA,SAAA,CAAAjB,SAAA,CAAAkB,EAAAC,IAAA,MAAAL,OAAAC,OAAA,CAAAK,MAAAC,EAAAC,MAAAC,GAAA,CAAAvB,SAAAkB,EAAAC,IAAA,MAAAL,OAAAC,OAAA,CAAAK,MAAAI,GAAA,CAAAxB,SAAAF,QAAAoB,EAAAC,IAAA,MAAAL,OAAAC,OAAA,CAAAK,MAxDF,UAwDEE,MAAAG,GAAA,CAAAzB,SAAAA"}