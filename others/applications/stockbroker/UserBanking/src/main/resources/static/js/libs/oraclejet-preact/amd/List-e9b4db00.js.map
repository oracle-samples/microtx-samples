{"version":3,"file":"List-e9b4db00.js","sources":["../../src/PRIVATE_List/ListRoles.ts","../../src/PRIVATE_List/ListItem.tsx","../../src/PRIVATE_List/SkeletonContainer.tsx","../../src/PRIVATE_List/List.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Roles } from '../UNSAFE_ListView';\n\n/**\n * List Roles need to be kept in matching sets, this module encapsulates the sets\n *\n * @param ariaRole\n * @returns matching, valid set of roles\n */\n\nconst getListViewRoles = (ariaRole: Roles) => {\n  switch (ariaRole) {\n    case 'listbox':\n      return { list: 'listbox', item: 'presentation', cell: 'option' };\n    case 'treegrid':\n      return { list: 'treegrid', item: 'row', cell: 'gridcell' };\n    default:\n      return { list: 'grid', item: 'row', cell: 'gridcell' };\n  }\n};\n\nexport { getListViewRoles };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useRef, useMemo } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { SelectionMode, CurrentItemVariant } from '../UNSAFE_Collection';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { Roles } from '../UNSAFE_ListView';\nimport { getListViewRoles } from './ListRoles';\n\n// default style class for items in ListView\nexport const ITEM_STYLE_CLASS = 'oj-listview-item';\nexport const ITEM_SELECTOR = '.' + ITEM_STYLE_CLASS;\n\nconst styles = {\n  base: cssProps`${{\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: 'var(--oj-collection-list-row-height)',\n    boxSizing: 'border-box',\n    backgroundImage:\n      'linear-gradient(var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color),var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color))',\n    backgroundSize: 0,\n    backgroundPosition: '0 100%',\n    backgroundRepeat: 'no-repeat',\n    borderTop: '1px solid transparent'\n  }}`,\n  gridlines: cssProps`${{\n    backgroundSize: '100% 1px'\n  }}`,\n  gridlineTop: cssProps`${{\n    backgroundImage: `linear-gradient(var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color),var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)),\n      linear-gradient(var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color),var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color))`,\n    backgroundPosition: '0 100%, 0 -1px',\n    backgroundSize: '100% 1px, 100% 1px'\n  }}`,\n  selectable: cssProps`${{\n    '&:hover': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover);'\n    }\n  }}`,\n  selected: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-selected)'\n  }}`,\n  selectedSingle: cssProps`${{\n    borderTop: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-border-color-selected)',\n    boxShadow: 'inset 0 -1px var(--oj-c-PRIVATE-DO-NOT-USE-core-border-color-selected)'\n  }}`,\n  suggestionEnd: cssProps`${{\n    backgroundSize: '100% 1px'\n  }}`,\n  highlight: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover);'\n  }}`,\n  focused: cssProps`${{\n    outlineStyle: 'dotted',\n    outlineWidth: '1px',\n    outlineColor: 'var(---oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n    outlineOffset: '-1px'\n  }}`\n};\n\nconst cellStyles = {\n  base: cssProps`${{\n    flexGrow: '1'\n  }}`,\n  checkboxContainer: cssProps`${{\n    display: 'flex'\n  }}`\n};\n\n/**\n * Props for the ListViewItem Component\n */\nexport type Props<K> = {\n  children: ComponentChildren;\n  itemKey: K;\n  itemIndex: number;\n  isFocused: boolean;\n  isFocusRingVisible: boolean;\n  isGridlineVisible: boolean;\n  isSelected: boolean;\n  isTopGridlineVisible?: boolean;\n  isTabbable?: boolean;\n  role: Roles;\n  selectionMode: SelectionMode;\n  suggestion?: 'end' | true;\n  currentItemVariant?: CurrentItemVariant;\n};\n\n/**\n * The internal component used to render a single item in ListView.\n */\nexport function ListViewItem<K extends string | number>({\n  children,\n  itemKey,\n  itemIndex,\n  isFocused,\n  isFocusRingVisible,\n  isGridlineVisible,\n  isSelected,\n  isTopGridlineVisible = false,\n  isTabbable = false,\n  role,\n  selectionMode,\n  suggestion,\n  currentItemVariant\n}: Props<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  const roles = useMemo(() => getListViewRoles(role), [role]);\n\n  // some roles come with related aria attributes which need to be set\n  const cellRoleAttributes =\n    roles.cell === 'option'\n      ? {\n          role: roles.cell,\n          'aria-posinset': itemIndex + 1,\n          'aria-setsize': -1\n        }\n      : {\n          role: roles.cell\n        };\n\n  // don't bubble Arrow Up and Down events to parent when in isTabbable mode\n  // this bubbling causes the outer CollectionFocus ring to change index while in the isTabbable mode.\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (isTabbable && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n      event.stopPropagation();\n    }\n  };\n\n  const classes = classNames([\n    styles.base,\n    ITEM_STYLE_CLASS,\n    isFocused && isFocusRingVisible && styles.focused,\n    isGridlineVisible && styles.gridlines,\n    isTopGridlineVisible && styles.gridlineTop,\n    isSelectable(selectionMode, isSelected) && !isSelected && styles.selectable,\n    isSelected && styles.selected,\n    isSelected && selectionMode === 'single' && styles.selectedSingle,\n    suggestion === 'end' &&\n      !isGridlineVisible &&\n      !(isSelected && selectionMode === 'single') &&\n      styles.suggestionEnd,\n    currentItemVariant === 'highlight' && isFocused && !isSelected && styles.highlight\n  ]);\n\n  const cellClasses = classNames([\n    cellStyles.base,\n    selectionMode === 'multiple' && cellStyles.checkboxContainer\n  ]);\n\n  // todo: use translated text for selector\n  // note cannot put focus on gridcell div since JAWS will not read the aria-rowindex\n  // correctly, so unfortunately needed another div\n  return (\n    <div\n      aria-rowindex={itemIndex + 1}\n      data-oj-key={itemKey}\n      class={classes}\n      ref={rootRef}\n      role={roles.item}\n      {...(suggestion && { 'data-oj-suggestion': true })}\n      {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}>\n      <div\n        id={useId()}\n        class={cellClasses}\n        aria-posinset={itemIndex + 1}\n        aria-setsize={-1}\n        onKeyDown={handleKeyDown}\n        aria-colindex={1}\n        aria-selected={selectionMode !== 'none' ? isSelected : undefined}\n        {...cellRoleAttributes}>\n        <TabbableModeContext.Provider value={{ isTabbable }}>\n          <FocusTrap isDisabled={!isTabbable} restoreFocusRef={false}>\n            {children}\n          </FocusTrap>\n        </TabbableModeContext.Provider>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Helper method to determine whether item is selectable\n * @returns true if item is selectable (show hover effect), false otherwise\n */\nconst isSelectable = (selectionMode: SelectionMode, isItemSelected: boolean) => {\n  return selectionMode !== 'none' && (selectionMode === 'multiple' || !isItemSelected);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  /**\n   * Allows to pass and access the properties from child elements\n   **/\n  children?: (index: number) => ComponentChildren;\n  /**\n   * Allows to specify number of skeletons to be rendered on initial load\n   **/\n  minimumCount?: number;\n};\n\nconst containerStyle = {\n  base: cssProps`${{\n    height: '100%',\n    overflowX: 'hidden',\n    overflowY: 'hidden'\n  }}`\n};\n\n/**\n * Allows to specify the time delay for rendering the component\n **/\nconst timerValue = 50;\n\n/**\n * SkeletonContainer renders 'minimumCount' number of skeletons\n * of the variant specified from its child element - Skeleton's prop after\n * 'timerValue' ms delay\n **/\nexport function SkeletonContainer({ children, minimumCount = 1 }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsVisible(true);\n    }, timerValue);\n  }, []);\n\n  const containerClasses = classNames([containerStyle.base]);\n  return isVisible && children ? (\n    <div class={containerClasses} role=\"presentation\">\n      {[...Array(minimumCount)].map((_element, index) => children(index))}\n    </div>\n  ) : null;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject } from 'preact';\nimport { useRef, useCallback, useEffect, useState, useMemo } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { containsKey, Keys, isKeyDefined } from '../utils/UNSAFE_keys';\nimport { DataState, ItemContext, Metadata, Range, SelectionDetail } from '../UNSAFE_Collection';\nimport { LoadMoreCollection } from '../UNSAFE_LoadMoreCollection/LoadMoreCollection';\nimport { VirtualizedCollection, PLACEHOLDER_STYLE_CLASS } from '../PRIVATE_VirtualizedCollection';\nimport { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\nimport { ListViewItem, ITEM_SELECTOR } from './ListItem';\nimport { SelectionRangeDetail, useSelection } from '../hooks/PRIVATE_useSelection';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useTabbableModeSet } from '../hooks/PRIVATE_useTabbableModeSet';\nimport { useItemAction } from '../hooks/PRIVATE_useItemAction';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Flex } from '../UNSAFE_Flex';\nimport {\n  getFirstVisibleKey,\n  getPrevNextKey,\n  findElementByKey,\n  keyExtractor\n} from '../utils/PRIVATE_collectionUtils';\nimport { Selector } from '../UNSAFE_Selector';\nimport { Props } from '../UNSAFE_ListView';\nimport { getListViewRoles } from './ListRoles';\n\nconst styles = {\n  base: cssProps`${{\n    height: '100%',\n    userSelect: 'none',\n    overflowY: 'inherit',\n    '&:focus': {\n      outlineStyle: 'none'\n    }\n  }}`\n};\n\nconst sparkleStyles = {\n  base: cssProps`${{\n    position: 'absolute',\n    top: 0,\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)',\n    zIndex: 1,\n    display: 'block',\n    backgroundImage: 'var(--oj-c-PRIVATE-DO-NOT-USE-collection-sparkle-img)',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100% 100%'\n  }}`,\n  container: cssProps`${{\n    position: 'relative'\n  }}`\n};\n\n/**\n * Component that renders items as a flat list.\n * In order to maximize performance, only items that are visible in the viewport are rendered.\n */\nexport function List<K extends string | number, D>({\n  accessibleSummary,\n  allowTabbableMode = true,\n  children,\n  currentKey,\n  data,\n  gridlines,\n  loadingIndicator = defaultLoadingIndicator,\n  onCurrentKeyChange,\n  onLoadRange,\n  onSelectionChange,\n  onItemAction,\n  rangeExtractor,\n  role = 'grid',\n  selectedKeys = emptyKeys as Keys<K>,\n  selectionMode = 'none',\n  viewportConfig,\n  currentItemVariant = 'none',\n  isVirtualized = true\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const listRoles = useMemo(() => getListViewRoles(role), [role]);\n\n  // tracking the anchor key which is used for shift+click selection\n  const anchorKey = useRef<K | undefined>();\n\n  // tracking pending selection/current key that is not in current data\n  const pendingSelection = useRef<{ detail: SelectionRangeDetail<K>; range: Range }>();\n  const pendingCurrentKey = useRef<K>();\n\n  // tracking sparkle height\n  const [sparkleHeight, setSparkleHeight] = useState<number>(0);\n\n  const showGridline = (index: number) => {\n    // show bottom gridlines for each item, and for the last item if specified\n    return (\n      gridlines?.item === 'visible' &&\n      (index + 1 !== data?.totalSize || gridlines?.bottom === 'visible')\n    );\n  };\n\n  const showGridlineTop = () => {\n    // show the top gridline for the first item\n    return gridlines?.item === 'visible' && gridlines?.top === 'visible';\n  };\n\n  const ariaMultiSelectable = selectionMode === 'none' ? undefined : selectionMode === 'multiple';\n  const ariaRowCount =\n    data === null ? undefined : data.sizePrecision === 'exact' ? data.totalSize : -1;\n\n  const classes = classNames([styles.base]);\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    getPrevNextKey(rootRef.current, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKey(rootRef.current, currentKey, false, ITEM_SELECTOR),\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const listViewContains = (elem: Element | null) => {\n    return !!rootRef.current?.contains(elem);\n  };\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(listViewContains, [\n    'ArrowUp',\n    'ArrowDown'\n  ]);\n\n  let pendingFocusRingChange = false;\n  const [isCurrentTabbableKey, tabbableModeProps] = useTabbableModeSet(\n    listViewContains,\n    (element) => keyExtractor(element, ITEM_SELECTOR) as K,\n    currentKey,\n    // handle clean-up on disabling of the mode\n    (target: EventTarget | null, isKeyboardEvent) => {\n      if (target === null || listViewContains(target as Element)) {\n        // delay focus reset for keyboard disable so focus is reset to ListView after the FocusTrap blur lifecycle completes.\n        // pointer initiated changes will fire the onBlur organically and delaying the focus, just generates an unwanted second blur\n        if (isKeyboardEvent) {\n          // do not show a focus ring during this timeOut\n          pendingFocusRingChange = true;\n          setTimeout(() => {\n            rootRef.current?.focus();\n          }, 0);\n        } else {\n          rootRef.current?.focus();\n        }\n      }\n    },\n    // set currentKey when mode is enabled\n    (key: K) => {\n      onCurrentKeyChange && onCurrentKeyChange({ value: key });\n    }\n  );\n\n  useEffect(() => {\n    if (currentKey != null && rootRef.current) {\n      const elem = findElementByKey(rootRef.current, currentKey, ITEM_SELECTOR);\n      if (elem) {\n        const scroller = viewportConfig?.scroller();\n        // make sure item is visible\n        scrollToVisible(elem, scroller != null ? scroller : rootRef.current);\n        const cell = elem.querySelector(`[role=${listRoles.cell}]`);\n        // update aria-activedescendant for screenreader\n        if (cell) {\n          rootRef.current.setAttribute('aria-activedescendant', cell.id);\n        }\n      }\n    }\n    // listen to data because the current item would re-render when the virtualizer\n    // is fetching data or updating the data, i.e. the id of current item would be updated,\n    // so the currentKey itself couldn't guarantee the root has latest aria-activedescendant\n  }, [currentKey, data, listRoles.cell, viewportConfig]);\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange) {\n        if (detail.value.all === false && detail.value.keys.size > 0) {\n          // the last key selected by a user gesture is the anchor key\n          anchorKey.current = Array.from(detail.value.keys.values()).pop();\n        }\n        onSelectionChange(detail);\n      }\n    },\n    [anchorKey, onSelectionChange]\n  );\n\n  const handleSelectionRangeChange = useCallback(\n    (detail: SelectionRangeDetail<K>) => {\n      if (data && onSelectionChange) {\n        const value = handleSelectionRange(detail, data);\n        if (Array.isArray(value)) {\n          onSelectionChange({ value: { all: false, keys: new Set(value) }, target: null });\n        } else {\n          pendingSelection.current = {\n            detail: detail,\n            range: { offset: data.offset, count: data.data.length }\n          };\n          onLoadRange(value);\n        }\n      }\n    },\n    [data, onSelectionChange, onLoadRange]\n  );\n\n  const handleInitialFocus = useCallback(() => {\n    if (\n      rootRef.current &&\n      onCurrentKeyChange &&\n      (!allowTabbableMode || isCurrentTabbableKey(undefined))\n    ) {\n      const firstKey =\n        pendingCurrentKey.current || (getFirstVisibleKey(rootRef.current, ITEM_SELECTOR) as K);\n      if (isKeyDefined(firstKey)) {\n        onCurrentKeyChange({ value: firstKey });\n      }\n    }\n  }, [allowTabbableMode, onCurrentKeyChange, isCurrentTabbableKey]);\n\n  /**\n   * Used by allowTabbableMode = false, to prevent focus from getting onto checkboxes on click\n   * @param event\n   */\n  const handleSelectorFocusCapture = useCallback(\n    (event: FocusEvent) => {\n      const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n      if (key && (event.relatedTarget as HTMLElement)?.getAttribute('type') === 'checkbox') {\n        rootRef.current?.focus();\n        if (onCurrentKeyChange && key) {\n          onCurrentKeyChange({ value: key as K });\n        }\n      }\n    },\n    [onCurrentKeyChange]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent) => {\n      !isKeyDefined(currentKey) && onCurrentKeyChange && handleInitialFocus();\n      !allowTabbableMode && handleSelectorFocusCapture(event);\n    },\n    [\n      allowTabbableMode,\n      currentKey,\n      handleInitialFocus,\n      handleSelectorFocusCapture,\n      onCurrentKeyChange\n    ]\n  );\n\n  const { selectionProps } = useSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    selectionMode,\n    false,\n    'replace',\n    handleSelectionChange,\n    anchorKey.current,\n    currentKey,\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    (key: K) => {\n      if (rootRef.current) {\n        const elem = findElementByKey(rootRef.current, key, ITEM_SELECTOR);\n        if (elem) {\n          const scroller = viewportConfig?.scroller();\n          scrollToVisible(elem, scroller != null ? scroller : rootRef.current);\n        }\n      }\n    },\n    handleSelectionRangeChange\n  );\n\n  if (data && pendingSelection.current !== undefined && onSelectionChange) {\n    const keys = handleSelectionRange(pendingSelection.current.detail, data);\n    if (Array.isArray(keys)) {\n      onSelectionChange({ value: { all: false, keys: new Set(keys) }, target: null });\n    }\n    const range = pendingSelection.current\n      ? pendingSelection.current.range\n      : { offset: data.offset, count: data.data.length };\n    data = adjustDataState(data, range);\n    pendingSelection.current = undefined;\n    onLoadRange(range);\n  }\n\n  const suggestions = useMemo(() => findSuggestions(data), [data]);\n\n  // TODO: check suggestions before Sparkle would cause a scrolling issue\n  const sparkleIndicator = <Sparkle sparkleHeight={sparkleHeight}></Sparkle>;\n\n  const itemActionProps = useItemAction(currentKey, data, onItemAction, ITEM_SELECTOR);\n\n  useEffect(() => {\n    // update sparkleHeight only when we have suggestions\n    // avoid unnecessary iterating through elements\n    if (suggestions) {\n      const placeholder = rootRef.current?.querySelector(\n        '.' + PLACEHOLDER_STYLE_CLASS\n      ) as HTMLElement;\n      let height = placeholder?.offsetHeight || 0;\n      const suggestionItems = rootRef.current?.querySelectorAll('[data-oj-suggestion]');\n      suggestionItems?.forEach((item) => (height += (item as HTMLElement).offsetHeight));\n      setSparkleHeight(height);\n    }\n  }, [suggestions]);\n\n  // returns an ListItemContext based on ItemContext (added metadata and selector)\n  const getItemContext = useCallback(\n    (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n      const selectorRenderer =\n        selectionMode === 'multiple'\n          ? () => (\n              <Selector\n                onChange={handleSelectionChange}\n                rowKey={context.data.metadata.key}\n                selectedKeys={selectedKeys}></Selector>\n            )\n          : undefined;\n\n      return {\n        index: context.index,\n        data: context.data.data,\n        metadata: context.data.metadata,\n        selector: selectorRenderer\n      };\n    },\n    [selectionMode, selectedKeys, handleSelectionChange]\n  );\n\n  const childrenComponent = (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n    const listItemContext = getItemContext(context);\n    const suggestion = suggestions?.get(listItemContext.metadata.key);\n    const isTabbable = allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key);\n    const isFocused = currentKey === listItemContext.metadata.key && !isTabbable;\n    const isSelected = containsKey(selectedKeys, listItemContext.metadata.key);\n    return (\n      <ListViewItem\n        key={listItemContext.metadata.key}\n        isFocused={isFocused}\n        isFocusRingVisible={showFocusRing && !pendingFocusRingChange}\n        isGridlineVisible={showGridline(listItemContext.index)}\n        isSelected={isSelected}\n        isTabbable={allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key)}\n        itemIndex={listItemContext.index}\n        itemKey={listItemContext.metadata.key}\n        role={role}\n        selectionMode={selectionMode}\n        currentItemVariant={currentItemVariant}\n        {...(suggestion && { suggestion })}\n        {...(listItemContext.index === 0 && { isTopGridlineVisible: showGridlineTop() })}>\n        {children(listItemContext)}\n      </ListViewItem>\n    );\n  };\n\n  viewportConfig = getViewportConfig(rootRef, viewportConfig);\n  const collectionComponent = isVirtualized ? (\n    <VirtualizedCollection\n      data={data}\n      itemSelector={ITEM_SELECTOR}\n      loadMoreIndicator={defaultLoadMoreIndicator}\n      onLoadRange={onLoadRange}\n      rangeExtractor={rangeExtractor}\n      suggestions={sparkleIndicator}\n      viewportConfig={viewportConfig}>\n      {childrenComponent}\n    </VirtualizedCollection>\n  ) : (\n    <LoadMoreCollection\n      data={data}\n      loadMoreIndicator={defaultLoadMoreIndicator}\n      onLoadRange={onLoadRange}\n      suggestions={sparkleIndicator}\n      viewportConfig={viewportConfig}>\n      {childrenComponent}\n    </LoadMoreCollection>\n  );\n\n  /**\n   * Need to track pointer down element to set currentItem when initial focus happens\n   */\n  const handlePointerDown = useCallback((event: PointerEvent) => {\n    const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n    if (isKeyDefined(key)) pendingCurrentKey.current = key as K;\n  }, []);\n\n  // if data is not specified, listview should show loading indicator\n  // todo: replace placeholder with actual SkeletonContainer component (Ash is working on)\n  return (\n    <div\n      {...mergeProps(\n        allowTabbableMode ? tabbableModeProps : {},\n        currentKeyProps,\n        focusRingProps,\n        selectionProps,\n        itemActionProps,\n        { onFocus: handleFocus, onPointerDown: handlePointerDown }\n      )}\n      role={role}\n      aria-rowcount={ariaRowCount}\n      aria-colcount={1}\n      ref={rootRef}\n      class={classes}\n      tabIndex={0}\n      aria-label={accessibleSummary}\n      aria-multiselectable={ariaMultiSelectable}>\n      {data == null ? loadingIndicator : collectionComponent}\n    </div>\n  );\n}\n\n/**\n * A helper function that finds the data with suggestions, and\n * returns the corresponding keys\n * @param dataState\n */\nconst findSuggestions = <K, D>(dataState?: DataState<K, D> | null) => {\n  const data = dataState?.data;\n  const count = getSuggestionsCount(data);\n  if (count === 0) {\n    return null;\n  }\n\n  const suggestionsData = data!.slice(0, count);\n  return suggestionsData.reduce((suggestions, value, index) => {\n    const key = value.metadata.key;\n\n    if (index === count - 1) {\n      suggestions.set(key, 'end');\n    } else {\n      suggestions.set(key, true);\n    }\n\n    return suggestions;\n  }, new Map<K, 'end' | true>());\n};\n\n/**\n * A helper function that finds the number of suggestions\n * @param data\n */\nconst getSuggestionsCount = <K, D>(data?: DataState<K, D>['data']) => {\n  if (!data) {\n    return 0;\n  }\n\n  const index = data.findIndex((value) => !value.metadata.suggestion);\n  return index === -1 ? 0 : index;\n};\n\n/**\n * A helper function to make sure specified elem is visible in the specified container\n */\nconst scrollToVisible = (elem: Element, scroller: Element) => {\n  if (elem && scroller) {\n    const scrollerBounds = scroller.getBoundingClientRect();\n    const elemBounds = elem.getBoundingClientRect();\n    if (elemBounds.bottom > scrollerBounds.bottom) {\n      scroller.scrollTop = scroller.scrollTop + (elemBounds.bottom - scrollerBounds.bottom);\n    } else if (elemBounds.top < scrollerBounds.top) {\n      scroller.scrollTop = scroller.scrollTop - (scrollerBounds.top - elemBounds.top);\n    }\n  }\n};\n\nconst getViewportConfig = (rootRef: RefObject<HTMLElement>, config?: ViewportConfig) => {\n  return (\n    config ?? {\n      scroller: () => {\n        return rootRef.current;\n      }\n    }\n  );\n};\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst handleSelectionRange = <K, D>(\n  detail: SelectionRangeDetail<K>,\n  dataState: DataState<K, D>\n) => {\n  const keys = dataState.data.map((value: { data: D; metadata: Metadata<K> }) => {\n    return value.metadata.key;\n  });\n  const startIndex = keys.indexOf(detail.value.start);\n  const endIndex = keys.indexOf(detail.value.end);\n  const minIndex = Math.min(startIndex, endIndex);\n  const maxIndex = Math.max(startIndex, endIndex);\n  if (minIndex === -1) {\n    // return a range to fetch so we can find all the keys, maxIndex should not be -1\n    return { offset: 0, count: dataState.totalSize };\n  } else {\n    // range of keys are in the current viewport, return them\n    return keys.slice(minIndex, maxIndex + 1);\n  }\n};\n\n/**\n * A sparkle component for smart suggestion indicator in ListView\n * @param sparkleHeight the height of sparkle\n */\nexport function Sparkle({ sparkleHeight }: { sparkleHeight: number }) {\n  if (sparkleHeight <= 0) {\n    return null;\n  }\n\n  const height = sparkleHeight + 'px';\n  const sparkleClasses = classNames([sparkleStyles.base]);\n  const containerClasses = classNames([sparkleStyles.container]);\n\n  return (\n    <div key=\"sparkle\" class={containerClasses}>\n      <div class={sparkleClasses} style={{ height }}></div>\n    </div>\n  );\n}\n\nconst defaultLoadingIndicator = (\n  <SkeletonContainer minimumCount={25}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n\nconst defaultLoadMoreIndicator = (\n  <SkeletonContainer minimumCount={3}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n\n/**\n * Adjust the DataState as needed if it contains more than needed for the specified range\n */\nconst adjustDataState = <K, D>(dataState: DataState<K, D>, range: Range | null) => {\n  if (range) {\n    // prevent range offset from being larger than the data state\n    const safeRangeOffset = Math.min(range.offset, dataState.offset + dataState.totalSize);\n    const diff = safeRangeOffset - dataState.offset;\n    if (diff > 0) {\n      dataState = {\n        offset: safeRangeOffset,\n        data: dataState.data.slice(diff, diff + range.count),\n        totalSize: dataState.totalSize,\n        sizePrecision: dataState.sizePrecision\n      };\n    }\n  }\n  return dataState;\n};\n"],"names":["getListViewRoles","ariaRole","list","item","cell","ITEM_STYLE_CLASS","ITEM_SELECTOR","styles","cellStyles","ListViewItem","children","itemKey","itemIndex","isFocused","isFocusRingVisible","isGridlineVisible","isSelected","isTopGridlineVisible","isTabbable","role","selectionMode","suggestion","currentItemVariant","rootRef","useRef","roles","useMemo","cellRoleAttributes","event","key","isSelectable","isItemSelected","containerStyle","SkeletonContainer","minimumCount","sparkleStyles","findSuggestions","dataState","count","getSuggestionsCount","data","value","metadata","index","suggestions","set","Map","findIndex","scrollToVisible","elem","scroller","scrollerBounds","getBoundingClientRect","elemBounds","bottom","scrollTop","top","getViewportConfig","config","emptyKeys","all","keys","Set","handleSelectionRange","detail","startIndex","indexOf","start","endIndex","end","minIndex","Sparkle","sparkleHeight","height","defaultLoadingIndicator","_jsx","jsx","Object","assign","defaultLoadMoreIndicator","adjustDataState","range","safeRangeOffset","Math","min","offset","totalSize","diff","slice","accessibleSummary","allowTabbableMode","currentKey","gridlines","loadingIndicator","onCurrentKeyChange","onLoadRange","onSelectionChange","onItemAction","rangeExtractor","selectedKeys","viewportConfig","isVirtualized","listRoles","anchorKey","pendingSelection","pendingCurrentKey","ariaMultiSelectable","undefined","ariaRowCount","sizePrecision","listViewContains","_a","current","contains","target","isKeyboardEvent","focus","findElementByKey","querySelector","handleSelectionChange","useCallback","size","Array","from","values","pop","handleSelectionRangeChange","isArray","length","handleInitialFocus","firstKey","getFirstVisibleKey","isKeyDefined","handleSelectorFocusCapture","relatedTarget","getAttribute","_b","handleFocus","element","keyExtractor","isPrev","getPrevNextKey","itemActionProps","useItemAction","placeholder","PLACEHOLDER_STYLE_CLASS","offsetHeight","getItemContext","context","selectorRenderer","selector","childrenComponent","listItemContext","get","isCurrentTabbableKey","containsKey","collectionComponent","VirtualizedCollection","itemSelector","loadMoreIndicator","sparkleIndicator","LoadMoreCollection","handlePointerDown","mergeProps","tabbableModeProps","currentKeyProps","focusRingProps","selectionProps","onFocus","onPointerDown","ref","class","classes","tabIndex"],"mappings":"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"}