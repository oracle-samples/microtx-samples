{"version":3,"file":"UNSAFE_useClearIcon.js","sources":["../../../src/hooks/UNSAFE_useClearIcon/useClearIcon.ts"],"sourcesContent":["import { ComponentChildren } from 'preact';\nimport { useEffect, useCallback } from 'preact/hooks';\nimport { useToggle } from '../UNSAFE_useToggle';\n\nexport type UseClearIconProps = {\n  clearIcon?: ComponentChildren;\n  display?: 'always' | 'conditionally' | 'never';\n  hasValue?: boolean;\n  isEnabled?: boolean;\n  isFocused?: boolean;\n  isHover?: boolean;\n};\n\n/**\n * A custom hook that handles showing/hiding clear icon\n */\nexport function useClearIcon({\n  clearIcon,\n  display,\n  hasValue,\n  isEnabled = true,\n  isFocused = false,\n  isHover = false\n}: UseClearIconProps) {\n  const shouldRenderClearIcon = useCallback(\n    () =>\n      isEnabled &&\n      (display === 'always' || (display === 'conditionally' && hasValue && (isFocused || isHover))),\n    [display, hasValue, isEnabled, isFocused, isHover]\n  );\n  const { bool, setFalse, setTrue } = useToggle(shouldRenderClearIcon());\n\n  useEffect(() => {\n    shouldRenderClearIcon() ? setTrue() : setFalse();\n  }, [shouldRenderClearIcon]);\n\n  return bool ? clearIcon : null;\n}\n"],"names":["clearIcon","display","hasValue","isEnabled","isFocused","isHover","shouldRenderClearIcon","useCallback","bool","setFalse","setTrue","useToggle","useEffect"],"mappings":"mGAgBM,UAAuBA,UAC3BA,EAD2BC,QAE3BA,EAF2BC,SAG3BA,EAH2BC,UAI3BA,GAAY,EAJeC,UAK3BA,GAAY,EALeC,QAM3BA,GAAU,IAEV,MAAMC,EAAwBC,EAAWA,YACvC,IACEJ,IACa,WAAZF,GAAqC,kBAAZA,GAA+BC,IAAaE,GAAaC,IACrF,CAACJ,EAASC,EAAUC,EAAWC,EAAWC,KAEtCG,KAAEA,EAAFC,SAAQA,EAARC,QAAkBA,GAAYC,EAASA,UAACL,KAM9C,OAJAM,EAAAA,UAAU,KACRN,IAA0BI,IAAYD,KACrC,CAACH,IAEGE,EAAOR,EAAY"}