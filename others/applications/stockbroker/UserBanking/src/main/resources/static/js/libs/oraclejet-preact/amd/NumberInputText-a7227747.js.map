{"version":3,"file":"NumberInputText-a7227747.js","sources":["../../src/UNSAFE_NumberInputText/StepButton.tsx","../../src/UNSAFE_NumberInputText/Steppers.tsx","../../src/UNSAFE_NumberInputText/useSteppers.tsx","../../src/UNSAFE_NumberInputText/NumberInputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Button } from '../UNSAFE_Button';\nimport { BundleType } from '../resources/nls/bundle';\nimport { IcoChevronDown, IcoChevronUp } from '../UNSAFE_Icons';\nimport { StepDirection, StepEvent } from './useSteppers';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useCallback } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\n\ntype Props = {\n  /**\n   * The direction of the step.\n   */\n  direction: StepDirection;\n\n  /**\n   * Whether the button is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when a step request is made by clicking the button.\n   */\n  onStep?: (event: StepEvent) => void;\n\n  /**\n   * Variants representing different icons for the button.\n   */\n  variant: 'arrowup' | 'arrowdown';\n};\n\n/**\n * A StepButton is used to request a \"step up\" or \"step down\" to a value in NumberInputText.\n * @param direction The direction of the step\n * @param isDisabled Whether the button should be disabled\n * @param onStep Handler called when the button is clicked\n * @param variant Represents different visual variants for the button\n */\nexport function StepButton({ direction, isDisabled, onStep, variant }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const labelIncrease = translations.inputNumber_increase();\n  const labelDecrease = translations.inputNumber_decrease();\n  const label = direction === 'increase' ? labelIncrease : labelDecrease;\n\n  const handleClick = useCallback(() => {\n    onStep?.({ direction });\n  }, [onStep, direction]);\n\n  const icon = variant === 'arrowup' ? <IcoChevronUp /> : <IcoChevronDown />;\n\n  return (\n    <TabbableModeContext.Provider value={{ isTabbable: false }}>\n      <Button\n        display=\"icons\"\n        isDisabled={isDisabled}\n        title={label}\n        onAction={handleClick}\n        startIcon={icon}\n        variant=\"borderless\"></Button>\n    </TabbableModeContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { Grid } from '../UNSAFE_Grid';\n\nexport type Props = {\n  /**\n   *The children are StepButtons.\n   */\n  children: ComponentChildren;\n};\n\n// TODO: Replace Steppers with Buttonset when it becomes available\nexport function Steppers({ children }: Props) {\n  return (\n    <Grid align=\"center\" gap=\"1x\" gridTemplateColumns=\"1fr 1fr\">\n      {children}\n    </Grid>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { StepButton } from './StepButton';\nimport { Steppers } from './Steppers';\n\nconst SPIN_DELAY = 500;\nconst SPIN_INTERVAL = 40;\n\nexport type StepDirection = 'increase' | 'decrease';\n\nexport type StepEvent = {\n  /**\n   * The direction of the requested step.\n   */\n  direction: StepDirection;\n};\n\ntype Props = {\n  /**\n   * Controls whether the step buttons are shown.\n   */\n  hasSteppers?: boolean;\n\n  /**\n   * A ref to the input element.\n   */\n  inputRef: Ref<HTMLInputElement>;\n\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a single step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\n/**\n * A hook for using stepping functionality with NumberInputText. Stepping can\n * be accomplished using the step up or down buttons or by pressing the arrow\n * up or arrow down keys. Holding down the buttons or keys produces continuous\n * step events.\n *\n * @param hasSteppers Controls whether the step buttons are shown\n * @param inputRef A ref to the input element\n * @param isStepDownDisabled Controls whether stepping down is disabled\n * @param isStepUpDisabled Controls whether stepping up is disabled\n * @param onSpin Called when a continuous step (aka spin) is requested\n * @param onSpinComplete Called when spinning is complete\n * @param onStep Called when a single step is requested\n * @returns A JSX element which can be placed in the endContent of NumberInputText.\n */\nexport const useSteppers = ({\n  hasSteppers,\n  inputRef,\n  isStepDownDisabled,\n  isStepUpDisabled,\n  onSpin,\n  onSpinComplete,\n  onStep\n}: Props) => {\n  const { bool: isStarted, setTrue: setStartedTrue, setFalse: setStartedFalse } = useToggle(false);\n  const {\n    bool: isSpinning,\n    setTrue: setSpinningTrue,\n    setFalse: setSpinningFalse\n  } = useToggle(false);\n  const startTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const spinTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n  const directionRef = useRef<StepDirection>('increase');\n  const spinCompleteRef = useRef(false);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!(event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n        return;\n      }\n      // By default, pressing the arrow keys moves the cursor to the\n      // beginning or end which we don't want, so call preventDefault.\n      // We also want to stop propagation of handled events.\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isStarted) {\n        // If already started, ignore repeated key down events.\n        return;\n      }\n      if (\n        (event.key === 'ArrowDown' && isStepDownDisabled) ||\n        (event.key === 'ArrowUp' && isStepUpDisabled)\n      ) {\n        // If requested step is disabled, return.\n        return;\n      }\n      directionRef.current = event.key === 'ArrowDown' ? 'decrease' : 'increase';\n      setStartedTrue();\n      // Do an initial step, which is what oj-input-number did as well.\n      onStep?.({ direction: directionRef.current });\n    },\n    [isStarted, onStep, isStepDownDisabled, isStepUpDisabled, setStartedTrue]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        if (isSpinning) {\n          // Only want to call onSpinComplete if we were actually spinning.\n          spinCompleteRef.current = true;\n        }\n        setStartedFalse();\n        setSpinningFalse();\n        event.stopPropagation();\n      }\n    },\n    [isSpinning, setStartedFalse, setSpinningFalse]\n  );\n\n  useEffect(() => {\n    if (isStarted && !startTimerRef.current) {\n      startTimerRef.current = setTimeout(() => {\n        setSpinningTrue();\n      }, SPIN_DELAY);\n    }\n    return () => {\n      // Clean up between renders.\n      if (startTimerRef.current) {\n        clearTimeout(startTimerRef.current);\n        startTimerRef.current = null;\n      }\n    };\n  }, [isStarted, setSpinningTrue]);\n\n  useEffect(() => {\n    if (!isSpinning) {\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    } else {\n      if (!spinTimerRef.current) {\n        spinTimerRef.current = setInterval(() => {\n          // If further spinning is disabled, call setSpinningFalse to\n          // clean up the timer otherwise repeat the step.\n          if (\n            (directionRef.current === 'increase' && isStepUpDisabled) ||\n            (directionRef.current === 'decrease' && isStepDownDisabled)\n          ) {\n            setSpinningFalse();\n            spinCompleteRef.current = true;\n          } else {\n            onSpin?.({ direction: directionRef.current });\n          }\n        }, SPIN_INTERVAL);\n      }\n    }\n    return () => {\n      // Clean up between renders.\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    };\n  }, [isSpinning, isStepDownDisabled, isStepUpDisabled, onSpin, setSpinningFalse]);\n\n  // Only want to run this effect when isSpinning is false and our ref is true.\n  // This helps guarantee onSpinComplete is only called once after spinning stops,\n  // even if onSpinComplete's identity is changing.\n  useEffect(() => {\n    if (!isSpinning && spinCompleteRef.current) {\n      spinCompleteRef.current = false;\n      onSpinComplete?.();\n    }\n  }, [isSpinning, onSpinComplete]);\n\n  const handleClick = useCallback(\n    (event: StepEvent) => {\n      // When a step button is clicked, set focus to the input.\n      inputRef.current?.focus();\n      onStep?.(event);\n    },\n    [onStep, inputRef]\n  );\n\n  const handleDisabledMouseDown = useCallback((event: Event) => {\n    // Using preventDefault prevents focus from moving to the body when a disabled stepper is clicked.\n    // FIXME: can we handle this use case more generally at the startContent/endContent level in TextFieldContent?\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const steppers = hasSteppers ? (\n    <Steppers>\n      <div onMouseDown={(e) => isStepDownDisabled && handleDisabledMouseDown(e)} aria-hidden=\"true\">\n        <StepButton\n          direction=\"decrease\"\n          isDisabled={isStepDownDisabled}\n          onStep={handleClick}\n          variant=\"arrowdown\"\n        />\n      </div>\n\n      <div onMouseDown={(e) => isStepUpDisabled && handleDisabledMouseDown(e)} aria-hidden=\"true\">\n        <StepButton\n          direction=\"increase\"\n          isDisabled={isStepUpDisabled}\n          onStep={handleClick}\n          variant=\"arrowup\"\n        />\n      </div>\n    </Steppers>\n  ) : undefined;\n\n  // stepHandlerProps will be spread onto the parent to handle\n  // stepping functionality via the arrow up or down keys.\n  const stepHandlerProps = hasSteppers ? { onKeyDown, onKeyUp } : {};\n\n  return { steppers, stepHandlerProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { Size } from '../utils/UNSAFE_size';\nimport { StepEvent, useSteppers } from './useSteppers';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype NumberInputTextProps = {\n  /**\n   * Controls whether the step buttons are shown.\n   */\n  hasSteppers?: boolean;\n\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\ntype Props = NumberInputTextProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n\n  /**\n   * The maximum allowed value. Used for the aria-valuemax attribute.\n   */\n  ariaValueMax?: TextFieldInputProps['ariaValueMax'];\n\n  /**\n   * The minimum allowed value. Used for the aria-valuemin attribute.\n   */\n  ariaValueMin?: TextFieldInputProps['ariaValueMin'];\n\n  /**\n   * The number value of the component. Used for the aria-valuenow attribute.\n   */\n  ariaValueNow?: TextFieldInputProps['ariaValueNow'];\n\n  /**\n   * The formatted value of the component. Used for the aria-valueText\n   * attribute to provide a more human readable text alternative for\n   * ariaValueNow.\n   */\n  ariaValueText?: TextFieldInputProps['ariaValueText'];\n\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component: it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user. Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n\n  /**\n   * The prefix displays as regular text before the input text, and inline with it.\n   * The prefix is not editable or focusable.\n   */\n  prefix?: string;\n\n  /**\n   * The suffix displays as regular text after the input text, and inline with it.\n   * The suffix is not editable or focusable.\n   */\n  suffix?: string;\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n\n  /**\n   * The current possibly formatted display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'number' | 'text';\n\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\nexport const NumberInputText = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      ariaValueMax,\n      ariaValueMin,\n      ariaValueNow,\n      ariaValueText,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      isStepDownDisabled: propIsStepDownDisabled,\n      isStepUpDisabled: propIsStepUpDisabled,\n      hasSteppers = false,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      prefix,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      onSpin,\n      onSpinComplete,\n      onStep\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const { hoverProps } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      value\n    });\n\n    // Disable the steppers if the number input is disabled.\n    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;\n    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;\n    // stepHandlerProps contains keyup and keydown handlers\n    // for stepping using the arrow up and down keys.\n    const { steppers, stepHandlerProps } = useSteppers({\n      hasSteppers,\n      inputRef: enabledElementRef,\n      isStepDownDisabled,\n      isStepUpDisabled,\n      onSpin,\n      onSpinComplete,\n      onStep\n    });\n\n    const {\n      renderedPrefix,\n      renderedSuffix,\n      text: valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: steppers !== undefined,\n      hasInsideLabel: label !== undefined && labelEdge === 'inside',\n      hasStartContent: false,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              value={valuePrefixSuffix}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.\n    const valueText =\n      ariaValueNow === undefined\n        ? ariaValueText\n        : ariaValueNow.toString() !== ariaValueText\n        ? ariaValueText\n        : undefined;\n\n    const mainContent = (\n      <Fragment>\n        {renderedPrefix}\n        <TextFieldInput\n          ariaLabelledBy={ariaLabelledBy}\n          ariaLabel={ariaLabel}\n          ariaValueMax={ariaValueMax}\n          ariaValueMin={ariaValueMin}\n          ariaValueNow={ariaValueNow}\n          ariaValueText={valueText}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEndContent={steppers !== undefined}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={false}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={hasSteppers ? 'spinbutton' : undefined}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onInputAndDispatch}\n          {...inputProps}\n          {...stepHandlerProps}\n        />\n        {renderedSuffix}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={steppers}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["StepButton","direction","isDisabled","onStep","variant","translations","useTranslationBundle","labelIncrease","inputNumber_increase","labelDecrease","inputNumber_decrease","label","handleClick","useCallback","icon","_jsx","IcoChevronUp","jsx","IcoChevronDown","TabbableModeContext","Provider","Object","assign","value","isTabbable","children","Button","display","title","onAction","startIcon","Steppers","Grid","align","gap","gridTemplateColumns","NumberInputText","forwardRef","ariaDescribedBy","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","isStepDownDisabled","propIsStepDownDisabled","isStepUpDisabled","propIsStepUpDisabled","hasSteppers","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","prefix","suffix","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","virtualKeyboard","onInput","onCommit","onSpin","onSpinComplete","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","hoverProps","useHover","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","steppers","stepHandlerProps","inputRef","bool","isStarted","setTrue","setStartedTrue","setFalse","setStartedFalse","useToggle","isSpinning","setSpinningTrue","setSpinningFalse","startTimerRef","useRef","spinTimerRef","directionRef","spinCompleteRef","onKeyDown","event","key","preventDefault","stopPropagation","current","onKeyUp","useEffect","setTimeout","clearTimeout","setInterval","clearInterval","_a","focus","handleDisabledMouseDown","_jsxs","onMouseDown","e","undefined","useSteppers","renderedPrefix","renderedSuffix","text","valuePrefixSuffix","ariaLabelledBy","usePrefixSuffix","hasEndContent","hasInsideLabel","hasStartContent","hasValue","labelId","id","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","FormFieldContext","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","as","elementRef","valueText","toString","mainContent","Fragment","TextFieldInput","hasPrefix","hasSuffix","isMobile","TextField","endContent","deviceType","getClientHints"],"mappings":"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"}