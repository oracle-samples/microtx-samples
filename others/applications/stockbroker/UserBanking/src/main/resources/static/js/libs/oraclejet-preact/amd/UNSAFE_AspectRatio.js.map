{"version":3,"file":"UNSAFE_AspectRatio.js","sources":["../../src/UNSAFE_AspectRatio/AspectRatio.tsx"],"sourcesContent":["import { VNode } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\n\n// AspectRatio uses the common padding-bottom as a percentage\n// hack to get aspect-ratio to work.\n// CSS now has an aspect-ratio attribute that makes this super easy.\n// aspect-ratio is supported in all major browsers, most recently in Safari 15.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\n// However, it isn't until jet 14 that we drop support for Safari 14.\n// When jet 14 comes out we can replace the padding-bottom hack with aspect-ratio css property.\n// Also a user could just put aspect-ratio directly on their dom, instead of wrapping\n// it inside this AspectRatio component.\n\n// NOTE: padding-bottom has to be on a dom node that is the child of a dom node that has\n// width, not the same dom node. From css doc:\n// The size of the padding as a percentage, relative to the width of the containing block.\n// So the root dom node has the dimensions styling and the '::before' dom node\n// has the padding information.\n// 100%/ratio. 100/(4/3) = 75%\n// e.g., 16/9 = 56.25%, 4/3 = 75%, 1/1=100%, 2/1=50%\n\nconst baseDivStyles = cssProps`${{\n  position: 'relative',\n  overflowX: 'hidden',\n  overflowY: 'hidden',\n\n  '&::before': {\n    content: \"''\",\n    display: 'block',\n    paddingBottom: 'calc(100% / (var(--oj-c-PRIVATE-DO-NOT-USE-aspect-ratio)))'\n  },\n  // TODO: Revisit. there is no support for combinators, but combinators are necessary for the AspectRatio component, so it's an exception.\n  /* @ts-ignore */\n  '& > :first-child': {\n    position: 'absolute',\n    top: '0',\n    bottom: '0',\n    left: '0',\n    right: '0',\n    width: '100%',\n    height: '100%'\n  },\n  /* @ts-ignore */\n  '& > img': {\n    objectFit: 'cover'\n  },\n  /* @ts-ignore */\n  '& > video': {\n    objectFit: 'cover'\n  }\n}}`;\n\n// common aspect ratios\n// The box’s preferred aspect ratio is the specified ratio of width / height.\n// The ratio has a '/' as a separator and not a ':' because the '/' is what\n// the CSS aspect-ratio uses.\n// TODO: Don't use fixed ratios. Let them specify any number\nexport const ratios = stringLiteralArray([\n  '9/16',\n  '1/1',\n  '6/5',\n  '5/4',\n  '4/3',\n  '11/8',\n  '1.43/1',\n  '3/2',\n  '14/9',\n  '16/10',\n  '1.6180/1',\n  '5/3',\n  '16/9',\n  '1.85/1',\n  '1.9/1',\n  '2/1',\n  '2.2/1',\n  '64/21',\n  '2.4/1',\n  '2.414/1',\n  '2.76/1',\n  '32/9',\n  '18/5',\n  '4/1'\n]);\ntype Ratio = typeof ratios[number];\n\nconst dimensions = stringLiteralArray(['maxWidth', 'minWidth', 'width']);\n\ntype Dimension = typeof dimensions[number];\n\n// This component has some StyleInterpolationProps. Those are the width properties of the DimensionProps.\ntype StyleInterpolationProps = Pick<DimensionProps, Dimension>;\n\ntype AspectRatioProps = StyleInterpolationProps & {\n  /**\n   * The box’s preferred aspect ratio is the specified ratio of width / height. When ratio is 1/1\n   * it is a square.\n   */\n  ratio?: Ratio;\n  /**\n   * The child.\n   */\n  children: VNode<any>;\n};\n\n// Create an array [dimensionInterpolations['maxWidth'], dimensionInterpolations['width'], dimensionInterpolations['minWidth']]\nconst widthDimensionInterpolation = Array.from(dimensions, (x) => dimensionInterpolations[x]);\nconst interpolations = mergeInterpolations<StyleInterpolationProps>(widthDimensionInterpolation);\n\n/**\n * The AspectRatio component displays its content with a certain ratio based on the dimension\n * properties. Overflow content is hidden.\n *\n * It uses a common padding-bottom hack to do this. In future versions it will\n * be implemented using the CSS's aspect-ratio property when the browsers we need to support\n * all have it. For example, Safari 15 has it, but we won't drop Safari 14 until jet 14.\n *\n */\nexport function AspectRatio({ children, ratio = '1/1', ...props }: AspectRatioProps) {\n  const { class: cls, ...styles } = interpolations(props);\n  const stylesWithAspectRatioVar = { ...styles, '--oj-c-PRIVATE-DO-NOT-USE-aspect-ratio': ratio };\n  return (\n    <div class={classNames([baseDivStyles, cls])} style={stylesWithAspectRatioVar}>\n      {children}\n    </div>\n  );\n}\n"],"names":["ratios","stringLiteralArray","dimensions","widthDimensionInterpolation","Array","from","x","dimensionInterpolations","interpolations","mergeInterpolations","_a","_b","props","class","cls","styles","__rest"],"mappings":"mYA0BA,MAoCAA,EAAAC,EAAAA,mBAAA,qLA4BAC,EAAAD,EAAAA,mBAAA,CAAA,WAAA,WAAA,UAoBAE,EAAAC,MAAAC,KAAAH,EAAAI,GAAAC,EAAAA,wBAAAD,IACAE,EAAAC,EAAAA,oBAAAN,iBAWA,SAAAO,sEACE,MAAAC,EAAAH,EAAAI,IAAAC,MAAAC,GAAAH,EAAAI,EAAAC,EAAAA,OAAAL,EAAA,CAAA,kJAjGF"}