{"version":3,"file":"UNSAFE_RatingGauge.js","sources":["../../src/UNSAFE_RatingGauge/RatingStar.tsx","../../src/UNSAFE_RatingGauge/RatingGaugeItem.tsx","../../src/UNSAFE_RatingGauge/RatingUtils.ts","../../src/UNSAFE_RatingGauge/RatingGauge.tsx","../../src/UNSAFE_RatingGauge/useEvents.tsx","../../src/UNSAFE_RatingGauge/useTooltipOrDatatip.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  isSelected: boolean;\n  isDisabled?: boolean;\n  isReadOnly?: boolean;\n  color?: 'neutral' | 'gold';\n};\n\nconst RatingStar = ({ isSelected, isDisabled, isReadOnly, color }: Props) => {\n  const selectionState = isSelected ? 'selected' : 'unselected';\n  const disabledState = isDisabled && 'Disabled';\n  const readonlyState = isReadOnly && 'Readonly';\n  const styleStatePrefix = `${selectionState}${disabledState || readonlyState || ''}`;\n  const innerStyleClass =\n    ratingStarStyles[`${styleStatePrefix}Color` as keyof typeof ratingStarStyles];\n  const outerStyleClass =\n    ratingStarStyles[`${styleStatePrefix}BorderColor` as keyof typeof ratingStarStyles];\n\n  return (\n    <svg\n      viewBox=\"0 0 36 36\"\n      height=\"100%\"\n      width=\"100%\"\n      class={classNames([ratingStarStyles.base, `oj-c-rating-gauge-${color}`])}>\n      <g>\n        <path\n          class={innerStyleClass}\n          d=\"m18 1 5.0061 11.9524 12.9939 1.0344-9.9 8.4215 3.0246 12.5917-11.1246-6.7476-11.12461 6.7476 3.02461-12.5917-9.9-8.4215 12.9939-1.0344z\"\n        />\n        <path\n          class={outerStyleClass}\n          d=\"m23.0061 12.9524-5.0061-11.9524-5.0061 11.9524-12.9939 1.0344 9.9 8.4215-3.02461 12.5917 11.12461-6.7476 11.1246 6.7476-3.0246-12.5917 9.9-8.4215zm10.5043 1.8394-8.5262 7.2528 2.6077 10.8562-9.5919-5.818-9.59192 5.818 2.60772-10.8562-8.52615-7.2528 11.19115-.891 4.3192-10.31227 4.3192 10.31227z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nconst ratingStarStyles = {\n  base: cssProps`${{\n    position: 'absolute'\n  }}`,\n  selectedColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected)'\n  }}`,\n  selectedBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected)'\n  }}`,\n  unselectedColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected)'\n  }}`,\n  unselectedBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected)'\n  }}`,\n  selectedReadonlyColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected-readonly)'\n  }}`,\n  selectedReadonlyBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected-readonly)'\n  }}`,\n  unselectedReadonlyColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected-readonly)'\n  }}`,\n  unselectedReadonlyBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected-readonly)'\n  }}`,\n  selectedDisabledColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected-disabled)'\n  }}`,\n  unselectedDisabledColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected-disabled)'\n  }}`,\n  selectedDisabledBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected-disabled)'\n  }}`,\n  unselectedDisabledBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected-disabled)'\n  }}`\n};\nexport { RatingStar };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Fragment } from 'preact';\nimport { RatingStar } from './RatingStar';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype Props = {\n  fillRatio: number;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  color?: 'neutral' | 'gold';\n};\n\nconst RatingGaugeItem = ({ fillRatio, isDisabled, isReadonly, color }: Props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  if (fillRatio === 1 || fillRatio === 0) {\n    return (\n      <RatingStar\n        isSelected={fillRatio === 1}\n        isDisabled={isDisabled}\n        isReadOnly={isReadonly}\n        color={color}\n      />\n    );\n  }\n\n  // if fillRatio is not 1 or zero, absolutely position selected star above the\n  // unselected star and clip both to form partially selected star.\n\n  return (\n    <Fragment>\n      <div\n        class={fractionalStar.base}\n        style={{\n          clipPath: `inset(0% ${isRtl ? (1 - fillRatio) * 100 : 0}% 0% ${\n            isRtl ? 0 : fillRatio * 100\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={false}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n      <div\n        class={fractionalStar.base}\n        style={{\n          clipPath: `inset(0% ${isRtl ? 0 : (1 - fillRatio) * 100}% 0% ${\n            isRtl ? (1 - fillRatio) * 100 : 0\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={true}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nconst fractionalStar = {\n  base: cssProps`${{\n    top: '0px',\n    left: '0px',\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }}`\n};\n\nexport { RatingGaugeItem };\n","import type { Ref } from 'preact/hooks';\n\nexport function getValue(\n  pageX: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<{ width: number; x: number }>,\n  isRtl: boolean\n): number {\n  const dimensions = dimensionsRef.current;\n  if (!dimensions || dimensions.width === 0) {\n    return -1;\n  }\n  const width = pageX - dimensions.x;\n  const val = (max * (isRtl ? dimensions.width - width : width)) / dimensions.width;\n  const numSteps = val / step;\n  return numSteps < 0.5 ? 0 : Math.ceil(numSteps) * step;\n}\n\nexport function getDimensions(element: HTMLElement | null) {\n  if (!element) {\n    return {\n      width: 0,\n      x: 0\n    };\n  }\n\n  const rect = element.getBoundingClientRect();\n  return {\n    width: Math.round(rect.width),\n    x: Math.round(rect.x + window.scrollX)\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { RatingGaugeItem } from './RatingGaugeItem';\nimport { CommitDetail, InputDetail, useEvents } from './useEvents';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { getDimensions } from './RatingUtils';\nimport { useTooltipOrDatatip } from './useTooltipOrDatatip';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n/**\n * Props for the RatingGauge\n */\ntype Props = {\n  /**\n   * Defines whether the rating gauge should be read only. User interaction is prevented if set to true.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Defines whether the gauge is disabled or not. User interaction is prevented and the rating gauge is hidden from screen readers if set to true.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * The size of the individual rating gauge items.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * The color of the individual rating gauge items.\n   */\n  color?: 'neutral' | 'gold';\n\n  /**\n   * The value of the rating gauge.\n   */\n  value?: number;\n\n  /**\n   * Specifies the increment by which values can be changed.\n   */\n  step?: number;\n\n  /**\n   * Integer value specifying the maximum value of the gauge, which determines the number of items that are displayed\n   */\n  max?: number;\n\n  /**\n   * The callback called in response to hover or focus interactions with the rating gauge items.\n   */\n  onInput?: (detail: InputDetail) => void;\n\n  /**\n   * The callback called when value of gauge changes on blur or Enter or click.\n   */\n  onCommit?: (detail: CommitDetail) => void;\n\n  /**\n   * The rating gauge tooltip. Tooltip is only used for read only rating gauges. If accessibleLabel is not specified, tooltip will be used as the accessible label.\n   */\n  tooltip?: string;\n\n  /**\n   * The rating gauge datatip string. Datatip is used for interactive rating gauges.\n   */\n  datatip?: string;\n\n  /**\n   * A label to be used for accessibility purposes. Default label will be used if not provided.\n   */\n  accessibleLabel?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that label the rating gauge.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that describe the rating gauge.\n   */\n  ariaDescribedBy?: string;\n};\n\nconst getAriaLabel = (\n  props: Pick<Props, 'accessibleLabel' | 'tooltip' | 'isReadonly' | 'isDisabled'>\n) => {\n  return props.accessibleLabel\n    ? props.accessibleLabel\n    : props.tooltip && props.isReadonly && !props.isDisabled\n    ? props.tooltip\n    : undefined;\n};\n/**\n * A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.\n */\nexport function RatingGauge({\n  max = 5,\n  value = 0,\n  size = 'md',\n  color = 'neutral',\n  step = 1,\n  isReadonly,\n  isDisabled,\n  ...props\n}: Props) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n\n  const isInteractive = !isReadonly && !isDisabled;\n\n  // Since the dimension are compute lazily after render, store width and x in ref\n  // This is used to identify hovered and clicked star.\n  // width of the gauge depends on size and max so passing them as dependencies for useEffect\n  useEffect(() => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  }, [size, max]);\n\n  const eventProps = useEvents(\n    max,\n    step,\n    value,\n    rootRef,\n    dimensionsRef,\n    isInteractive,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { tooltipContent, tooltipProps } = useTooltipOrDatatip({\n    max,\n    value,\n    isReadonly,\n    isDisabled,\n    tooltip: props.tooltip,\n    datatip: props.datatip,\n    width: dimensionsRef.current.width,\n    ariaDescribedBy: props.ariaDescribedBy\n  });\n\n  const mergedEventProps = mergeProps(eventProps, tooltipProps);\n  const ariaLabel = getAriaLabel({\n    accessibleLabel: props.accessibleLabel,\n    tooltip: props.tooltip,\n    isReadonly,\n    isDisabled\n  });\n  const { isTabbable } = useTabbableMode();\n  return (\n    <Fragment>\n      <div\n        ref={rootRef}\n        class={classNames([\n          ratingStyles.base,\n          isInteractive ? ratingStyles.interactive : undefined\n        ])}\n        aria-label={ariaLabel}\n        role=\"slider\"\n        aria-valuemin=\"0\"\n        aria-valuenow={value}\n        aria-valuemax={max}\n        aria-valuetext={value}\n        aria-labelledby={props.ariaLabelledBy}\n        tabIndex={isTabbable && !isDisabled ? 0 : -1}\n        aria-disabled={isDisabled ? 'true' : undefined}\n        aria-readonly={isReadonly && !isDisabled ? 'true' : undefined}\n        {...mergedEventProps}>\n        {[...Array(max)].map((_, index: number) => {\n          const fillRatio = Math.min(Math.max(0, value - index), 1);\n          return (\n            <div className={classNames([ratingStyles[size], ratingStyles.item])}>\n              <RatingGaugeItem\n                fillRatio={fillRatio}\n                isDisabled={isDisabled}\n                isReadonly={isReadonly}\n                color={color}\n              />\n            </div>\n          );\n        })}\n      </div>\n      {tooltipContent}\n    </Fragment>\n  );\n}\n\nconst ratingStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    '&:focus-visible': {\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineStyle: 'dotted',\n      outlineWidth: '1px'\n    }\n  }}`,\n  interactive: cssProps`${{\n    cursor: 'pointer',\n    touchAction: 'none'\n  }}`,\n  lg: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-lg-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-lg-size)',\n    margin: '0px 2px'\n  }}`,\n  md: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-md-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-md-size)',\n    margin: '0px 1px'\n  }}`,\n  sm: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-sm-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-sm-size)',\n    margin: '0px 1px'\n  }}`,\n  item: cssProps`${{\n    position: 'relative'\n  }}`\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport type { Ref, MutableRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { getValue, getDimensions } from './RatingUtils';\n\nexport type CommitDetail = {\n  value: number;\n};\n\nexport type InputDetail = {\n  value?: number;\n};\n\nexport const useEvents = (\n  max: number,\n  step: number,\n  value: number,\n  rootRef: Ref<HTMLElement>,\n  dimensionsRef: MutableRef<{ width: number; x: number }>,\n  isInteractive: boolean,\n  onCommit?: (detail: CommitDetail) => void,\n  onInput?: (detail: InputDetail) => void\n) => {\n  const currentInput = useRef<number>();\n  const { direction } = useUser();\n\n  if (!isInteractive) {\n    return {};\n  }\n\n  const isRtl = direction === 'rtl';\n\n  const handleInput = (inputValue: number | undefined) => {\n    onInput?.({ value: inputValue } as InputDetail);\n    currentInput.current = inputValue;\n  };\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1) {\n      onCommit?.({ value: val } as CommitDetail);\n    }\n  };\n\n  // When the document or rating gauge parent scrolls, we need to update the dimensionRef.current.x.\n  // Instead of updating it for every scroll event, recalculate the dims the first time mouse enters\n  // so we get fresh dimension value.\n  const pointerEnterHandler = () => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1 && val != currentInput.current) {\n      handleInput(val);\n    }\n  };\n\n  const blurHandler = () => {\n    onCommit?.({ value: value } as CommitDetail);\n  };\n\n  const pointerLeaveHandler = () => {\n    handleInput(undefined);\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown':\n        handleInput(Math.max(0, value - step));\n        break;\n      case 'ArrowUp':\n        handleInput(Math.min(max, value + step));\n        break;\n      case 'ArrowLeft': {\n        const inputValue = isRtl ? Math.min(max, value + step) : Math.max(0, value - step);\n        handleInput(inputValue);\n        break;\n      }\n      case 'ArrowRight': {\n        const inputValue = isRtl ? Math.max(0, value - step) : Math.min(max, value + step);\n        handleInput(inputValue);\n        break;\n      }\n    }\n    cancelEvent(event);\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n\n    switch (key) {\n      case 'Enter':\n        onCommit?.({ value: value } as CommitDetail);\n        break;\n      case 'Tab':\n        handleInput(value);\n        break;\n      case 'Home':\n        handleInput(0);\n        break;\n      case 'End':\n        handleInput(max);\n        break;\n    }\n    cancelEvent(event);\n  };\n\n  return {\n    onPointerUp: pointerUpHandler,\n    onBlur: blurHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyUpHandler,\n    onKeyDown: keyDownHandler,\n    onPointerLeave: pointerLeaveHandler,\n    onPointerEnter: pointerEnterHandler\n  };\n};\n","import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  max: number;\n  value: number;\n  isReadonly?: boolean;\n  isDisabled?: boolean;\n  tooltip?: string;\n  datatip?: string;\n  ariaDescribedBy?: string;\n  width: number;\n};\n\nexport function useTooltipOrDatatip({\n  max,\n  value,\n  isReadonly,\n  isDisabled,\n  tooltip,\n  datatip,\n  ariaDescribedBy,\n  width\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipProps: Record<string, any>;\n} {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const tooltipVariant = isReadonly && !isDisabled ? 'tooltip' : 'datatip';\n  const disabled =\n    isDisabled ||\n    !((tooltipVariant === 'tooltip' && tooltip) || (tooltipVariant === 'datatip' && datatip));\n  const datatipIndex = Math.max(1, Math.ceil(value));\n  const offset =\n    tooltipVariant === 'tooltip' ? 0 : ((datatipIndex - Math.ceil(max / 2)) * width) / max;\n\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text: tooltipVariant === 'tooltip' ? tooltip : datatip,\n    isOpen,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    },\n    position: 'bottom',\n    offset: {\n      mainAxis: 8, // redwood tooltip design spec\n      crossAxis: offset\n    },\n    isDisabled: disabled,\n    onToggle: ({ value }) => setIsOpen(value),\n    variant: tooltipVariant\n  });\n\n  tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]\n    .filter(Boolean)\n    .join(' ');\n\n  return {\n    tooltipContent,\n    tooltipProps\n  };\n}\n"],"names":["RatingStar","isSelected","isDisabled","isReadOnly","color","ratingStarStyles","RatingGaugeItem","fillRatio","isReadonly","direction","useUser","isRtl","_jsxs","Fragment","children","_jsx","jsx","Object","assign","class","fractionalStar","base","style","clipPath","getValue","pageX","max","step","dimensionsRef","dimensions","current","width","x","numSteps","Math","ceil","getDimensions","element","rect","getBoundingClientRect","round","window","scrollX","ratingStyles","_a","value","size","props","__rest","rootRef","useRef","isInteractive","onCommit","onInput","currentInput","handleInput","inputValue","cancelEvent","event","preventDefault","stopPropagation","onPointerUp","val","onBlur","onPointerMove","onKeyUp","key","onKeyDown","min","onPointerLeave","undefined","onPointerEnter","tooltipContent","tooltipProps","tooltip","datatip","ariaDescribedBy","isOpen","setIsOpen","useState","tooltipVariant","disabled","datatipIndex","offset","useTooltipControlled","text","anchor","y","position","mainAxis","crossAxis","onToggle","variant","filter","Boolean","join","useTooltipOrDatatip","isTabbable","useTabbableMode","ref","classNames","ariaLabel","role","ariaLabelledBy","tabIndex","mergedEventProps","_toConsumableArray","Array","map","_","index","className","item"],"mappings":"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"}