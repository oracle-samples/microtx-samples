{"version":3,"file":"MessageDetail-d34864b4.js","sources":["../../src/PRIVATE_Message/MessageDetail.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, Fragment } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageRendererDataItem, MessageVariant } from './Message.types';\nimport { isValidValueForProp } from './MessageFormattingUtils';\n\nconst messageDetailStyles = {\n  // TODO: Reevaluate once the TEXT component is available (JET-46891)\n  base: cssProps`${{\n    overflowWrap: 'anywhere'\n  }}`,\n\n  banner: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-font-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)'\n  }}`,\n\n  inline: undefined,\n\n  toast: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-font-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-detail-text-color)'\n  }}`\n};\n\ntype MessageWithDetailText = {\n  /**\n   * The detail text for the message\n   */\n  detail?: string;\n};\n\n/**\n * Props for the Detail component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the detail content\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  renderer?: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Default renderer for rendering the detail content.\n *\n * @param item The data item object\n * @returns Rendered detail content\n */\nfunction defaultDetailRenderer<D extends MessageWithDetailText>(\n  item: MessageRendererDataItem<unknown, D>\n): ComponentChildren {\n  const { detail } = item.data;\n  // If the detail is null or an empty string, do not render the\n  // content row\n  if (!isValidValueForProp(detail)) {\n    return null;\n  }\n  return <Fragment>{detail}</Fragment>;\n}\n\n/**\n * Detail Component for rendering the detail content of the Message\n */\nfunction MessageDetail<K, D extends MessageWithDetailText>({\n  item,\n  renderer = defaultDetailRenderer,\n  variant = 'banner'\n}: Props<K, D>) {\n  const renderedContent = renderer(item);\n\n  if (renderedContent == null) return null;\n\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-detail';\n  const classes = classNames([\n    variant === 'banner' && markerClassForTests,\n    messageDetailStyles.base,\n    messageDetailStyles[variant]\n  ]);\n  return <div class={classes}>{renderedContent}</div>;\n}\n\nexport { MessageDetail };\n"],"names":["messageDetailStyles","inline","undefined","defaultDetailRenderer","item","detail","data","isValidValueForProp","_jsx","Fragment","children","renderer","variant","renderedContent","base","Object","assign","class","classes"],"mappings":"wLAcA,MAAAA,EAAA,MAAA,kBAAA,SAWEC,YAAAC,oBAyCF,SAAAC,EAAAC,GAGE,MAAAC,OAAAA,GAAAD,EAAAE,KAGA,OAAAC,EAAAA,oBAAAF,GAGAG,EAAAA,IAAAC,EAAAA,SAAA,CAAAC,SAAAL,IAFE,qBAQJ,UAAAD,KAAAA,EAAAO,SAAAA,EAAAR,EAAAS,QAAAA,EAAA,WAKE,MAAAC,EAAAF,EAAAP,cAE6B,OAAA,qEAS3BJ,EAAAc,YAGF,OAAAN,MAAA,MAAAO,OAAAC,OAAA,CAAAC,MAAAC,GAAA,CAAAR,SAAAG"}