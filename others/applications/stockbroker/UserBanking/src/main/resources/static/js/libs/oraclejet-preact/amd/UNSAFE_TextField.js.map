{"version":3,"file":"UNSAFE_TextField.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/TextFieldContent.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx","../../src/UNSAFE_TextField/MaxLengthLiveRegion.tsx","../../src/UNSAFE_TextField/TextField.tsx"],"sourcesContent":["import { ComponentChildren } from 'preact';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { getFormControlClasses } from './FormControlUtils';\nimport { getReadonlyClasses, getTextFieldClasses, loadingStyles } from './TextFieldUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype DivProps = HTMLAttributesSignalExcluded<HTMLDivElement>;\ntype UAProps = {\n  inlineUserAssistance?: ComponentChildren;\n};\ntype InnerOuterClassNamesProps = {\n  outerClassNames?: string;\n  innerClassNames?: string;\n};\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  InnerOuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n  };\n\nconst StartTopLabelReadonlyTextField = ({\n  outerClassNames,\n  innerClassNames,\n  label,\n  labelEdge,\n  labelStartWidth,\n  inlineUserAssistance,\n  children,\n  ...props\n}: StartTopLabelReadonlyTextFieldProps) => {\n  return (\n    <div {...props} class={outerClassNames}>\n      <LabelValueLayout label={label} labelEdge={labelEdge} labelStartWidth={labelStartWidth}>\n        <div class={innerClassNames}>{children}</div>\n      </LabelValueLayout>\n      {inlineUserAssistance}\n    </div>\n  );\n};\n\ntype InsideLabelReadonlyTextFieldProps = DivProps & UAProps & InnerOuterClassNamesProps;\nconst InsideLabelReadonlyTextField = ({\n  outerClassNames,\n  innerClassNames,\n  inlineUserAssistance,\n  children,\n  ...props\n}: InsideLabelReadonlyTextFieldProps) => {\n  return (\n    <div {...props} class={outerClassNames}>\n      <div class={innerClassNames}>{children}</div>\n      {inlineUserAssistance}\n    </div>\n  );\n};\n\nexport type StyleProps = UAProps & {\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  variant?: 'textarea';\n};\n\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = ({ label, labelEdge, children, variant, ...props }: Props) => {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n\n  // TODO: We need to re-evaluate how we use CSS multi-classing to our VDOM components\n  const formControlClassNames = getFormControlClasses(hasInsideLabel);\n  const textFieldClassNames = getTextFieldClasses(true);\n  const readonlyClassNames = getReadonlyClasses(\n    isFormLayout && !isReadonlyForm,\n    hasInsideLabel,\n    variant\n  );\n  const outerClassNames = classNames([formControlClassNames, textFieldClassNames]);\n  const innerClassNames = classNames([readonlyClassNames, isLoading && loadingStyles]);\n\n  if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n    return (\n      <StartTopLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        innerClassNames={innerClassNames}\n        label={label}\n        labelEdge={labelEdge}\n        {...props}>\n        {children}\n      </StartTopLabelReadonlyTextField>\n    );\n  }\n\n  return (\n    <InsideLabelReadonlyTextField\n      outerClassNames={outerClassNames}\n      innerClassNames={innerClassNames}\n      {...props}>\n      {label}\n      {children}\n    </InsideLabelReadonlyTextField>\n  );\n};\n","import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, Ref } from 'preact';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { loadingStyles } from './TextFieldUtils';\n\ntype VariantProps = {\n  contentVariant?: 'input' | 'textarea';\n  statusVariant?: 'error' | 'none' | 'warning';\n  styleVariant?: 'default' | 'embedded';\n};\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  startContent?: ComponentChildren;\n  endContent?: ComponentChildren;\n  resize?: 'horizontal' | 'vertical' | 'both';\n  rootRef?: Ref<HTMLDivElement>;\n};\n\n// TODO: replace this with var(--oj-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-button-sm-height) once it is available\nconst ojButtonSmHeight = '2.25rem';\n// TODO: replace this with var(--oj-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n// TODO: replace this with var(--oj-button-sm-icon-size) once it is available\nconst ojButtonSmIconSize = '1.25rem';\n\nconst textFieldContainerStyles = {\n  base: cssProps`${{\n    position: 'relative',\n    boxSizing: 'border-box',\n    // TODO: Use Flex component instead of CSS\n    display: 'flex',\n    alignItems: 'center',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    transitionProperty: 'border-color',\n    transitionDuration: '.1s',\n    transitionTimingFunction: 'linear'\n  }}`,\n  defaultStyles: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-bg-color)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-radius)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height)'\n  }}`,\n  embeddedStyles: cssProps`${{\n    backgroundColor: 'inherit',\n    height: '100%',\n    width: '100%'\n  }}`,\n  showBorder: cssProps`${{\n    borderStyle: 'solid',\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-width)'\n  }}`,\n  textarea: cssProps`${{\n    height: 'auto'\n  }}`,\n  labelInside: cssProps`${{\n    minHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-height)'\n  }}`,\n  focused: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-color-focus)',\n    boxShadow: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-box-shadow-focus)'\n  }}`,\n  resize: {\n    both: cssProps`${{\n      resize: 'both'\n    }}`,\n    horizontal: cssProps`${{\n      resize: 'horizontal'\n    }}`,\n    vertical: cssProps`${{\n      resize: 'vertical'\n    }}`\n  },\n  disabled: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-bg-color-disabled)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-border-color-disabled)'\n  }}`,\n  error: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-danger-3)'\n  }}`,\n  warning: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-warning-3)'\n  }}`\n};\n\nconst textFieldStartContentStyles = {\n  base: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-icon-to-edge-padding)',\n    fontSize: ojButtonSmIconSize\n  }}`,\n  labelInside: cssProps`${{\n    fontSize: ojButtonIconSize\n  }}`,\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)'\n  }}`\n};\n\nconst textFieldMiddleStyles = {\n  base: cssProps`${{\n    position: 'relative',\n    // TODO: Use Flex component instead of CSS\n    display: 'inline-flex',\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box'\n  }}`,\n  textarea: cssProps`${{\n    // The 1px is needed to make sure that the textarea element's scrollbar doesn't overlap the focus drop shadow\n    paddingInlineEnd: '1px',\n    // flexDirection 'column' is used to layout out the remaining counter below the textarea.\n    flexDirection: 'column'\n  }}`\n};\n\nconst textFieldEndContentStyles = {\n  base: cssProps`${{\n    paddingInlineEnd: `calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - ${ojButtonSmHeight} - 2px) / 2)`\n  }}`,\n  labelInside: cssProps`${{\n    paddingInlineEnd: `calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-height) - ${ojButtonHeight} - 2px) / 2)`\n  }}`\n};\n\n// Renders the oj-text-field-container dom which includes the\n// start, middle (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const TextFieldContent = ({\n  contentVariant = 'input',\n  insideLabel,\n  mainContent,\n  startContent,\n  statusVariant = 'none',\n  styleVariant = 'default',\n  endContent,\n  resize,\n  rootRef\n}: Props) => {\n  const { isDisabled, isFocused, isLoading } = useFormFieldContext();\n\n  const rootStyles = classNames([\n    textFieldContainerStyles.base,\n    styleVariant === 'embedded'\n      ? classNames([\n          textFieldContainerStyles.embeddedStyles,\n          statusVariant !== 'none' && textFieldContainerStyles.showBorder\n        ])\n      : classNames([\n          textFieldContainerStyles.defaultStyles,\n          textFieldContainerStyles.showBorder,\n          insideLabel !== undefined && textFieldContainerStyles.labelInside,\n          isFocused && textFieldContainerStyles.focused,\n          contentVariant === 'textarea' && textFieldContainerStyles.textarea\n        ]),\n    resize && textFieldContainerStyles.resize[resize],\n    isDisabled\n      ? textFieldContainerStyles.disabled\n      : classNames([\n          statusVariant === 'error' && textFieldContainerStyles.error,\n          statusVariant === 'warning' && textFieldContainerStyles.warning,\n          // TODO: don't use class names: https://jira.oraclecorp.com/jira/browse/JET-50572\n          statusVariant !== 'none' && `oj-c-text-field-${statusVariant}`\n        ]),\n    isLoading && loadingStyles\n  ]);\n  const startContentStyles = classNames([\n    textFieldStartContentStyles.base,\n    insideLabel != undefined && textFieldStartContentStyles.labelInside,\n    isDisabled && textFieldStartContentStyles.disabled\n  ]);\n  const middleStyles = classNames([\n    textFieldMiddleStyles.base,\n    contentVariant === 'textarea' && textFieldMiddleStyles.textarea\n    // getMiddleContentVariantStyles(variant)\n  ]);\n  const endContentStyles = classNames([\n    textFieldEndContentStyles.base,\n    insideLabel != undefined && textFieldEndContentStyles.labelInside\n  ]);\n\n  return (\n    <div role=\"presentation\" class={rootStyles} ref={rootRef}>\n      {startContent && (\n        <span class={startContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {startContent}\n          </Flex>\n        </span>\n      )}\n      <div class={middleStyles}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={endContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n    </div>\n  );\n};\n","import { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { getFormControlClasses } from './FormControlUtils';\nimport { getTextFieldClasses } from './TextFieldUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\n\nexport type StyleProps = {\n  hasInsideLabel?: boolean;\n  variant?: 'default' | 'embedded';\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = ({\n  hasInsideLabel = false,\n  variant = 'default',\n  ...props\n}: Props) => {\n  const { isReadonly } = useFormFieldContext();\n\n  // TODO: We need to re-evaluate how we use CSS multi-classing to our VDOM components\n  const formControlClassNames = getFormControlClasses(hasInsideLabel);\n  const textFieldClassNames = getTextFieldClasses(isReadonly, variant);\n  const cssClassNames = classNames([formControlClassNames, textFieldClassNames]);\n  return <div {...props} class={cssClassNames} />;\n};\n","import { Fragment } from 'preact';\nimport { useDebounce } from '../hooks/UNSAFE_useDebounce';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\n\ntype Props = {\n  isMaxLengthExceeded?: boolean;\n  maxLength: number;\n  valueLength?: number;\n};\n\nconst MAX_LENGTH_UPDATE_DELAY = 500;\n\nexport function MaxLengthLiveRegion({ isMaxLengthExceeded, maxLength, valueLength = 0 }: Props) {\n  // Comment copied from InputBase.js in Big JET:\n  // Only update the aria-live div when the user has paused for more than\n  // 500 milliseconds. That way, we avoid queued up aria-live messages which\n  // would be annoying and not helpful. The 500ms was agreed upon in the\n  // accessibility review meeting.\n  const debouncedRemainingChars = useDebounce(maxLength - valueLength, MAX_LENGTH_UPDATE_DELAY);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const maxLengthExceededTranslatedString = translations.formControl_maxLengthExceeded({\n    MAX_LENGTH: `${maxLength}`\n  });\n  const remainingCharsTranslatedString = translations.formControl_maxLengthRemaining({\n    CHARACTER_COUNT: `${debouncedRemainingChars}`\n  });\n\n  return (\n    <Fragment>\n      <LiveRegion>{remainingCharsTranslatedString}</LiveRegion>\n      {isMaxLengthExceeded && (\n        <LiveRegion type=\"assertive\">{maxLengthExceededTranslatedString}</LiveRegion>\n      )}\n    </Fragment>\n  );\n}\n","import { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { TextFieldContent } from './TextFieldContent';\nimport { StyledTextField } from './StyledTextField';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\n// TextField takes the inputElem and userAssistanceContainer\n// and renders the form component's root dom, along with the\n// TextFieldContent, and the user assistance container.\n\n// The PickedProps are the ones we pass through to the the TextFieldContent\ntype PickedPropsFromTextFieldContent = Pick<\n  ComponentProps<typeof TextFieldContent>,\n  | 'contentVariant'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'mainContent'\n  | 'endContent'\n  | 'resize'\n>;\ntype PickedPropsFromHTMLElement = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'id'>;\n// TODO: How should a parent component listen to events for the text field?  The recommendation\n// was to remove event listeners from TextField itself and instead configure the TextFieldInput\n// with them, for example, thus keeping TextField a more pure layout component.  The\n// TextFieldInput renders the focusable input element, and may be a more natural place for\n// listeners.  We would potentially have to add similar listeners for the ReadonlyTextField, but\n// that component renders the focusable element itself;  there is no TextFieldInput or analogous\n// component passed in.  (from review on 3/8/22)\ntype FocusEvents = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onFocus' | 'onBlur'>;\ntype KeyEvents = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onKeyDown'>;\ntype MouseEvents = Pick<\n  HTMLAttributesSignalExcluded<HTMLDivElement>,\n  'onMouseDown' | 'onMouseEnter' | 'onMouseLeave'\n>;\ntype LabelProps = {\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  labelStartWidth?: Size;\n};\ntype Props = PickedPropsFromTextFieldContent &\n  PickedPropsFromHTMLElement &\n  FocusEvents &\n  KeyEvents &\n  MouseEvents &\n  LabelProps & {\n    inlineUserAssistance?: ComponentChildren;\n    mainFieldRef?: Ref<HTMLDivElement>;\n  };\n\n// TODO: Do we need named props for start/endContent, or could they just be children that get\n// wrapped in a flex layout?  (from review on 3/8/22)\n\n// TODO: Instead of passing the inputElem, label, and userAssistance as named props here, should we\n// have a separate layout component that lays them out, which could just be passed as a child\n// to the TextField?  (from review on 3/8/22)\n\nexport const TextField = ({\n  contentVariant,\n  id,\n  endContent,\n  mainContent,\n  startContent,\n  inlineUserAssistance,\n  label,\n  labelEdge,\n  labelStartWidth,\n  mainFieldRef,\n  resize,\n  statusVariant,\n  styleVariant,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onMouseDown,\n  onMouseEnter,\n  onMouseLeave\n}: Props) => {\n  // TODO: What are the implications for interoperability between new preact-based form components\n  // and the existing JET oj-form-layout?  The preact form components create their own start/top\n  // labels, while oj-form-layout expects to create those itself and wire them to the existing form\n  // components through attributes like labelled-by.  (from review on 3/8/22)\n\n  // TODO: How should a parent form component render component-specific content within TextField,\n  // for example an aria live region?  Instead of a children prop on TextField, could the parent\n  // component pass comp-specific content through other props, like inputElem?   The parent could\n  // have its own component that composes inputElem with additional DOM.  (from review on 3/8/22)\n\n  const styledTextFieldChildren =\n    label !== undefined && (labelEdge === 'start' || labelEdge === 'top') ? (\n      <LabelValueLayout label={label} labelEdge={labelEdge} labelStartWidth={labelStartWidth}>\n        <Fragment>\n          <TextFieldContent\n            contentVariant={contentVariant}\n            endContent={endContent}\n            mainContent={mainContent}\n            resize={resize}\n            rootRef={mainFieldRef}\n            startContent={startContent}\n            statusVariant={statusVariant}\n            styleVariant={styleVariant}\n          />\n          {inlineUserAssistance}\n        </Fragment>\n      </LabelValueLayout>\n    ) : (\n      <Fragment>\n        <TextFieldContent\n          contentVariant={contentVariant}\n          endContent={endContent}\n          insideLabel={label}\n          mainContent={mainContent}\n          resize={resize}\n          rootRef={mainFieldRef}\n          startContent={startContent}\n          statusVariant={statusVariant}\n          styleVariant={styleVariant}\n        />\n        {inlineUserAssistance}\n      </Fragment>\n    );\n  return (\n    <StyledTextField\n      id={id}\n      hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n      onfocusin={onFocus}\n      onfocusout={onBlur}\n      onKeyDown={onKeyDown}\n      onMouseDown={onMouseDown}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      variant={styleVariant}>\n      {styledTextFieldChildren}\n    </StyledTextField>\n  );\n};\n"],"names":["StartTopLabelReadonlyTextField","_a","outerClassNames","innerClassNames","label","labelEdge","labelStartWidth","inlineUserAssistance","children","props","__rest","_jsxs","jsxs","Object","assign","class","_jsx","jsx","LabelValueLayout","InsideLabelReadonlyTextField","textFieldContainerStyles","resize","textFieldStartContentStyles","textFieldMiddleStyles","textFieldEndContentStyles","TextFieldContent","contentVariant","insideLabel","mainContent","startContent","statusVariant","styleVariant","endContent","rootRef","base","embeddedStyles","showBorder","defaultStyles","undefined","labelInside","textarea","error","warning","isLoading","loadingStyles","role","rootStyles","ref","startContentStyles","Flex","justify","align","hasZeroMargins","middleStyles","endContentStyles","StyledTextField","hasInsideLabel","variant","isReadonly","useFormFieldContext","formControlClassNames","getFormControlClasses","textFieldClassNames","getTextFieldClasses","cssClassNames","classNames","isMaxLengthExceeded","maxLength","valueLength","debouncedRemainingChars","useDebounce","translations","useTranslationBundle","maxLengthExceededTranslatedString","formControl_maxLengthExceeded","MAX_LENGTH","remainingCharsTranslatedString","formControl_maxLengthRemaining","CHARACTER_COUNT","Fragment","LiveRegion","type","isFormLayout","isReadonlyForm","useFormContext","readonlyClassNames","getReadonlyClasses","id","mainFieldRef","onFocus","onBlur","onKeyDown","onMouseDown","onMouseEnter","onMouseLeave","styledTextFieldChildren","onfocusin","onfocusout"],"mappings":"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"}