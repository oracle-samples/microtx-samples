{"version":3,"file":"UNSAFE_useFocusableTextField.js","sources":["../../../src/hooks/UNSAFE_useFocusableTextField/useFocusableTextField.ts"],"sourcesContent":["import { Ref } from 'preact';\nimport { useEffect, useImperativeHandle, useRef } from 'preact/hooks';\nimport { useFocusWithin } from '../UNSAFE_useFocusWithin';\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\ntype UseFocusWithinProps = Parameters<typeof useFocusWithin>[0];\ntype UseFocusableTextFieldProps = UseFocusWithinProps & {\n  /**\n   * flag indicating whether the field is readonly\n   */\n  isReadonly?: boolean;\n\n  /**\n   * An optional ref to add imperative handles\n   */\n  ref?: Ref<FocusableHandle>;\n};\n\n/**\n * A custom hook that handles the focus when the text field\n * is toggled between readonly and enabled\n * @typedef E represents the type of the enabled element\n * @typedef R represents the type of the readonly element\n */\nexport function useFocusableTextField<E extends HTMLElement, R extends HTMLElement>({\n  isReadonly,\n  ref = () => {},\n  ...useFocusWithinProps\n}: UseFocusableTextFieldProps) {\n  const { focusProps, isFocused } = useFocusWithin(useFocusWithinProps);\n\n  const previousIsFocusedRef = useRef(isFocused);\n  const enabledElementRef = useRef<E>(null);\n  const readonlyElementRef = useRef<R>(null);\n\n  // Retain focus when toggling between readonly and enabled\n  useEffect(() => {\n    // if the readonly state is changed and previously we\n    // were holding focus, set the focus to newly rendered element\n    if (previousIsFocusedRef.current) {\n      if (isReadonly) {\n        setTimeout(() => readonlyElementRef.current?.focus());\n      } else {\n        setTimeout(() => enabledElementRef.current?.focus());\n      }\n    }\n  }, [isReadonly]);\n\n  // Keep the previousFocusRef in sync, but be sure to run this hook\n  // after handling focus for the readonly toggling.\n  useEffect(() => {\n    previousIsFocusedRef.current = isFocused;\n  }, [isFocused]);\n\n  // Add focus and blur methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        if (isReadonly) {\n          readonlyElementRef.current?.focus();\n        } else {\n          enabledElementRef.current?.focus();\n        }\n      },\n      blur: () => {\n        if (isReadonly) {\n          readonlyElementRef.current?.blur();\n        } else {\n          enabledElementRef.current?.blur();\n        }\n      }\n    }),\n    [isReadonly]\n  );\n\n  return {\n    enabledElementRef,\n    readonlyElementRef,\n    isFocused,\n    focusProps\n  };\n}\n"],"names":["_a","isReadonly","ref","useFocusWithinProps","__rest","focusProps","isFocused","useFocusWithin","previousIsFocusedRef","useRef","enabledElementRef","readonlyElementRef","useEffect","current","setTimeout","focus","useImperativeHandle","_b","blur"],"mappings":"0KA2BM,SAA8EA,GAAA,IAAAC,WAClFA,EADkFC,IAElFA,EAAM,UAEqBF,EADxBG,EAAmBC,EAAAA,OAAAJ,EAH4D,sBAKlF,MAAMK,WAAEA,EAAFC,UAAcA,GAAcC,EAAcA,eAACJ,GAE3CK,EAAuBC,SAAOH,GAC9BI,EAAoBD,SAAU,MAC9BE,EAAqBF,SAAU,MA2CrC,OAxCAG,EAAAA,UAAU,KAGJJ,EAAqBK,UACnBZ,EACFa,WAAW,KAAK,IAAAd,EAAC,eAAAA,EAAAW,EAAmBE,8BAASE,UAE7CD,WAAW,KAAK,IAAAd,EAAC,eAAAA,EAAAU,EAAkBG,8BAASE,YAG/C,CAACd,IAIJW,EAAAA,UAAU,KACRJ,EAAqBK,QAAUP,GAC9B,CAACA,IAGJU,EAAmBA,oBACjBd,EACA,KAAO,CACLa,MAAO,aACDd,EAC0B,QAA5BD,EAAAW,EAAmBE,eAAS,IAAAb,GAAAA,EAAAe,QAED,QAA3BE,EAAAP,EAAkBG,eAAS,IAAAI,GAAAA,EAAAF,SAG/BG,KAAM,aACAjB,EAC0B,QAA5BD,EAAAW,EAAmBE,eAAS,IAAAb,GAAAA,EAAAkB,OAED,QAA3BD,EAAAP,EAAkBG,eAAS,IAAAI,GAAAA,EAAAC,UAIjC,CAACjB,IAGI,CACLS,kBAAAA,EACAC,mBAAAA,EACAL,UAAAA,EACAD,WAAAA"}