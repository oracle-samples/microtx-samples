{
  "name": "split-menu-button",
  "version": "1.0.0",
  "jetVersion": "^14.0.1",
  "type": "composite",
  "pack": "oj-c",
  "implements": [
    "CSplitMenuButtonElement"
  ],
  "description": "A Split Menu Button combines a push button and menu button.",
  "displayName": "Split Menu Button",
  "help": "oj-c.SplitMenuButton.html",
  "main": "oj-c/split-menu-button",
  "extension": {
    "vbdt": {
      "module": "oj-c/split-menu-button"
    },
    "oracle": {
      "icon": "oj-ux-ico-menu-button",
      "uxSpecs": [
        "menubutton"
      ]
    }
  },
  "propertyLayout": [
    {
      "propertyGroup": "common",
      "items": [
        "label",
        "disabled",
        "width",
        "chroming",
        "size",
        "items"
      ]
    }
  ],
  "since": "14.0.0",
  "properties": {
    "label": {
      "type": "string",
      "description": "Text to show in the button.",
      "displayName": "label",
      "help": "#label",
      "translatable": true,
      "value": ""
    },
    "items": {
      "type": "Array<object>",
      "description": "Items describe the menu items rendered by the menu button.",
      "displayName": "items",
      "help": "#items",
      "extension": {
        "vbdt": {
          "itemProperties": {
            "type": {
              "type": "string",
              "enumValues": [
                "item",
                "divider"
              ]
            },
            "label": {
              "type": "string"
            },
            "disabled": {
              "type": "boolean"
            },
            "onAction": {
              "type": "function"
            }
          }
        }
      },
      "value": []
    },
    "disabled": {
      "type": "boolean",
      "description": "Specifies that the button element should be disabled.",
      "displayName": "disabled",
      "help": "#disabled",
      "value": false
    },
    "size": {
      "type": "string",
      "description": "Size of button",
      "displayName": "size",
      "help": "#size",
      "propertyEditorValues": {
        "sm": {
          "description": "Display a small button.",
          "displayName": "Small"
        },
        "md": {
          "description": "Display a default size button.",
          "displayName": "Medium"
        },
        "lg": {
          "description": "Display a large button.",
          "displayName": "Large"
        }
      },
      "translatable": true,
      "enumValues": [
        "sm",
        "md",
        "lg"
      ],
      "value": "md"
    },
    "width": {
      "type": "number|string",
      "description": "Specifies that the button style width",
      "displayName": "width",
      "help": "#width"
    },
    "chroming": {
      "type": "string",
      "description": "Indicates in what states the button has chromings in background and border.",
      "displayName": "chroming",
      "help": "#chroming",
      "propertyEditorValues": {
        "outlined": {
          "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
          "displayName": "Outlined"
        },
        "solid": {
          "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
          "displayName": "Solid"
        },
        "callToAction": {
          "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
          "displayName": "Call To Action"
        }
      },
      "enumValues": [
        "outlined",
        "solid",
        "callToAction"
      ],
      "value": "outlined"
    }
  },
  "events": {
    "ojAction": {
      "bubbles": true,
      "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
      "eventGroup": "common",
      "displayName": "onOjAction",
      "help": "#event:action"
    }
  },
  "methods": {
    "blur": {
      "return": "any"
    },
    "focus": {
      "return": "any"
    },
    "doAction": {
      "return": "any"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}