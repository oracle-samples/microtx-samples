{"version":3,"file":"UNSAFE_MeterBar.js","sources":["../../src/UNSAFE_MeterBar/MeterUtils.ts","../../src/UNSAFE_MeterBar/ReferenceLines.tsx","../../src/UNSAFE_MeterBar/ThresholdBar.tsx","../../src/UNSAFE_MeterBar/MeterBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport { ReferenceLine } from '../utils/UNSAFE_meterTypes';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n};\n\n/**\n * Returns the metric value of the clicked point.\n * @param event The PointerEvent\n * @param dimensionsRef Ref to stored dimensions of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param step The step value of the meter bar.\n * @param orientation The orientation of the meter bar.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The metric value of the clicked point.\n */\nexport function getValue(\n  event: PointerEvent,\n  dimensionsRef: Ref<Dimensions>,\n  min: number,\n  max: number,\n  step: number,\n  orientation?: 'horizontal' | 'vertical',\n  isRtl?: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims || dims.width === 0) {\n    return undefined;\n  }\n\n  let val;\n\n  if (orientation === 'horizontal') {\n    const width = event.offsetX;\n    val = min + ((max - min) * (isRtl ? dims.width - width : width)) / dims.width;\n  } else {\n    const height = dims.height - event.offsetY;\n    val = min + ((max - min) * height) / dims.height;\n  }\n  val = Math.round(val / step) * step;\n  return Math.max(min, Math.min(max, val));\n}\n\n/**\n * Returns the true dimension of the meter bar after first render. All dimensions are 0 for initial render.\n * @param element The meter bar track HTML element\n * @returns The dimension of the meter bar.\n */\nexport function getDimensions(element: HTMLElement | null): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const trackDims = element.getBoundingClientRect();\n\n  return {\n    width: trackDims.width,\n    height: trackDims.height\n  };\n}\n\n/**\n * Returns object with 'start' and 'end' keys. Value for each key will be true if at least one ref line with correposnding position is present in meter bar.\n * @param lines The array of reference lines.\n * @returns Returns object with start and end keys.\n */\nexport function getRefLinesInfo(lines?: ReferenceLine[]): { start: boolean; end: boolean } {\n  let refLineInfo = { start: false, end: false };\n  if (lines) {\n    refLineInfo = lines.reduce((acc, cur) => {\n      acc.start = acc.start || cur.position === 'start';\n      acc.end = acc.end || cur.position === 'end' || cur.position == null;\n      return acc;\n    }, refLineInfo);\n  }\n  return refLineInfo;\n}\n\n/**\n * Returns the total component size taking into account the presence or absence of\n * reference line in either or both side of reference bar. This method assumes that reference line\n * is always larger than the track size.\n * @param refLineInfo Object sepecifying if ref lines with start, end or both position are present.\n * @param size The size of the meter bar.\n * @returns {string}\n */\nexport function getComponentSize(\n  refLineInfo: { start: boolean; end: boolean },\n  size: 'sm' | 'md' | 'lg'\n) {\n  const barTrackSize = `var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-${size}-size)`;\n  const refLineSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-refline-size)';\n  if (refLineInfo.start && refLineInfo.end) {\n    return `calc((2 * ${refLineSize}) - ${barTrackSize})`;\n  }\n  if (refLineInfo.start || refLineInfo.end) {\n    return refLineSize;\n  }\n  return barTrackSize;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\n\ntype ReferenceLineProps = {\n  orientation: 'horizontal' | 'vertical';\n  percentage: string;\n  position?: 'start' | 'end';\n  color?: ColorProps['color'];\n};\n\nexport function ReferenceLineBar({ orientation, percentage, color, position }: ReferenceLineProps) {\n  const isHoriz = orientation === 'horizontal';\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const isStartPos = position === 'start';\n  return (\n    <div\n      class={classNames([\n        styles.base,\n        styles[`${orientation}Border`],\n        styles[`${orientation}`],\n        isStartPos\n          ? isHoriz\n            ? styles.horiontalStart\n            : styles[`verticalStart${isRtl ? 'Rtl' : 'Ltr'}`]\n          : ''\n      ])}\n      style={{\n        left: isHoriz && !isRtl ? percentage : undefined,\n        right: isHoriz && isRtl ? percentage : undefined,\n        bottom: isHoriz ? undefined : percentage,\n        backgroundColor: color\n      }}></div>\n  );\n}\n\nconst styles = {\n  base: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-reference-object-line-color)',\n    backgroundClip: 'padding-box',\n    position: 'absolute',\n    pointerEvents: 'none'\n  }}`,\n  verticalBorder: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)',\n    borderStyle: 'solid',\n    borderWidth: '0 0 1px 0'\n  }}`,\n  horizontalBorder: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)',\n    borderStyle: 'solid',\n    borderWidth: '0 1px 0 0'\n  }}`,\n  vertical: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x)',\n    height: '2px',\n    translate: '0 1px'\n  }}`,\n  horizontal: cssProps`${{\n    translate: '-1px 0',\n    width: '2px',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x)'\n  }}`,\n  horiontalStart: cssProps`${{\n    bottom: '0%'\n  }}`,\n  verticalStartLtr: cssProps`${{\n    right: '0%'\n  }}`,\n  verticalStartRtl: cssProps`${{\n    left: '0%'\n  }}`\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'class'>;\ntype ThresholdBarProps = IntrinsicProps & {\n  color?: ColorProps['color'];\n  length: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport function ThresholdBar({ color, length, orientation, ...otherProps }: ThresholdBarProps) {\n  const { direction } = useUser();\n  const isHoriz = orientation === 'horizontal';\n  const isRtl = direction === 'rtl';\n  return (\n    <div\n      class={classNames([\n        styles.base,\n        isHoriz\n          ? styles[`horizontalBarTrackSection${isRtl ? 'Rtl' : 'Ltr'}`]\n          : styles['verticalBarTrackSection'],\n        otherProps.class\n      ])}\n      style={{\n        width: isHoriz ? length : '100%',\n        height: isHoriz ? '100%' : length,\n        backgroundColor: color\n      }}></div>\n  );\n}\n\nconst styles = {\n  base: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)',\n    borderStyle: 'solid',\n    boxSizing: 'border-box',\n    pointerEvents: 'none',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-threshold-color)',\n    backgroundClip: 'padding-box'\n  }}`,\n  verticalBarTrackSection: cssProps`${{\n    borderWidth: '1px 0 0 0'\n  }}`,\n  horizontalBarTrackSectionRtl: cssProps`${{\n    borderWidth: '0 0 0 1px'\n  }}`,\n  horizontalBarTrackSectionLtr: cssProps`${{\n    borderWidth: '0 1px 0 0'\n  }}`\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { sizeToCSS } from '../utils/UNSAFE_size';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useDvtMeterEvents';\n\nimport {\n  getMeterAriaProps,\n  validateRange,\n  getTrackAndIndicatorColor\n} from '../utils/PRIVATE_meterUtils';\n\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { BarTrack, BarValue } from '../PRIVATE_Meter';\nimport { getDimensions, getRefLinesInfo, getValue } from './MeterUtils';\nimport { ReferenceLineBar } from './ReferenceLines';\nimport { ThresholdBar } from './ThresholdBar';\nimport { MeterBarProps } from './MeterBar.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n/**\n * A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterBar({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  length = '100%',\n  size = 'lg',\n  orientation = 'horizontal',\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  ...props\n}: MeterBarProps) {\n  validateRange(min, max, value, step);\n\n  const isHoriz = orientation === 'horizontal';\n  const barTrackRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput) {\n      dimensionsRef.current = getDimensions(barTrackRef.current);\n    }\n  }, [size, length, orientation, props.onCommit, props.onInput]);\n\n  const getValueFromEvent = (event: PointerEvent): number | undefined => {\n    // only evaluate value from bar track\n    if (event.target == barTrackRef.current) {\n      return getValue(event, dimensionsRef, min, max, step, orientation, isRtl);\n    }\n    return;\n  };\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    barTrackRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    props.datatip,\n    props.ariaDescribedBy\n  );\n\n  const ariaLabelProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    `${value}`,\n    props.accessibleLabel,\n    props.ariaLabelledBy,\n    props.thresholds\n  );\n  const mergedProps = mergeProps(\n    pointerEventsProps,\n    keyboardEventsProps,\n    datatipProps,\n    ariaLabelProps\n  );\n\n  const validIndicatorSize = Math.max(0, Math.min(1, indicatorSize));\n  const valueBarLength = `${((value - min) * 100) / (max - min)}%`;\n  const valueBarSize = `${validIndicatorSize * 100}%`;\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const sizeStyle = getRefLinesInfo(props.referenceLines);\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n  return (\n    <>\n      <div\n        tabIndex={!isTabbable ? -1 : 0}\n        role=\"slider\"\n        {...mergedProps}\n        style={{\n          width: isHoriz ? sizeToCSS(length) : undefined,\n          height: isHoriz ? undefined : sizeToCSS(length)\n        }}\n        class={classNames([componentStyles.base, componentStyles[orientation]])}>\n        <BarTrack\n          ref={barTrackRef}\n          orientation={orientation}\n          color={\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? 'transparent'\n              : trackColor\n          }\n          class={classNames([\n            barTrackStyles.base,\n            isInteractive ? componentStyles.interactive : '',\n            isHoriz ? '' : barTrackStyles.vertical,\n            isHoriz ? barTrackStyles[`${size}Horizontal`] : barTrackStyles[`${size}Vertical`],\n            ...getMarginClass(sizeStyle, size, isHoriz)\n          ])}>\n          {thresholdDisplay === 'all' &&\n            props.thresholds\n              ?.filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n              .sort((a, b) => a.max - b.max)\n              .map((threshold: Threshold, index, thresholds) => {\n                const diff =\n                  index === 0 ? threshold.max - min : threshold.max - thresholds[index - 1].max;\n                return (\n                  <>\n                    <ThresholdBar\n                      class={index === 0 ? trackSectionStyle[`${orientation}First`] : ''}\n                      orientation={orientation}\n                      length={`${(diff * 100) / (max - min)}%`}\n                      color={threshold.color}\n                    />\n\n                    {isTrackRendered && index === thresholds.length - 1 && threshold.max < max ? (\n                      <ThresholdBar\n                        class={trackSectionStyle[`${orientation}Last`]}\n                        color={trackColor}\n                        orientation={orientation}\n                        length={`${((max - thresholds[index].max) * 100) / (max - min)}%`}\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                );\n              })}\n          <BarValue\n            length={valueBarLength}\n            size={valueBarSize}\n            orientation={orientation}\n            class={classNames([barValueStyles.base, barValueStyles[orientation]])}\n            color={indicatorColor}\n          />\n          {props.referenceLines?.map((item) => (\n            <ReferenceLineBar\n              color={item.color}\n              orientation={orientation}\n              percentage={`${((item.value - min) * 100) / (max - min)}%`}\n              position={item.position}\n            />\n          ))}\n        </BarTrack>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n\nconst getMarginClass = function (\n  info: { start: boolean; end: boolean },\n  size: 'sm' | 'md' | 'lg',\n  isHoriz: boolean\n) {\n  const className = [];\n  if (info.start) {\n    className.push(barTrackStyles[`${size}Margin${isHoriz ? 'Top' : 'Start'}`]);\n  }\n\n  if (info.end) {\n    className.push(barTrackStyles[`${size}Margin${isHoriz ? 'Bottom' : 'End'}`]);\n  }\n  return className;\n};\n\nconst componentStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    pointerEvents: 'none',\n    '&:focus-visible': {\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineStyle: 'dotted',\n      outlineWidth: '1px'\n    }\n  }}`,\n  horizontal: cssProps`${{\n    width: '100%'\n  }}`,\n  vertical: cssProps`${{\n    height: '100%'\n  }}`,\n  interactive: cssProps`${{\n    cursor: 'pointer',\n    touchAction: 'none'\n  }}`\n};\n\nconst barValueStyles = {\n  base: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-value-bg-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm)',\n    position: 'absolute',\n    pointerEvents: 'none'\n  }}`,\n  vertical: cssProps`${{\n    bottom: '0%',\n    left: '50%',\n    transform: 'translate(-50%, 0)'\n  }}`,\n  horizontal: cssProps`${{\n    top: '50%',\n    transform: 'translate(0, -50%)'\n  }}`\n};\n\nconst barTrackStyles = {\n  base: cssProps`${{\n    position: 'relative',\n    display: 'flex',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-track-bg-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm)',\n    pointerEvents: 'auto'\n  }}`,\n  vertical: cssProps`${{\n    flexDirection: 'column-reverse'\n  }}`,\n  smHorizontal: cssProps`${{\n    width: '100%',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size)'\n  }}`,\n  smVertical: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size)',\n    height: '100%'\n  }}`,\n  mdHorizontal: cssProps`${{\n    width: '100%',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size)'\n  }}`,\n  mdVertical: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size)',\n    height: '100%'\n  }}`,\n  lgHorizontal: cssProps`${{\n    width: '100%',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size)'\n  }}`,\n  lgVertical: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size)',\n    height: '100%'\n  }}`,\n  smMarginTop: cssProps`${{\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x)- var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size))'\n  }}`,\n  mdMarginTop: cssProps`${{\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size))'\n  }}`,\n  lgMarginTop: cssProps`${{\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size))'\n  }}`,\n  smMarginStart: cssProps`${{\n    marginInlineStart:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size))'\n  }}`,\n  mdMarginStart: cssProps`${{\n    marginInlineStart:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size))'\n  }}`,\n  lgMarginStart: cssProps`${{\n    marginInlineStart:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size))'\n  }}`,\n  smMarginEnd: cssProps`${{\n    marginInlineEnd:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size))'\n  }}`,\n  mdMarginEnd: cssProps`${{\n    marginInlineEnd:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size))'\n  }}`,\n  lgMarginEnd: cssProps`${{\n    marginInlineEnd:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size))'\n  }}`,\n  smMarginBottom: cssProps`${{\n    marginBottom:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-sm-size))'\n  }}`,\n  mdMarginBottom: cssProps`${{\n    marginBottom:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-md-size))'\n  }}`,\n  lgMarginBottom: cssProps`${{\n    marginBottom:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x) - var(--oj-c-PRIVATE-DO-NOT-USE-meter-bar-lg-size))'\n  }}`\n};\n\nconst trackSectionStyle = {\n  horizontalFirst: cssProps`${{\n    borderRadius:\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) 0 0 var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm)'\n  }}`,\n  horizontalLast: cssProps`${{\n    borderRadius:\n      '0 var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) 0',\n    borderWidth: '0'\n  }}`,\n  verticalFirst: cssProps`${{\n    borderRadius:\n      '0 0 var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm)'\n  }}`,\n  verticalLast: cssProps`${{\n    borderRadius:\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-sm) 0 0',\n    borderWidth: '0'\n  }}`\n};\n"],"names":["getDimensions","element","width","height","trackDims","getBoundingClientRect","ReferenceLineBar","orientation","percentage","color","position","isHoriz","direction","useUser","isRtl","isStartPos","_jsx","class","classNames","styles","base","left","undefined","backgroundColor","ThresholdBar","_a","otherProps","getMarginClass","info","size","className","componentStyles","barValueStyles","barTrackStyles","trackSectionStyle","barTrackRef","useRef","props","onCommit","onInput","length","pointerEventsProps","usePointerEvents","value","event","target","current","dimensionsRef","min","max","step","dims","val","offsetX","offsetY","Math","round","getValue","datatipContent","datatipProps","useMeterDatatip","datatip","ariaDescribedBy","mergedProps","mergeProps","keyboardEventsProps","ariaLabelProps","validIndicatorSize","indicatorSize","valueBarLength","valueBarSize","lines","refLineInfo","start","end","reduce","acc","cur","isTabbable","useTabbableMode","sizeToCSS","children","_jsxs","jsxs","BarTrack","Object","assign","ref","isTrackRendered","thresholdDisplay","thresholds","trackColor","sizeStyle","diff","index","threshold","_Fragment","jsx"],"mappings":"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"}