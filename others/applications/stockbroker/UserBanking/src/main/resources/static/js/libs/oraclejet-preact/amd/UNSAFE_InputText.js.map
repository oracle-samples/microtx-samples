{"version":3,"file":"UNSAFE_InputText.js","sources":["../../src/UNSAFE_InputText/InputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from './ClearIcon';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component: it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n\n  /**\n   * The content to be rendered after the input field, typically a button.\n   */\n  endContent?: TextFieldProps['endContent'];\n\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user. Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n\n  /**\n   * Specifies how the input text characters are to be counted when `maxLength` is specified.\n   */\n  maxLengthUnit?: CountUnit;\n\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n\n  /**\n   * The prefix displays as regular text before the input text.\n   * The prefix is not editable or focusable.\n   */\n  prefix?: string;\n\n  /**\n   * Specifies the role attribute for the input field.\n   */\n  role?: TextFieldInputProps['role'];\n\n  /**\n   * The content to be rendered before the input field, typically an icon.\n   */\n  startContent?: TextFieldProps['startContent'];\n\n  /**\n   * The suffix displays as regular text after the input text.\n   * The suffix is not editable or focusable.\n   */\n  suffix?: string;\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\nexport const InputText = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      hasClearIcon = 'never',\n      endContent,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      messages,\n      placeholder,\n      prefix,\n      role,\n      startContent,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      value\n    });\n\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(endContent, maybeClearIcon);\n\n    const {\n      renderedPrefix,\n      renderedSuffix,\n      text: valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: endContent !== undefined,\n      hasInsideLabel: label !== undefined && labelEdge === 'inside',\n      hasStartContent: startContent !== undefined,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              value={valuePrefixSuffix}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <Fragment>\n        {renderedPrefix}\n        <TextFieldInput\n          ariaLabelledBy={ariaLabelledBy}\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEndContent={endContent !== undefined}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={startContent !== undefined}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={role}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          {...inputProps}\n        />\n        {renderedSuffix}\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          startContent={startContent}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["InputText","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","hasClearIcon","endContent","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","prefix","role","startContent","suffix","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","virtualKeyboard","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","hoverProps","isHover","useHover","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onClickClearIcon","_a","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","_jsx","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","renderedPrefix","renderedSuffix","text","valuePrefixSuffix","ariaLabelledBy","usePrefixSuffix","hasEndContent","undefined","hasInsideLabel","hasStartContent","labelId","id","isMaxLengthExceeded","valueLength","onFilteredInput","useLengthFilter","labelComp","Label","Object","assign","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","fieldLabel","FormFieldContext","Provider","children","ReadonlyTextField","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","as","elementRef","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","hasPrefix","hasSuffix","inputRef","isMobile","MaxLengthLiveRegion","TextField","deviceType","getClientHints"],"mappings":"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"}