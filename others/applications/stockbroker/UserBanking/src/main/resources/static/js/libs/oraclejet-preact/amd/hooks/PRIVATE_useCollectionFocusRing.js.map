{"version":3,"file":"PRIVATE_useCollectionFocusRing.js","sources":["../../../src/hooks/PRIVATE_useCollectionFocusRing/useCollectionFocusRing.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useState, useRef } from 'preact/hooks';\n\n/**\n * Hook for handling focus ring management in Collection components.\n *\n * @param contains function that returns true if the Collection contains the specified element.\n * @param navigationKeys set of keys that are considered as navigation keys for Collection.\n * @param isVisibleFocusLostOnClick boolean or function that returns a boolean that states if focus is going to be visible after a click\n * @returns\n */\nexport function useCollectionFocusRing(\n  contains: (elem: Element | null) => boolean,\n  navigationKeys: string[],\n  isVisibleFocusLostOnClick: ((elem: Element) => boolean) | boolean = true\n): [\n  boolean,\n  {\n    onFocus: (event: FocusEvent) => void;\n    onBlur: (event: FocusEvent) => void;\n    onKeyDown: (event: KeyboardEvent) => void;\n    onPointerDown: (event: PointerEvent) => void;\n  }\n] {\n  const [focusRingVisible, setFocusRingVisible] = useState(false);\n  const recentPointer = useRef(false);\n\n  const onFocus = useCallback(() => {\n    if (!focusRingVisible && recentPointer.current === false) {\n      setFocusRingVisible(true);\n    }\n  }, [focusRingVisible]);\n\n  const onBlur = useCallback(() => {\n    setTimeout(() => {\n      if (focusRingVisible && !contains(document.activeElement)) {\n        // remove focus ring\n        setFocusRingVisible(false);\n      }\n    }, FOCUS_SHIFT_TIMEOUT);\n  }, [focusRingVisible, contains]);\n\n  const onPointerDown = useCallback(\n    (e: PointerEvent) => {\n      const getIsVisibleFocusLostOnClick =\n        typeof isVisibleFocusLostOnClick === 'function'\n          ? isVisibleFocusLostOnClick(e.target as Element)\n          : isVisibleFocusLostOnClick;\n\n      if (focusRingVisible && getIsVisibleFocusLostOnClick) {\n        setFocusRingVisible(false);\n      }\n      recentPointer.current = true;\n      setTimeout(() => {\n        recentPointer.current = false;\n      }, FOCUS_SHIFT_TIMEOUT);\n    },\n    [focusRingVisible, isVisibleFocusLostOnClick]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (navigationKeys.indexOf(event.key) > -1) {\n        if (!focusRingVisible) {\n          setFocusRingVisible(true);\n        }\n      }\n    },\n    [focusRingVisible, navigationKeys]\n  );\n\n  const focusRingProps = { onFocus, onBlur, onPointerDown, onKeyDown };\n  return [focusRingVisible, focusRingProps];\n}\n\nconst FOCUS_SHIFT_TIMEOUT = 100;\n"],"names":["FOCUS_SHIFT_TIMEOUT","contains","navigationKeys","isVisibleFocusLostOnClick","focusRingVisible","setFocusRingVisible","useState","recentPointer","useRef","onFocus","useCallback","current","onBlur","setTimeout","document","activeElement","onPointerDown","e","getIsVisibleFocusLostOnClick","target","onKeyDown","event","indexOf","key"],"mappings":"6DAiFA,MAAMA,EAAsB,6BAhEtB,SACJC,EACAC,EACAC,GAAoE,GAUpE,MAAOC,EAAkBC,GAAuBC,EAAQA,UAAC,GACnDC,EAAgBC,UAAO,GAEvBC,EAAUC,EAAAA,YAAY,KACrBN,IAA8C,IAA1BG,EAAcI,SACrCN,GAAoB,IAErB,CAACD,IAEEQ,EAASF,EAAAA,YAAY,KACzBG,WAAW,KACLT,IAAqBH,EAASa,SAASC,gBAEzCV,GAAoB,IAErBL,IACF,CAACI,EAAkBH,IAEhBe,EAAgBN,cACnBO,IACC,MAAMC,EACiC,mBAA9Bf,EACHA,EAA0Bc,EAAEE,QAC5BhB,EAEFC,GAAoBc,GACtBb,GAAoB,GAEtBE,EAAcI,SAAU,EACxBE,WAAW,KACTN,EAAcI,SAAU,GACvBX,IAEL,CAACI,EAAkBD,IAGfiB,EAAYV,cACfW,IACKnB,EAAeoB,QAAQD,EAAME,MAAQ,IAClCnB,GACHC,GAAoB,KAI1B,CAACD,EAAkBF,IAIrB,MAAO,CAACE,EADe,CAAEK,QAAAA,EAASG,OAAAA,EAAQI,cAAAA,EAAeI,UAAAA"}