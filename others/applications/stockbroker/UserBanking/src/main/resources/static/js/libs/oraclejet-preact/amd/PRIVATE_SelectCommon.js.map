{"version":3,"file":"PRIVATE_SelectCommon.js","sources":["../../src/PRIVATE_SelectCommon/itemTextUtils.ts","../../src/PRIVATE_SelectCommon/DefaultList.tsx","../../src/PRIVATE_SelectCommon/eventUtils.ts","../../src/PRIVATE_SelectCommon/useOutsideMousedown.ts","../../src/PRIVATE_SelectCommon/Dropdown.tsx","../../src/PRIVATE_SelectCommon/DropdownArrow.tsx","../../src/PRIVATE_SelectCommon/DropdownList.tsx","../../src/PRIVATE_SelectCommon/DropdownUserAssistance.tsx","../../src/PRIVATE_SelectCommon/EmptyResults.tsx","../../src/PRIVATE_SelectCommon/selectUtils.ts","../../src/PRIVATE_SelectCommon/useSelectCommon.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Logger } from '../utils/UNSAFE_logger';\nimport { ItemTextFunctionType, ItemTextType } from '../utils/UNSAFE_selectUtils';\n\nexport function renderItemText<K, D>(item: Item<K, D>, itemText: ItemTextType<K, D>) {\n  // if item-text is a string and the data has the specified field, return it;\n  // otherwise log an error\n  if (typeof itemText === 'string') {\n    if ((item.data as any)?.hasOwnProperty(itemText)) {\n      const retData = item.data[itemText];\n      return String(retData);\n    }\n    Logger.error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);\n    // return undefined if the field doesn't exist\n    return undefined;\n  }\n  // if item-text is a function, call it to create a display label\n  return (itemText as ItemTextFunctionType<K, D>)(item);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback, useMemo } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport {\n  CurrentKeyDetail,\n  DataState,\n  ItemActionDetail,\n  ListItemContext,\n  SelectionDetail\n} from '../UNSAFE_Collection';\nimport { HighlightText } from '../UNSAFE_HighlightText';\nimport { List, SkeletonContainer } from '../PRIVATE_List';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Keys } from '../utils/UNSAFE_keys';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from './itemTextUtils';\n\nconst itemStyles = cssProps`${{\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n}}`;\n\ntype PickedPropsFromList = Pick<\n  ComponentProps<typeof List>,\n  'accessibleSummary' | 'currentItemVariant' | 'selectionMode'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromList & {\n  itemText: ItemTextType<K, D>;\n  // props from List that we constrain or unconstrain\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  onLoadRange?: ComponentProps<typeof List>['onLoadRange'];\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n};\n\nconst noOp = () => {};\n\nexport function DefaultList<K extends string | number, D extends Record<string, any>>({\n  accessibleSummary,\n  currentItemVariant,\n  currentKey,\n  data,\n  itemText,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange = noOp,\n  onSelectionChange,\n  searchText,\n  selectedKeys,\n  selectionMode\n}: Props<K, D>) {\n  const listItemRenderer = useCallback(\n    (listItemContext: ListItemContext<K, D>) => {\n      const itemContext = {\n        data: listItemContext.data,\n        key: listItemContext.metadata.key,\n        metadata: listItemContext.metadata\n      };\n      const renderedItemText = renderItemText(itemContext, itemText) as string;\n      return (\n        <Flex>\n          {listItemContext.selector && listItemContext.selector()}\n          <div class={itemStyles}>\n            <HighlightText matchText={searchText}>{renderedItemText}</HighlightText>\n          </div>\n        </Flex>\n      );\n    },\n    [itemText, searchText]\n  );\n\n  const keys = useMemo(() => {\n    return { all: false, keys: selectedKeys ?? new Set<K>() };\n  }, [selectedKeys]) as Keys<K>;\n\n  return (\n    <List<K, D>\n      accessibleSummary={accessibleSummary}\n      allowTabbableMode={false}\n      currentItemVariant={currentItemVariant}\n      currentKey={currentKey}\n      data={data ?? null}\n      loadingIndicator={loadingIndicator}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      onSelectionChange={onSelectionChange}\n      role=\"listbox\"\n      selectedKeys={keys}\n      selectionMode={selectionMode}>\n      {(context: ListItemContext<K, D>) => listItemRenderer(context)}\n    </List>\n  );\n}\n\n/**\n * Custom 3 Skeleton loader for select multiple\n * TODO: to remove this once https://jira.oraclecorp.com/jira/browse/JET-51527 is solved\n */\nconst loadingIndicator = (\n  <SkeletonContainer minimumCount={3}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n","export const KEYS = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  SPACE: 'Space',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  SHIFT_LEFT: 'ShiftLeft',\n  SHIFT_RIGHT: 'ShiftRight',\n  CTRL_LEFT: 'ControlLeft',\n  CTRL_RIGHT: 'ControlRight',\n  ALT_LEFT: 'AltLeft',\n  ALT_RIGHT: 'AltRight',\n  PAGE_UP: 'PageUp',\n  PAGE_DOWN: 'PageDown',\n  HOME: 'Home',\n  END: 'End',\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete'\n};\n\nexport const isControlKey = (event: KeyboardEvent) => {\n  switch (event.code) {\n    case KEYS.SHIFT_LEFT:\n    case KEYS.SHIFT_RIGHT:\n    case KEYS.CTRL_LEFT:\n    case KEYS.CTRL_RIGHT:\n    case KEYS.ALT_LEFT:\n    case KEYS.ALT_RIGHT:\n      return true;\n    default:\n      return event.metaKey || event.ctrlKey;\n  }\n};\n\nexport const isFunctionKey = (event: KeyboardEvent) => {\n  return /\\bF([1-9]|1[0-2])\\b/i.test(event.code);\n};\n\nexport const isControlOrFunctionKey = (event: KeyboardEvent) => {\n  return isControlKey(event) || isFunctionKey(event);\n};\n\nexport const isSimpleClick = (event: MouseEvent) => {\n  return event.button === 0 && !event.ctrlKey;\n};\n\nexport const preventDefaultForCurrentTarget = (event: MouseEvent) => {\n  if (event.currentTarget === event.target) {\n    event.preventDefault();\n  }\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * `useOutsideMousedown` hook for capturing mousedown outside of an element\n */\nimport { RefObject } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport { coerceArray } from '../utils/UNSAFE_arrayUtils';\n\ntype Props = {\n  /**\n   * If true outside mousedown is disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Reference to element or array of elements relative to which outside mousedown is performed\n   */\n  ref: RefObject<HTMLElement> | RefObject<HTMLElement>[];\n  /**\n   * Outside mousedown callback\n   */\n  handler?: (event: MouseEvent) => void;\n};\n\nconst isPointOutside = (event: Event, ref: RefObject<HTMLElement>[]) => {\n  const target = event.target as HTMLElement;\n  if (target) {\n    const doc = getDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n  return ref.every((elRef) => !elRef.current?.contains(target));\n};\n\nconst getDocument = (node?: Node): Document => node?.ownerDocument ?? document;\n\nexport const useOutsideMousedown = ({ isDisabled: disabled = false, ref, handler }: Props) => {\n  useEffect(() => {\n    const refs = coerceArray(ref);\n    if (\n      !handler ||\n      disabled ||\n      (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1)\n    )\n      return;\n\n    const onMouseDown = (event: MouseEvent) => {\n      if (isPointOutside(event, refs)) {\n        handler?.(event);\n      }\n    };\n    const firstElRef = refs[0];\n    const doc = getDocument(firstElRef.current!);\n    if (doc) {\n      doc.addEventListener('mousedown', onMouseDown, true);\n\n      return () => {\n        doc.removeEventListener('mousedown', onMouseDown, true);\n      };\n    }\n    return undefined;\n  }, [disabled, handler, ref]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { MutableRef, useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Floating } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport { isControlOrFunctionKey, KEYS, preventDefaultForCurrentTarget } from './eventUtils';\nimport { useOutsideMousedown } from './useOutsideMousedown';\n\nconst rootStyles = {\n  base: cssProps`${{\n    boxSizing: 'border-box',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-popup-bg-color)',\n    border: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-popup-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)',\n    boxShadow: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-dropdown-box-shadow)',\n\n    display: 'flex',\n    flexDirection: 'column',\n\n    maxHeight: '400px'\n  }}`\n};\n\ntype Props = {\n  anchorRef: MutableRef<HTMLElement | null>;\n  children?: ComponentChildren;\n  dropdownRef: MutableRef<HTMLElement | null>;\n  id?: string;\n  isOpen?: boolean;\n  onAutoDismiss?: (event?: Event) => void;\n};\n\nexport function Dropdown({ anchorRef, children, dropdownRef, id, isOpen, onAutoDismiss }: Props) {\n  const handleAutoDismiss = useCallback(\n    (event: Event) => {\n      onAutoDismiss?.(event);\n    },\n    [onAutoDismiss]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented || isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          handleAutoDismiss(event);\n          break;\n      }\n    },\n    [handleAutoDismiss]\n  );\n\n  // use the mousedown event to be consistent with legacy JET and so that we're hiding the dropdown\n  // on the same event where focus will transfer\n  useOutsideMousedown({\n    isDisabled: !isOpen,\n    ref: [anchorRef, dropdownRef],\n    handler: handleAutoDismiss\n  });\n\n  // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset\n  const offsetValue = { mainAxis: 4, crossAxis: 0 };\n\n  const inlineStyle = {\n    minWidth: `${anchorRef.current?.offsetWidth}px`\n  };\n\n  return !isOpen ? null : (\n    <Layer logicalParentRef={anchorRef}>\n      <Floating\n        anchorRef={anchorRef}\n        ref={dropdownRef}\n        placement=\"bottom-start\"\n        offsetValue={offsetValue}>\n        <div\n          class={rootStyles.base}\n          id={id}\n          style={inlineStyle}\n          onKeyDown={handleKeyDown}\n          onMouseDown={preventDefaultForCurrentTarget}>\n          {children}\n        </div>\n      </Floating>\n    </Layer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { DropdownArrowIcon } from '../UNSAFE_ThemedIcons';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  isDisabled?: boolean;\n  onClick?: () => void;\n  size?: 'md' | 'sm';\n};\n\n// TODO: replace this with var(--oj-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-button-sm-height) once it is available\nconst ojButtonSmHeight = '2.25rem';\n// TODO: replace this with var(--oj-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var (--oj-button-borderless-chrome-text-color-disabled) once it is available\nconst ojButtonBorderlessChromeTextColorDisabled =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n\nconst rootStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor,\n    fontSize: ojButtonIconSize\n  }}`,\n\n  sizeMd: cssProps`${{\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight\n  }}`,\n\n  sizeSm: cssProps`${{\n    width: ojButtonSmHeight,\n    height: ojButtonSmHeight,\n    lineHeight: ojButtonSmHeight\n  }}`,\n\n  enabled: cssProps`${{\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`,\n\n  disabled: cssProps`${{\n    color: ojButtonBorderlessChromeTextColorDisabled\n  }}`\n};\n\nconst noop = () => {};\n\nexport function DropdownArrow({ isDisabled = false, onClick, size = 'md' }: Props) {\n  const preventDefault = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const { pressProps } = usePress(onClick ?? noop, { isDisabled });\n\n  const styleClasses = classNames([\n    rootStyles.base,\n    size === 'sm' ? rootStyles.sizeSm : rootStyles.sizeMd,\n    isDisabled ? rootStyles.disabled : rootStyles.enabled\n  ]);\n\n  return (\n    <span\n      aria-hidden=\"true\"\n      class={styleClasses}\n      tabIndex={-1}\n      onMouseDown={preventDefault}\n      {...pressProps}>\n      <DropdownArrowIcon />\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\n\nconst rootStyles = {\n  base: cssProps`${{\n    paddingLeft: '0',\n    paddingRight: '0',\n    margin: '1px 0 2px 0',\n    position: 'relative',\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    // '-webkit-tap-highlight-color': 'transparent',\n    boxSizing: 'border-box',\n\n    display: 'flex',\n    flexDirection: 'column'\n  }}`,\n\n  // TODO: These should really be applied directly to the child ListView so that the content\n  // displays under the padding when scrolled, but we can't apply styles to the child collection.\n  // TODO: Also need to figure out how to determine whether the collection is a ListView (in\n  // the collectionRenderer case) in order to apply this styling.\n  topGap: cssProps`${{\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`,\n  bottomGap: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`,\n\n  loading: cssProps`${{\n    minHeight: 'calc(10 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))'\n  }}`\n};\n\ntype Props = {\n  children?: ComponentChildren;\n  hasBottomGap?: boolean;\n  isLoading?: boolean;\n};\n\nexport function DropdownList({ children, hasBottomGap = true, isLoading = false }: Props) {\n  const styleClasses = classNames([\n    rootStyles.base,\n    rootStyles.topGap,\n    hasBottomGap && rootStyles.bottomGap,\n    isLoading && rootStyles.loading\n  ]);\n  return (\n    <div class={styleClasses} onMouseDown={preventDefaultForCurrentTarget}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\n\ntype InlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'fieldLabel' | 'helpSourceLink' | 'helpSourceText' | 'userAssistanceDensity'\n>;\n\nconst rootStyles = cssProps`${{\n  borderTopColor: 'rgba(var(--oj-c-PRIVATE-DO-NOT-USE-palette-neutral-rgb-190), 0.1)',\n  borderTopStyle: 'solid',\n  borderTopWidth: '1px',\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n}}`;\n\nexport function DropdownUserAssistance(props: InlineUserAssistanceProps) {\n  // Prevent the focus from transferring when the user clicks on an empty/non-clickable area\n  // of the user assistance\n  const handleMouseDown = useCallback((event: MouseEvent) => {\n    // Don't call preventDefault when the user clicks on the help source link, so that the\n    // focus is allowed to transfer in that case.\n    if ((event.target as Element)?.tagName !== 'A') {\n      event.preventDefault();\n    }\n  }, []);\n\n  return (\n    <FormFieldContext.Provider value={{ isFocused: true }}>\n      <div class={rootStyles} onMouseDown={handleMouseDown}>\n        <InlineUserAssistance {...props} />\n      </div>\n    </FormFieldContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\n\nconst rootStyles = cssProps`${{\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n}}`;\n\nexport function EmptyResults() {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // TODO: figure out whether we need a separate resource string for this message;\n  // (JET-53984 - Preact Select* components: empty results message)\n\n  // call preventDefault for mousedown on this div so that focus does not transfer from\n  // the input\n  return (\n    <div class={rootStyles} onMouseDown={preventDefaultForCurrentTarget}>\n      {translations.select_noMatchesFound()}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { DataState } from '../UNSAFE_Collection';\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nexport function isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\nexport function isBeforeDataFetch<K, D>(data: DataState<K, D>) {\n  return data.sizePrecision === 'atLeast' && data.totalSize === 0;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MutableRef, useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState } from '../UNSAFE_Collection';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, isSimpleClick, KEYS } from './eventUtils';\n\ntype UseSelectCommonProps<K, D> = {\n  data?: DataState<K, D> | null;\n  inputRef: MutableRef<HTMLInputElement>;\n  isFocused?: boolean;\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n};\n\n/**\n * Hook that manages state and behavior for a Select* component.  This hook creates state\n * variables and event listeners, returning properties to apply to components internally\n * rendered by a Select* component, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isFocused Specifies whether the component has focus.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n *\n * @returns Component state and event listeners.\n */\nexport function useSelectCommon<K, D>({\n  data,\n  inputRef,\n  isFocused,\n  onFilter\n}: UseSelectCommonProps<K, D>) {\n  const mainFieldRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isUserFiltering, setUserFiltering] = useState(false);\n  const [userInput, setUserInput] = useState<string>();\n  const [searchText, setSearchText] = useState<string>();\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // const target = event.target as HTMLElement;\n      if (event.defaultPrevented || !isSimpleClick(event)) {\n        return;\n      }\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      // this is needed to focus the input when clicking on the inside label when there is no\n      // value;  otherwise the component looks focused but doesn't actually have physical focus\n      setTimeout(function () {\n        inputRef.current?.focus();\n      }, 0);\n    },\n    [isDropdownOpen]\n  );\n\n  const handleDropdownArrowClick = useCallback(() => {\n    setDropdownOpen(!isDropdownOpen);\n\n    // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes\n    inputRef.current?.focus();\n  }, [isDropdownOpen]);\n\n  const handleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        setDropdownOpen(false);\n\n        switch (event?.type) {\n          case 'keydown':\n            const keyboardEvent = event as KeyboardEvent;\n            switch (keyboardEvent.code) {\n              case KEYS.ESC:\n                // focus the input when the user cancels out of the dropdown\n                inputRef.current?.focus();\n                break;\n              default:\n                break;\n            }\n            break;\n          case 'mousedown':\n            // if focus is in the dropdown, focus the input before the dropdown is hidden so that\n            // focus will transfer correctly when the target is not focusable;\n            // otherwise the text cursor appears in the input again\n            if (dropdownRef.current?.contains(document.activeElement)) {\n              inputRef.current?.focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleUpDownArrowKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      } else {\n        // transfer physical focus into the dropdown\n        const firstFocusableElem = dropdownRef.current?.querySelector('[tabindex=\"0\"]');\n        (firstFocusableElem as HTMLElement)?.focus();\n\n        // if there is no current item set, make the first item current\n        if (data !== undefined && currentRow.rowKey === undefined) {\n          setCurrentRow({ rowKey: data?.data?.[0]?.metadata?.key });\n        }\n      }\n\n      // prevent the page from scrolling\n      event.preventDefault();\n    },\n    [currentRow, data, isDropdownOpen]\n  );\n\n  const handleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.PAGE_UP:\n        case KEYS.PAGE_DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n\n          return;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleMainFieldKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      setUserFiltering(true);\n      setUserInput(detail.value);\n      const str = detail.value?.trim();\n      setSearchText(str);\n      onFilter?.({ searchText: str });\n    },\n    [isDropdownOpen, onFilter]\n  );\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K>) => {\n    setCurrentRow({ rowKey: detail.value });\n  }, []);\n\n  const stopFiltering = useCallback(() => {\n    setUserFiltering(false);\n    setUserInput('');\n    setSearchText('');\n  }, []);\n\n  // the user is not actively filtering if the dropdown is closed and the component doesn't\n  // have focus\n  useEffect(() => {\n    if (!isDropdownOpen && !isFocused && isUserFiltering) {\n      stopFiltering();\n    }\n  }, [isDropdownOpen, isFocused, isUserFiltering]);\n\n  // need to call onFilter with undefined searchText when the dropdown opens and the\n  // user is NOT filtering\n  useEffect(() => {\n    if (isDropdownOpen && !isUserFiltering) {\n      onFilter?.({ searchText: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering, onFilter]);\n\n  return {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss,\n    handleInput,\n    handleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownOpen,\n    // the field should remain to look focused while the dropdown is open,\n    // in case physical focus is in the dropdown\n    isFocused: isFocused || isDropdownOpen,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    stopFiltering,\n    userInput\n  };\n}\n"],"names":["renderItemText","item","itemText","_a","data","hasOwnProperty","retData","String","Logger","error","noOp","loadingIndicator","_jsx","jsx","SkeletonContainer","Object","assign","minimumCount","children","KEYS","TAB","ENTER","ESC","SPACE","LEFT","UP","RIGHT","DOWN","SHIFT_LEFT","SHIFT_RIGHT","CTRL_LEFT","CTRL_RIGHT","ALT_LEFT","ALT_RIGHT","PAGE_UP","PAGE_DOWN","HOME","END","BACKSPACE","DELETE","isControlKey","event","code","metaKey","ctrlKey","isFunctionKey","test","isControlOrFunctionKey","isSimpleClick","button","preventDefaultForCurrentTarget","currentTarget","target","preventDefault","getDocument","node","ownerDocument","document","useOutsideMousedown","isDisabled","disabled","ref","handler","useEffect","refs","coerceArray","length","findIndex","elRef","current","onMouseDown","contains","every","isPointOutside","firstElRef","doc","addEventListener","removeEventListener","rootStyles","noop","accessibleSummary","currentItemVariant","currentKey","onCurrentKeyChange","onItemAction","onLoadRange","onSelectionChange","searchText","selectedKeys","selectionMode","listItemRenderer","useCallback","listItemContext","key","metadata","_jsxs","Flex","selector","class","HighlightText","matchText","renderedItemText","keys","useMemo","all","Set","List","allowTabbableMode","role","context","anchorRef","dropdownRef","id","isOpen","onAutoDismiss","handleAutoDismiss","handleKeyDown","inlineStyle","Layer","logicalParentRef","Floating","placement","offsetValue","style","onKeyDown","onClick","size","pressProps","usePress","hasBottomGap","isLoading","styleClasses","props","handleMouseDown","FormFieldContext","Provider","value","isFocused","InlineUserAssistance","translations","useTranslationBundle","select_noMatchesFound","sizePrecision","totalSize","deviceType","getClientHints","inputRef","onFilter","mainFieldRef","useRef","isDropdownOpen","setDropdownOpen","useState","currentRow","setCurrentRow","rowKey","undefined","setSelectedKeys","isUserFiltering","setUserFiltering","userInput","setUserInput","setSearchText","defaultPrevented","setTimeout","focus","handleDropdownArrowClick","handleDropdownAutoDismiss","type","_b","activeElement","_c","handleUpDownArrowKeys","firstFocusableElem","querySelector","_d","handleMainFieldKeyDown","stopPropagation","handleMainFieldKeyUp","handleInput","detail","str","trim","stopFiltering"],"mappings":"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"}