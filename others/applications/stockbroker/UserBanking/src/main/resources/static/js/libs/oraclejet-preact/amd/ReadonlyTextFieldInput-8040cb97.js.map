{"version":3,"file":"ReadonlyTextFieldInput-8040cb97.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldInput.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport type { TextProps } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { getLoadingAriaLabel } from './FormControlUtils';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype AutoFocusProp = HTMLAttributesSignalExcluded<HTMLInputElement>['autofocus'];\n\ntype ReadonlyAsInputProps = {\n  as: 'input';\n  type: HTMLAttributesSignalExcluded<HTMLInputElement>['type'];\n  elementRef?: Ref<HTMLInputElement>;\n  rows?: never;\n};\n\ntype ReadonlyAsTextAreaProps = {\n  as: 'textarea';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: number;\n};\n\ntype ReadonlyAsDivProps = {\n  as?: 'div';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: never;\n};\n\ntype Props = TextProps &\n  (ReadonlyAsDivProps | ReadonlyAsInputProps | ReadonlyAsTextAreaProps) & {\n    ariaDescribedBy?: string;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n    autoFocus?: AutoFocusProp;\n    hasInsideLabel?: boolean;\n    inlineUserAssistance?: ComponentChildren;\n    innerReadonlyField?: ComponentChildren;\n    value?: string;\n    variant?: 'textarea';\n  };\n\n// In readonly textarea, we need some margin between the border container element\n// and the textarea, so the the textarea's focus outline doesn't get truncated.\n// The 0.25rem is an aesthetically pleasing amount of margin to make the readonly\n// focus ring visible.\nconst borderToTextAreaContentMargin = '0.25rem';\n\nconst readOnlyTextFieldStyles = {\n  base: cssProps`${{\n    minHeight:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height) * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size))',\n    // TODO: Use Text component instead of CSS\n    wordBreak: 'break-word',\n    whiteSpace: 'pre-wrap',\n    // TODO: Cleanup the border and background CSS\n    backgroundColor: 'transparent',\n    borderColor: 'transparent',\n    borderWidth: '0',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)',\n    boxSizing: 'border-box',\n    // TODO: Use the Flex component instead of CSS\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    fontFamily: 'inherit',\n    fontSize: '100%',\n    fontWeight: 'inherit',\n    lineHeight: 'inherit',\n    outlineWidth: '0',\n\n    '&:focus': {\n      outlineStyle: 'dotted',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineOffset: '1px'\n    }\n  }}`,\n  textareaBase: cssProps`${{\n    resize: 'none',\n    paddingBlockStart: '0',\n    paddingInlineStart: '0'\n  }}`,\n  inEnabledFormBase: cssProps`${{\n    whiteSpace: 'nowrap',\n    overflowX: 'scroll',\n    overflowY: 'hidden',\n    scrollbarWidth: 'none'\n  }}`,\n\n  textareaInEnabledFormBase: cssProps`${{\n    marginTop:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    marginBottom:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    marginLeft: borderToTextAreaContentMargin,\n    marginRight: borderToTextAreaContentMargin,\n    paddingLeft: `calc(var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding) - ${borderToTextAreaContentMargin})`,\n    paddingRight: '0',\n    overflowX: 'auto',\n    overflowY: 'auto',\n    whiteSpace: 'pre-wrap'\n  }}`,\n\n  inEnabledFormLabelInside: cssProps`${{\n    // TODO: Look into why we need this hacky CSS\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-padding-top) + 0.1875rem)',\n    paddingTop: '0',\n    minHeight:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height) * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size))'\n  }}`,\n\n  textareaInEnabledFormLabelInside: cssProps`${{\n    paddingTop: 0,\n    paddingBottom: 0,\n    // We are using a transparent border here instead of padding, due to how textarea scrolls the padding off the screen\n    // and the text content will clash with the inside label.\n    borderColor: 'transparent',\n    borderStyle: 'solid',\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-font-size) * var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-line-height) + var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-position-top))',\n    marginBottom: borderToTextAreaContentMargin\n  }}`,\n\n  inEnabledFormNoLabelInside: cssProps`${{\n    // TODO: Remove if this is not needed.\n    justifyContent: 'center'\n  }}`,\n\n  // don't apply this for textarea\n  inEnabledFormNoStartContent: cssProps`${{\n    marginLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    marginRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    paddingLeft: '0',\n    paddingRight: '0'\n  }}`\n};\n\nexport function ReadonlyTextFieldInput({\n  ariaDescribedBy,\n  ariaLabel,\n  ariaLabelledBy,\n  autoFocus,\n  as = 'div',\n  elementRef,\n  hasInsideLabel = false,\n  inlineUserAssistance,\n  innerReadonlyField,\n  rows,\n  type,\n  value = '',\n  variant,\n  ...props\n}: Props) {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const ariaLabelForReadonly = isLoading ? getLoadingAriaLabel() : ariaLabel;\n\n  // get classes for text align\n  const interpolations = [...Object.values(textInterpolations)];\n  const styleInterpolations = mergeInterpolations<Props>(interpolations);\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n\n  const readonlyDivClasses = classNames([\n    as !== 'textarea' && 'oj-c-hide-scrollbar', // TODO: Temp workaround for using --webkit-scrollbar to hide the scrollbar\n    readOnlyTextFieldStyles.base,\n    as === 'textarea' && readOnlyTextFieldStyles.textareaBase,\n    isFormLayout && !isReadonlyForm && readOnlyTextFieldStyles.inEnabledFormBase,\n    variant === 'textarea' &&\n      isFormLayout &&\n      !isReadonlyForm &&\n      readOnlyTextFieldStyles.textareaInEnabledFormBase,\n    isFormLayout &&\n      !isReadonlyForm &&\n      (hasInsideLabel\n        ? readOnlyTextFieldStyles.inEnabledFormLabelInside\n        : readOnlyTextFieldStyles.inEnabledFormNoLabelInside),\n    variant === 'textarea' &&\n      isFormLayout &&\n      !isReadonlyForm &&\n      hasInsideLabel &&\n      readOnlyTextFieldStyles.textareaInEnabledFormLabelInside,\n    variant !== 'textarea' && // not for textarea\n      isFormLayout &&\n      !isReadonlyForm &&\n      readOnlyTextFieldStyles.inEnabledFormNoStartContent,\n    styleInterpolationClasses\n  ]);\n\n  // JET-52914 - Implement Tabbable mode API contract in InputText\n  // spread tabbableModeProps on component\n  const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n  if (as === 'input') {\n    return (\n      <input\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        type={type}\n        value={value}\n        {...(!isTabbable && tabbableModeProps)}\n      />\n    );\n  }\n  if (as === 'textarea') {\n    return (\n      <textarea\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        rows={rows}\n        {...(!isTabbable && tabbableModeProps)}>\n        {value}\n      </textarea>\n    );\n  }\n  return (\n    <div\n      aria-describedby={ariaDescribedBy}\n      aria-label={ariaLabelForReadonly}\n      aria-labelledby={ariaLabelledBy}\n      aria-readonly={true}\n      autofocus={autoFocus}\n      class={readonlyDivClasses}\n      // @ts-ignore\n      ref={elementRef}\n      role=\"textbox\"\n      {...tabbableModeProps}>\n      {value}\n    </div>\n  );\n}\n"],"names":["readOnlyTextFieldStyles","_a","ariaDescribedBy","ariaLabel","ariaLabelledBy","autoFocus","as","elementRef","hasInsideLabel","inlineUserAssistance","innerReadonlyField","rows","type","value","variant","props","__rest","isLoading","useFormFieldContext","ariaLabelForReadonly","getLoadingAriaLabel","styleInterpolations","mergeInterpolations","interpolations","isFormLayout","isReadonlyForm","_jsx","Object","assign","autofocus","class","readonlyDivClasses","readonly","ref","isTabbable","tabbableModeProps","children","role"],"mappings":"61CAoDA,MAEAA,EAAA,WAAAA,EAAA,QAAAA,EAAA,UAAAA,EAAA,WAAAA,EAAA,SAAAA,EAAA,WAAAA,EAAA,SAAAA,sCA2FA,SAAAC,GAAuC,IAAAC,gBAAAA,EAAAC,UAAAA,EAAAC,eAAAA,EAAAC,UAAAA,EAAAC,GAAAA,EAAA,MAAAC,WAAAA,EAAAC,eAAAA,GAAA,EAAAC,qBAAAA,EAAAC,mBAAAA,EAAAC,KAAAA,EAAAC,KAAAA,EAAAC,MAAAA,EAAA,GAAAC,QAAAA,GAAAb,EAAAc,EAAAC,EAAAA,OAAAf,EAAA,CAAA,kBAAA,YAAA,iBAAA,YAAA,KAAA,aAAA,iBAAA,uBAAA,qBAAA,OAAA,OAAA,QAAA,mEAiBrCgB,UAAAA,GAAAC,EAAAA,sBACAC,EAAAF,EAAAG,EAAAA,sBAAAjB,4DAIAkB,EAAAC,sBAAAC,wEAKEvB,EACA,aAAAM,GAAAN,EACAwB,IAAAC,GAAAzB,EACA,aAAAc,OAEEW,GACAzB,MAEAyB,IACAjB,IAEER,GACJ,aAAAc,OAEEW,MAEAzB,sBAGAyB,GACAzB,+EASF0B,MAAA,QAAAC,OAAAC,OAAA,CAAA,mBAAA1B,EAAA,aAAAiB,EAAA,kBAAAf,EAAAyB,UAAAxB,EAAAyB,MAAAC,EAAAC,UAAA,EASIC,IAAA1B,EAAAK,KAAAA,EAAAC,MAAAA,IAAAqB,GAAAC,mBAQJT,MAAA,WAAAC,OAAAC,OAAA,CAAA,mBAAA1B,EAAA,aAAAiB,EAAA,kBAAAf,EAAAyB,UAAAxB,EAAAyB,MAAAC,EAAAC,UAAA,EASIC,IAAA1B,EAAAI,KAAAA,IAAAuB,GAAAC,EAAA,CAAAC,SAAAvB,KAONa,MAAA,MAAAC,OAAAC,OAAA,CAAA,mBAAA1B,EAAA,aAAAiB,EAAA,kBAAAf,EAAA,iBAAA,EAAAyB,UAAAxB,EAAAyB,MAAAC,EASIE,IAAA1B,EAAA8B,KAAA,WAAAF,EAAA,CAAAC,SAAAvB"}