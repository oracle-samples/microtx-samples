{"version":3,"file":"UNSAFE_useTextField.js","sources":["../../../src/hooks/UNSAFE_useTextField/useTextField.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { useMemo } from 'preact/hooks';\nimport { Label } from '../../UNSAFE_Label';\nimport { TextField } from '../../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../../UNSAFE_UserAssistance';\nimport { FormFieldContextProps } from '../UNSAFE_useFormFieldContext';\nimport { useId } from '../UNSAFE_useId';\n\ntype PickedUserAssistanceProps = Pick<ComponentProps<typeof InlineUserAssistance>, 'messages'>;\n\ntype UseTextFieldProps<V> = PickedUserAssistanceProps & {\n  ariaDescribedBy?: string;\n  contentVariant?: 'input' | 'textarea';\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  isLoading?: boolean;\n  isReadonly?: boolean;\n  labelEdge?: ComponentProps<typeof TextField>['labelEdge'] | 'none';\n  styleVariant?: 'default' | 'embedded';\n  value?: V;\n};\n\nconst rankedSeverities = ['error', 'warning', 'confirmation', 'info', 'none'] as const;\n\n/**\n * Merge multiple ids into a space-separated list\n * @param ids The ids to be merged\n * @returns The space separated string of ids\n */\nfunction mergeIDs(...ids: (string | undefined)[]) {\n  return ids.filter(Boolean).join(' ') || undefined;\n}\n\n/**\n * A custom hook to determine the props for a component that renders\n * a text field\n */\nexport function useTextField<V>({\n  ariaDescribedBy,\n  contentVariant,\n  isDisabled,\n  isFocused,\n  isLoading,\n  isReadonly,\n  labelEdge,\n  messages,\n  styleVariant,\n  value\n}: UseTextFieldProps<V>) {\n  const baseId = useId();\n  const labelId = labelEdge !== 'none' ? `${baseId}-label` : undefined;\n  const inputId = !isReadonly ? `${baseId}-input` : undefined;\n  const uaId = !(isDisabled || isReadonly) ? `${baseId}-ua` : undefined;\n\n  // Create the form field context\n  const formFieldContext = useMemo<FormFieldContextProps>(() => {\n    const hasValue = value !== undefined && (typeof value !== 'string' || value !== '');\n    return isReadonly\n      ? {\n          hasValue: hasValue,\n          isFocused: isFocused,\n          isLoading,\n          isReadonly: true\n        }\n      : isDisabled\n      ? {\n          hasValue: hasValue,\n          isDisabled: true,\n          isLoading\n        }\n      : {\n          hasValue: hasValue,\n          isFocused: isFocused,\n          isLoading\n        };\n  }, [isDisabled, isFocused, isLoading, isReadonly, value]);\n\n  // Determine the highest severity from the messages\n  const messageSeverity = useMemo(() => {\n    return messages === undefined\n      ? undefined\n      : messages.reduce<typeof rankedSeverities[number]>((accSeverity, currMessage) => {\n          const currSeverity = currMessage.severity || 'error';\n          return rankedSeverities.indexOf(accSeverity) < rankedSeverities.indexOf(currSeverity)\n            ? accSeverity\n            : currSeverity;\n        }, 'none');\n  }, [messages]);\n\n  // Determine the label variant\n  const labelVariant: ComponentProps<typeof Label>['variant'] =\n    labelEdge === 'inside'\n      ? messageSeverity === 'error'\n        ? 'insideError'\n        : messageSeverity === 'warning'\n        ? 'insideWarning'\n        : labelEdge\n      : labelEdge !== 'none'\n      ? labelEdge\n      : undefined;\n\n  return {\n    baseId,\n    formFieldContext,\n    inputProps: {\n      id: inputId,\n      ariaDescribedBy: mergeIDs(uaId, ariaDescribedBy),\n      ariaInvalid: messageSeverity === 'error' ? 'true' : undefined,\n      variant: styleVariant\n    },\n    labelProps: {\n      forId: inputId,\n      id: labelId,\n      variant: labelVariant\n    },\n    textFieldProps: {\n      contentVariant,\n      statusVariant: /error|warning/.test(messageSeverity ?? '')\n        ? (messageSeverity as 'error' | 'warning')\n        : undefined,\n      styleVariant\n    },\n    userAssistanceProps: {\n      id: uaId\n    }\n  };\n}\n"],"names":["rankedSeverities","mergeIDs","ids","filter","Boolean","join","undefined","ariaDescribedBy","contentVariant","isDisabled","isFocused","isLoading","isReadonly","labelEdge","messages","styleVariant","value","baseId","useId","labelId","inputId","uaId","formFieldContext","useMemo","hasValue","messageSeverity","reduce","accSeverity","currMessage","currSeverity","severity","indexOf","labelVariant","inputProps","id","ariaInvalid","variant","labelProps","forId","textFieldProps","statusVariant","test","userAssistanceProps"],"mappings":"gFAsBA,MAAMA,EAAmB,CAAC,QAAS,UAAW,eAAgB,OAAQ,QAOtE,SAASC,KAAYC,GACnB,OAAOA,EAAIC,OAAOC,SAASC,KAAK,WAAQC,iBAOpC,UAA0BC,gBAC9BA,EAD8BC,eAE9BA,EAF8BC,WAG9BA,EAH8BC,UAI9BA,EAJ8BC,UAK9BA,EAL8BC,WAM9BA,EAN8BC,UAO9BA,EAP8BC,SAQ9BA,EAR8BC,aAS9BA,EAT8BC,MAU9BA,IAEA,MAAMC,EAASC,EAAAA,QACTC,EAAwB,SAAdN,EAAuB,GAAGI,eAAiBX,EACrDc,EAAWR,OAAiCN,EAAjB,GAAAW,UAC3BI,EAASZ,GAAcG,OAA+BN,KAAdW,OAGxCK,EAAmBC,EAAAA,QAA+B,KACtD,MAAMC,OAAqBlB,IAAVU,IAAyC,iBAAVA,GAAgC,KAAVA,GACtE,OAAOJ,EACH,CACEY,SAAUA,EACVd,UAAWA,EACXC,UAAAA,EACAC,YAAY,GAEdH,EACA,CACEe,SAAUA,EACVf,YAAY,EACZE,UAAAA,GAEF,CACEa,SAAUA,EACVd,UAAWA,EACXC,UAAAA,IAEL,CAACF,EAAYC,EAAWC,EAAWC,EAAYI,IAG5CS,EAAkBF,EAAAA,QAAQ,SACVjB,IAAbQ,OACHR,EACAQ,EAASY,OAAwC,CAACC,EAAaC,KAC7D,MAAMC,EAAeD,EAAYE,UAAY,QAC7C,OAAO9B,EAAiB+B,QAAQJ,GAAe3B,EAAiB+B,QAAQF,GACpEF,EACAE,GACH,QACN,CAACf,IAGEkB,EACU,WAAdnB,EACwB,UAApBY,EACE,cACoB,YAApBA,EACA,gBACAZ,EACY,SAAdA,EACAA,OACAP,EAEN,MAAO,CACLW,OAAAA,EACAK,iBAAAA,EACAW,WAAY,CACVC,GAAId,EACJb,gBAAiBN,EAASoB,EAAMd,GAChC4B,YAAiC,UAApBV,EAA8B,YAASnB,EACpD8B,QAASrB,GAEXsB,WAAY,CACVC,MAAOlB,EACPc,GAAIf,EACJiB,QAASJ,GAEXO,eAAgB,CACd/B,eAAAA,EACAgC,cAAe,gBAAgBC,KAAKhB,MAAAA,EAAAA,EAAmB,IAClDA,OACDnB,EACJS,aAAAA,GAEF2B,oBAAqB,CACnBR,GAAIb"}