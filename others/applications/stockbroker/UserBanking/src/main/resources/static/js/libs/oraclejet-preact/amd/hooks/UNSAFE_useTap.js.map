{"version":3,"file":"UNSAFE_useTap.js","sources":["../../../src/hooks/UNSAFE_useTap/useTap.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useCallback } from 'preact/hooks';\n\ntype TapOptions = {\n  isDisabled?: boolean;\n};\n\ntype TapInfo = {\n  x: number;\n  y: number;\n};\n\ntype TapState = {\n  pointerDownId: number | null;\n  startTime: number;\n};\n\n/**\n * Returns event handlers that can make a target element tapable.\n * useTap is used for non-keyboard elements.\n *\n * @param onTap function\n * @param settings object\n * @returns\n */\n\nexport function useTap(\n  onTap: (e: TapInfo) => void,\n  { isDisabled }: TapOptions = { isDisabled: false }\n): { tapProps: Record<string, any> } {\n  const ref = useRef<TapState>({\n    pointerDownId: null,\n    startTime: 0\n  });\n\n  const onPointerDown = useCallback((e: PointerEvent) => {\n    // return if it is not a left click\n    if (e.pointerType === 'mouse' && e.button !== 0) {\n      return;\n    }\n    if (!ref.current.pointerDownId) {\n      ref.current = { pointerDownId: e.pointerId, startTime: e.timeStamp };\n    } else {\n      clearTap();\n    }\n  }, []);\n\n  const onPointerUp = useCallback(\n    (e: PointerEvent) => {\n      if (e.pointerId === ref.current.pointerDownId) {\n        const tapTime = e.timeStamp - ref.current.startTime;\n        // 250ms maximum tap time based on numbers used in Hammer\n        if (tapTime <= 250) {\n          onTap({ x: e.offsetX, y: e.offsetY });\n        }\n      }\n      clearTap();\n    },\n    [onTap]\n  );\n\n  const clearTap = useCallback(() => {\n    ref.current = { pointerDownId: null, startTime: 0 };\n  }, []);\n\n  const tapProps = isDisabled\n    ? {}\n    : {\n        onPointerDown,\n        onPointerUp,\n        onPointerLeave: clearTap,\n        onPointerCancel: clearTap\n      };\n\n  return {\n    tapProps\n  };\n}\n"],"names":["onTap","isDisabled","ref","useRef","pointerDownId","startTime","onPointerDown","useCallback","e","pointerType","button","current","clearTap","pointerId","timeStamp","onPointerUp","x","offsetX","y","offsetY","tapProps","onPointerLeave","onPointerCancel"],"mappings":"sEAiCgB,SACdA,GACAC,WAAEA,GAA2B,CAAEA,YAAY,IAE3C,MAAMC,EAAMC,EAAAA,OAAiB,CAC3BC,cAAe,KACfC,UAAW,IAGPC,EAAgBC,cAAaC,IAEX,UAAlBA,EAAEC,aAAwC,IAAbD,EAAEE,SAG9BR,EAAIS,QAAQP,cAGfQ,IAFAV,EAAIS,QAAU,CAAEP,cAAeI,EAAEK,UAAWR,UAAWG,EAAEM,aAI1D,IAEGC,EAAcR,cACjBC,IACC,GAAIA,EAAEK,YAAcX,EAAIS,QAAQP,cAAe,CAC7BI,EAAEM,UAAYZ,EAAIS,QAAQN,WAE3B,KACbL,EAAM,CAAEgB,EAAGR,EAAES,QAASC,EAAGV,EAAEW,UAG/BP,KAEF,CAACZ,IAGGY,EAAWL,EAAAA,YAAY,KAC3BL,EAAIS,QAAU,CAAEP,cAAe,KAAMC,UAAW,IAC/C,IAWH,MAAO,CACLe,SAVenB,EACb,GACA,CACEK,cAAAA,EACAS,YAAAA,EACAM,eAAgBT,EAChBU,gBAAiBV"}