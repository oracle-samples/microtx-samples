{"version":3,"file":"UNSAFE_Environment.js","sources":["../../src/UNSAFE_Environment/EnvironmentContext.tsx","../../src/UNSAFE_Environment/EnvironmentProvider.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\n\n/**\n * Defines user specific environment\n */\ntype User = {\n  locale: string;\n  direction: 'rtl' | 'ltr';\n  forcedColors: 'none' | 'active';\n};\n\ntype ColorScheme = 'light' | 'dark';\ntype Scale = 'lg' | 'md' | 'sm';\n\n/**\n * Defines theme environment on root element\n */\ntype Theme = {\n  name: string;\n};\n\n/**\n * Defines translation bundle type.\n */\nexport type TranslationBundle = Record<string, (...args: any[]) => string>;\n\n/**\n * Defines a type for translation property which is an object where\n * - key - string - bundle id\n * - value - object - strings to functions of the type (options?: object)=>string\n *\n * Translation bundle example:\n * const bundle = {\n *  @oracle/oracle-preact-bundle: {\n *      welcome: () => 'bienvenido',\n *      success: () => 'Ã©xito'\n *  }\n * }\n */\ntype Translations = { [bundleId: string]: TranslationBundle };\n\n/**\n * Environment specified at the root level\n */\nexport type RootEnvironment = {\n  // supports user preferences\n  user?: Partial<User>;\n  // supports theme settings\n  theme?: Theme;\n  colorScheme?: ColorScheme;\n  scale?: Scale;\n  // supports translation bundles\n  translations?: Translations;\n};\n\n/**\n * Environment specified at the component level\n */\nexport type Environment = {\n  colorScheme?: ColorScheme;\n  scale?: Scale;\n  translations?: Translations;\n};\n\nexport type CompleteEnvironmentType = {\n  user: User;\n  theme: Theme;\n  scale: Scale;\n  colorScheme: ColorScheme;\n  translations?: Translations;\n};\n\n/**\n * Default environment created for the application\n */\nexport const DefaultEnvironment: CompleteEnvironmentType = {\n  user: {\n    locale: document.documentElement.getAttribute('lang') || 'en',\n    direction: document.documentElement.getAttribute('dir') === 'rtl' ? 'rtl' : 'ltr',\n    forcedColors: window.matchMedia?.('(forced-colors: active)')?.matches ? 'active' : 'none'\n  },\n  theme: {\n    name: 'redwood'\n  },\n  colorScheme: 'light',\n  scale: 'lg'\n};\n\nexport const EnvironmentContext = createContext<CompleteEnvironmentType>(DefaultEnvironment);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { useContext, useMemo } from 'preact/hooks';\nimport {\n  EnvironmentContext,\n  Environment,\n  RootEnvironment,\n  DefaultEnvironment,\n  CompleteEnvironmentType\n} from './EnvironmentContext';\nimport { LayerManager } from '../UNSAFE_Layer';\n\n// EnvironmentProvider properties\nexport declare type ProviderProperties<Env extends RootEnvironment | Environment> = {\n  environment?: Env;\n  children?: ComponentChildren;\n};\n\n// Custom merge function\nfunction mergeEnvironment(\n  env1: CompleteEnvironmentType,\n  env2: Partial<RootEnvironment> | undefined\n) {\n  const userValue = Object.assign({}, env1.user, env2?.user);\n  const themeValue = Object.assign({}, env1.theme, env2?.theme);\n\n  // Merge translation values - one level merge\n  const targetTranslations = Object.assign({}, env1.translations);\n  const sourceTranslations = env2?.translations || {};\n  Object.keys(sourceTranslations).forEach((key) => {\n    let newVal = sourceTranslations[key];\n    if (targetTranslations[key]) {\n      // merge is needed\n      newVal = Object.assign({}, targetTranslations[key], newVal);\n    }\n    targetTranslations[key] = newVal;\n  });\n\n  return {\n    user: userValue,\n    theme: themeValue,\n    translations: targetTranslations,\n    colorScheme: env2?.colorScheme ?? env1.colorScheme,\n    scale: env2?.scale ?? env1.scale\n  };\n}\n\n/**\n * The RootEnvironmentProvider component bootstraps essential services and\n * must be placed at the root of any application using components from _'@oracle/oraclejet-preact'_.\n * Minimally, the application must load the appropriate translation bundle for the user's locale\n * and set it on the RootEnvironmentProvider.\n */\nexport function RootEnvironmentProvider({\n  children,\n  environment\n}: ProviderProperties<RootEnvironment>) {\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(DefaultEnvironment, environment),\n    [environment]\n  );\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>\n      <LayerManager>{children}</LayerManager>\n    </EnvironmentContext.Provider>\n  );\n}\n\n/**\n * The EnvironmentProvider is a component that should be used by the application when there is a need to overwrite\n * environment values for a subtree.\n * The component receives an Environment object that will be merged into the values provided by the nearest ancestor Provider.\n * The new environment will be passed to the component's children.\n * Note that some environment values cannot be overwritten. See the description of the Environment type for the list of values\n * that can be replaced.\n */\nexport function EnvironmentProvider({ children, environment }: ProviderProperties<Environment>) {\n  const consumerEnv = useContext(EnvironmentContext);\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(consumerEnv, environment),\n    [consumerEnv, environment]\n  );\n\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>{children}</EnvironmentContext.Provider>\n  );\n}\n"],"names":["DefaultEnvironment","user","locale","document","documentElement","getAttribute","direction","forcedColors","_b","window","matchMedia","_a","call","matches","theme","name","colorScheme","scale","EnvironmentContext","createContext","mergeEnvironment","env1","env2","userValue","Object","assign","themeValue","targetTranslations","translations","sourceTranslations","keys","forEach","key","newVal","children","environment","consumerEnv","useContext","mergedEnvironment","useMemo","_jsx","jsx","Provider","value","LayerManager"],"mappings":"4IAmFO,MAAMA,EAA8C,CACzDC,KAAM,CACJC,OAAQC,SAASC,gBAAgBC,aAAa,SAAW,KACzDC,UAA4D,QAAjDH,SAASC,gBAAgBC,aAAa,OAAmB,MAAQ,MAC5EE,cAA8D,QAAhDC,EAAoB,UAApBC,OAAOC,kBAAa,IAAAC,OAAA,EAAAA,EAAAC,KAAAH,OAAA,kCAA4B,IAAAD,OAAA,EAAAA,EAAAK,SAAU,SAAW,QAErFC,MAAO,CACLC,KAAM,WAERC,YAAa,QACbC,MAAO,MAGIC,EAAqBC,EAAaA,cAA0BnB,GCtEzE,SAASoB,EACPC,EACAC,WAEA,MAAMC,EAAYC,OAAOC,OAAO,GAAIJ,EAAKpB,KAAMqB,MAAAA,OAAI,EAAJA,EAAMrB,MAC/CyB,EAAaF,OAAOC,OAAO,GAAIJ,EAAKP,MAAOQ,MAAAA,OAAI,EAAJA,EAAMR,OAGjDa,EAAqBH,OAAOC,OAAO,GAAIJ,EAAKO,cAC5CC,GAAqBP,MAAAA,OAAA,EAAAA,EAAMM,eAAgB,GAUjD,OATAJ,OAAOM,KAAKD,GAAoBE,QAASC,IACvC,IAAIC,EAASJ,EAAmBG,GAC5BL,EAAmBK,KAErBC,EAAST,OAAOC,OAAO,GAAIE,EAAmBK,GAAMC,IAEtDN,EAAmBK,GAAOC,IAGrB,CACLhC,KAAMsB,EACNT,MAAOY,EACPE,aAAcD,EACdX,YAA8B,QAAjBL,EAAAW,MAAAA,OAAI,EAAJA,EAAMN,mBAAW,IAAAL,EAAAA,EAAIU,EAAKL,YACvCC,MAAkB,QAAXT,EAAAc,MAAAA,OAAI,EAAJA,EAAML,aAAK,IAAAT,EAAAA,EAAIa,EAAKJ,8DAiCKiB,SAAEA,EAAFC,YAAYA,IAC9C,MAAMC,EAAcC,aAAWnB,GACzBoB,EAAoBC,UACxB,IAAMnB,EAAiBgB,EAAaD,GACpC,CAACC,EAAaD,IAGhB,OACEK,EAAAC,IAACvB,EAAmBwB,SAAQlB,OAAAC,OAAA,CAACkB,MAAOL,GAAiB,CAAAJ,SAAGA,0CA/BpBA,SACtCA,EADsCC,YAEtCA,IAEA,MAAMG,EAAoBC,EAAOA,QAC/B,IAAMnB,EAAiBpB,EAAoBmC,GAC3C,CAACA,IAEH,OACEK,EAAAA,IAACtB,EAAmBwB,wBAASC,MAAOL,GAAiB,CAAAJ,SACnDM,MAACI,eAAY,CAAAV,SAAEA"}