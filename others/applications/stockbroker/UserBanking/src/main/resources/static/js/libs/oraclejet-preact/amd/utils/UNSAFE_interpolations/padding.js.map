{"version":3,"file":"padding.js","sources":["../../../../src/utils/UNSAFE_interpolations/padding/padding.ts"],"sourcesContent":["import { stringLiteralArray } from '../../UNSAFE_arrayUtils';\nimport { sizeToCSS, Size } from '../../UNSAFE_size';\nimport { coerceArray } from '../../UNSAFE_arrayUtils';\n\nconst paddingstartends = stringLiteralArray([\n  'paddingBlockStart',\n  'paddingBlockEnd',\n  'paddingInlineStart',\n  'paddingInlineEnd'\n]);\n\ntype PaddingStartEnd = typeof paddingstartends[number];\ntype PaddingStartEndProps = { [key in PaddingStartEnd]?: Size };\n\nexport type PaddingProps = {\n  padding?: Size | [Size] | [Size, Size] | [Size, Size, Size] | [Size, Size, Size, Size];\n} & PaddingStartEndProps;\n\nconst paddingInterpolations = {\n  padding: ({ padding }: Pick<PaddingProps, 'padding'>) => {\n    if (padding === undefined) {\n      return {};\n    } else {\n      const [\n        topPadding,\n        rightPadding = topPadding,\n        bottomPadding = topPadding,\n        leftPadding = rightPadding\n      ] = coerceArray(padding) as\n        | [Size]\n        | [Size, Size]\n        | [Size, Size, Size]\n        | [Size, Size, Size, Size];\n      return {\n        padding: `${sizeToCSS(topPadding)} ${sizeToCSS(rightPadding)} \n        ${sizeToCSS(bottomPadding)} ${sizeToCSS(leftPadding)}`\n      };\n    }\n  },\n  paddingBlockStart: ({ paddingBlockStart }: Pick<PaddingProps, 'paddingBlockStart'>) =>\n    paddingBlockStart === undefined\n      ? {}\n      : {\n          paddingBlockStart: `${sizeToCSS(paddingBlockStart)}`\n        },\n  paddingBlockEnd: ({ paddingBlockEnd }: Pick<PaddingProps, 'paddingBlockEnd'>) =>\n    paddingBlockEnd === undefined\n      ? {}\n      : {\n          paddingBlockEnd: `${sizeToCSS(paddingBlockEnd)}`\n        },\n  paddingInlineStart: ({ paddingInlineStart }: Pick<PaddingProps, 'paddingInlineStart'>) =>\n    paddingInlineStart === undefined\n      ? {}\n      : {\n          paddingInlineStart: `${sizeToCSS(paddingInlineStart)}`\n        },\n  paddingInlineEnd: ({ paddingInlineEnd }: Pick<PaddingProps, 'paddingInlineEnd'>) =>\n    paddingInlineEnd === undefined\n      ? {}\n      : {\n          paddingInlineEnd: `${sizeToCSS(paddingInlineEnd)}`\n        }\n};\n\nexport { paddingInterpolations };\n"],"names":["stringLiteralArray","paddingInterpolations","padding","undefined","topPadding","rightPadding","bottomPadding","leftPadding","coerceArray","sizeToCSS","paddingBlockStart","paddingBlockEnd","paddingInlineStart","paddingInlineEnd"],"mappings":"wFAIyBA,EAAAA,mBAAmB,CAC1C,oBACA,kBACA,qBACA,qBAJF,MAcMC,EAAwB,CAC5BC,QAAS,EAAGA,QAAAA,MACV,QAAgBC,IAAZD,EACF,MAAO,GACF,CACL,MACEE,EACAC,EAAeD,EACfE,EAAgBF,EAChBG,EAAcF,GACZG,EAAWA,YAACN,GAKhB,MAAO,CACLA,QAAY,GAAAO,YAAUL,MAAeK,EAAAA,UAAUJ,gBAC7CI,EAAAA,UAAUH,MAAkBG,EAASA,UAACF,QAI9CG,kBAAmB,EAAGA,kBAAAA,UACEP,IAAtBO,EACI,GACA,CACEA,kBAAsB,GAAAD,YAAUC,MAExCC,gBAAiB,EAAGA,gBAAAA,UACER,IAApBQ,EACI,GACA,CACEA,gBAAoB,GAAAF,YAAUE,MAEtCC,mBAAoB,EAAGA,mBAAAA,UACET,IAAvBS,EACI,GACA,CACEA,mBAAuB,GAAAH,YAAUG,MAEzCC,iBAAkB,EAAGA,iBAAAA,UACEV,IAArBU,EACI,GACA,CACEA,iBAAqB,GAAAJ,YAAUI"}