{"version":3,"file":"LoadMoreCollection-d199803f.js","sources":["../../src/UNSAFE_LoadMoreCollection/LoadMoreCollection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject, ComponentChildren } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { DataState, ItemContext, Range, Metadata } from '../UNSAFE_Collection';\nimport { Collection } from '../PRIVATE_Collection';\nimport { useViewportIntersect, ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\n\n/**\n * Props for the VirtualizedCollection component\n */\ntype Props<K, D> = {\n  /**\n   * A DataState object that provide information including data and metadata to the VirtualizedCollection.\n   */\n  data: DataState<K, D> | null;\n\n  /**\n   * Renderer callback used to render each item\n   */\n  children: (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => ComponentChildren;\n\n  /**\n   * Viewport configuration including specifying the element which is used to determine what range\n   * of data to render\n   */\n  viewportConfig: ViewportConfig;\n\n  /**\n   * Callback function to handle when viewport has changed, including the case\n   * where user scrolls to the end of the component and there are more items to load.\n   * The function should sets a new DataState on the component for the specified range.\n   */\n  onLoadRange: (range: Range) => void;\n\n  /**\n   * Optionally specify the custom load more indicator\n   */\n  loadMoreIndicator?: ComponentChildren;\n\n  /**\n   * Optionally provide the suggestion indicator sparkle\n   */\n  suggestions?: ComponentChildren;\n};\n\nconst isDataStateValid = <K, D>(dataState: DataState<K, D>) => {\n  return dataState && dataState.data && dataState.offset >= 0 && dataState.totalSize >= 0;\n};\n\nconst DEFAULT_MARGIN = 1;\nconst DEFAULT_FETCH_SIZE = 25;\n\nconst LOADMORE_STYLE_CLASS = 'oj-collection-loadmore';\nconst LOAD_MORE_SELECTOR = `.${LOADMORE_STYLE_CLASS}`;\n\n/**\n * Component that only render items in the specified viewport.\n * @param props\n */\nexport function LoadMoreCollection<K, D>({\n  data,\n  children,\n  viewportConfig,\n  onLoadRange,\n  loadMoreIndicator,\n  suggestions\n}: Props<K, D>) {\n  const rootRef: RefObject<any> = useRef<HTMLElement>(null);\n  const fetchSizeRef: RefObject<number> = useRef<number>(-1);\n\n  // detect if viewport has changed and it needs to re-render based on a new range\n  useViewportIntersect(viewportConfig, DEFAULT_MARGIN, LOAD_MORE_SELECTOR, () => {\n    if (data) {\n      if (fetchSizeRef.current == null || fetchSizeRef.current <= 0) {\n        fetchSizeRef.current = data.totalSize;\n      }\n      const fetchSize =\n        fetchSizeRef.current && fetchSizeRef.current > 0\n          ? fetchSizeRef.current\n          : DEFAULT_FETCH_SIZE;\n      onLoadRange({\n        offset: 0,\n        count: data.totalSize + fetchSize\n      });\n    }\n  });\n\n  // override itemRenderer to adjust the index\n  const _getItemRenderer = (startIndex: number) => {\n    // returns a new render function\n    return (context: ItemContext<{ data: D; metadata: Metadata<K> }>) => {\n      const itemContext: ItemContext<{ data: D; metadata: Metadata<K> }> = {\n        index: startIndex + context.index,\n        data: context.data\n      };\n      return children(itemContext);\n    };\n  };\n\n  // if DataState is invalid (including not specified), just render blank\n  if (!data || !isDataStateValid(data)) {\n    return <div ref={rootRef} />;\n  }\n\n  const dataState = data;\n  const rangeData = dataState.data;\n  const offset = dataState.offset;\n  const endIndex = offset + rangeData.length;\n  const itemCount = dataState.totalSize;\n\n  const renderLoadMore =\n    loadMoreIndicator && dataState.sizePrecision === 'atLeast' && endIndex <= itemCount;\n\n  // might need to support elementType prop in the future to allow customization of what\n  // type of element to render for the root\n  return (\n    <div ref={rootRef}>\n      {suggestions}\n      <Collection items={rangeData}>{_getItemRenderer(offset)}</Collection>\n      {renderLoadMore && <div class={LOADMORE_STYLE_CLASS}>{loadMoreIndicator}</div>}\n    </div>\n  );\n}\n"],"names":["LOADMORE_STYLE_CLASS","data","children","viewportConfig","onLoadRange","loadMoreIndicator","suggestions","rootRef","useRef","fetchSizeRef","useViewportIntersect","current","totalSize","fetchSize","offset","count","dataState","isDataStateValid","_jsx","jsx","ref","rangeData","endIndex","length","itemCount","renderLoadMore","sizePrecision","_jsxs","Object","assign","Collection","items","startIndex","context","itemContext","index","class"],"mappings":"+KAmDA,MAOMA,EAAuB,8CAOb,UAAyBC,KACvCA,EADuCC,SAEvCA,EAFuCC,eAGvCA,EAHuCC,YAIvCA,EAJuCC,kBAKvCA,EALuCC,YAMvCA,IAEA,MAAMC,EAA0BC,SAAoB,MAC9CC,EAAkCD,EAAAA,QAAgB,GAgCxD,GA7BAE,EAAAA,qBAAqBP,EAtBA,EAIQ,0BAkB4C,KACvE,GAAIF,EAAM,EACoB,MAAxBQ,EAAaE,SAAmBF,EAAaE,SAAW,KAC1DF,EAAaE,QAAUV,EAAKW,WAE9B,MAAMC,EACJJ,EAAaE,SAAWF,EAAaE,QAAU,EAC3CF,EAAaE,QA5BE,GA8BrBP,EAAY,CACVU,OAAQ,EACRC,MAAOd,EAAKW,UAAYC,QAkBzBZ,IAvDyBe,CAAAA,GACvBA,GAAaA,EAAUf,MAAQe,EAAUF,QAAU,GAAKE,EAAUJ,WAAa,EAsDxEK,CAAiBhB,GAC7B,OAAOiB,EAAKC,IAAA,MAAA,CAAAC,IAAKb,IAGnB,MAAMS,EAAYf,EACZoB,EAAYL,EAAUf,KACtBa,EAASE,EAAUF,OACnBQ,EAAWR,EAASO,EAAUE,OAC9BC,EAAYR,EAAUJ,UAEtBa,EACJpB,GAAiD,YAA5BW,EAAUU,eAA+BJ,GAAYE,EAI5E,OACEG,EAAAA,KAAA,MAAAC,OAAAC,OAAA,CAAKT,IAAKb,GACP,CAAAL,SAAA,CAAAI,EACDY,EAAAC,IAACW,aAAUF,OAAAC,OAAA,CAACE,MAAOV,GAAY,CAAAnB,UA9BT8B,EA8B0BlB,EA5B1CmB,IACN,MAAMC,EAA+D,CACnEC,MAAOH,EAAaC,EAAQE,MAC5BlC,KAAMgC,EAAQhC,MAEhB,OAAOC,EAASgC,QAwBfT,GAAkBP,EAAKC,IAAA,MAAAS,OAAAC,OAAA,CAAAO,MAAOpC,GAAuB,CAAAE,SAAAG,SA/BhC2B,IAAAA"}