{"version":3,"file":"UNSAFE_units.js","sources":["../../../src/utils/UNSAFE_units/units.ts"],"sourcesContent":["import { stringLiteralArray } from '../UNSAFE_arrayUtils';\nimport { isString } from '../UNSAFE_stringUtils';\n\nconst is = (Ctor: any) => (val: any) =>\n  (val != null && val.constructor === Ctor) || val instanceof Ctor;\n\nconst isNumber = is(Number);\nconst isNumeral = (n: any) => !isNaN(parseFloat(n)) && !isNaN(n - 0);\nconst isZero = (n: any) => n === 0 || n === '0';\n\nconst units = stringLiteralArray(['px', '%', 'em', 'rem', 'vh', 'vw']);\nconst endsWithUnitRegExp = new RegExp(`(${units.join('|')})$`);\n\ntype Unit = typeof units[number];\n\nconst hasUnit = (val: any) => isString(val) && endsWithUnitRegExp.test(val);\nconst toUnit = (unit: Unit) => (n: string | number) =>\n  isZero(n) || hasUnit(n) || !isNumeral(n) ? n : n + unit;\n\nconst px = toUnit('px');\n\nexport { isNumber, isZero, hasUnit, px };\n"],"names":["isNumber","Ctor","Number","val","constructor","isZero","n","units","stringLiteralArray","endsWithUnitRegExp","RegExp","join","hasUnit","isString","test","px","unit","isNaN","parseFloat","isNumeral"],"mappings":"yHAGA,MAGMA,GAHMC,EAGQC,OAHOC,GACjB,MAAPA,GAAeA,EAAIC,cAAgBH,GAASE,aAAeF,GADlDA,IAAAA,EAIZ,MACMI,EAAUC,GAAiB,IAANA,GAAiB,MAANA,EAEhCC,EAAQC,EAAAA,mBAAmB,CAAC,KAAM,IAAK,KAAM,MAAO,KAAM,OAC1DC,EAAqB,IAAIC,OAAW,IAAAH,EAAMI,KAAK,UAI/CC,EAAWT,GAAaU,EAAQA,SAACV,IAAQM,EAAmBK,KAAKX,GAIjEY,GAHUC,EAGE,KAHcV,GAC9BD,EAAOC,IAAMM,EAAQN,KAVJA,CAAAA,IAAYW,MAAMC,WAAWZ,MAAQW,MAAMX,EAAI,GAUpCa,CAAUb,GAAKA,EAAIA,EAAIU,GADrCA,IAAAA"}